<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiJkNTI1MTRiNS0xNzBjLTRkNzMtYmFhZi04MTIyMTExNTQzM2MiLCJjb252ZXJzYXRpb25zIjp7ImQ0M2VkMjgyLTJlOWItNDRhNi1iMzNjLWFhYmYwMzMzNmU5NSI6eyJpZCI6ImQ0M2VkMjgyLTJlOWItNDRhNi1iMzNjLWFhYmYwMzMzNmU5NSIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDQtMjBUMDc6NDU6NDkuMTkzWiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA0LTIwVDA3OjQ1OjQ5LjE5M1oiLCJjaGF0SGlzdG9yeSI6W10sImZlZWRiYWNrU3RhdGVzIjp7fSwidG9vbFVzZVN0YXRlcyI6e30sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjpmYWxzZSwiZXh0cmFEYXRhIjp7Imhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9LCIxNjA4M2U4MC1iODg0LTQwNTAtOGU3Mi00ZjI3MzBiY2MwYWYiOnsiaWQiOiIxNjA4M2U4MC1iODg0LTQwNTAtOGU3Mi00ZjI3MzBiY2MwYWYiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA0LTIwVDA3OjQ1OjQ5LjI3MFoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNC0yMFQwNzo0NTo0OS4yNzBaIiwiY2hhdEhpc3RvcnkiOltdLCJmZWVkYmFja1N0YXRlcyI6e30sInRvb2xVc2VTdGF0ZXMiOnt9LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6ImltcG9ydCBwYW5kYXMgYXMgcGRcbmltcG9ydCBudW1weSBhcyBucFxuaW1wb3J0IHBsb3RseS5leHByZXNzIGFzIHB4XG5pbXBvcnQgcGxvdGx5LmdyYXBoX29iamVjdHMgYXMgZ29cbmZyb20gcGxvdGx5LnN1YnBsb3RzIGltcG9ydCBtYWtlX3N1YnBsb3RzXG5pbXBvcnQgZGF0ZXRpbWUgYXMgZHRcbmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lLCB0aW1lZGVsdGFcbmltcG9ydCB3YXJuaW5nc1xuIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImltcG9ydCBwYW5kYXMgYXMgcGQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImltcG9ydCBudW1weSBhcyBucCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiaW1wb3J0IHBsb3RseS5leHByZXNzIGFzIHB4In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJpbXBvcnQgcGxvdGx5LmdyYXBoX29iamVjdHMgYXMgZ28ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImZyb20gcGxvdGx5LnN1YnBsb3RzIGltcG9ydCBtYWtlX3N1YnBsb3RzIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJpbXBvcnQgZGF0ZXRpbWUgYXMgZHQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lLCB0aW1lZGVsdGEifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImltcG9ydCB3YXJuaW5ncyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RhdHVzIjoiZHJhZnQifSwiZHJhZnRBY3RpdmVDb250ZXh0SWRzIjpbIi9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXNmYWxzZWZhbHNlIl0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjpmYWxzZSwiZXh0cmFEYXRhIjp7Imhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9LCJkNTI1MTRiNS0xNzBjLTRkNzMtYmFhZi04MTIyMTExNTQzM2MiOnsiaWQiOiJkNTI1MTRiNS0xNzBjLTRkNzMtYmFhZi04MTIyMTExNTQzM2MiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA0LTIwVDA3OjQ1OjU1LjQ0M1oiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNC0yMFQwODoyOToxOC41MzBaIiwiY2hhdEhpc3RvcnkiOlt7InJlcXVlc3RfaWQiOiJlMmI4NzdhMy05NWFiLTRlZGMtYjM2NS05NWNlZTdjNTQzOGMiLCJ1dWlkIjoiZTkwZmI4MTgtZDBhOC00Njg3LTlhMGYtNjZkMzhkNmY5OGZlIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjowLCJ0b1RpbWVzdGFtcCI6MTc0NTEzNTE1NTQ0NCwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiODFjZjg0OGMtZmEwNC00MDQzLWI2OWUtYTYzM2Q5ZTA5ZWYwIiwicmVxdWVzdF9tZXNzYWdlIjoiaW1wb3J0IHBhbmRhcyBhcyBwZFxuaW1wb3J0IG51bXB5IGFzIG5wXG5pbXBvcnQgcGxvdGx5LmV4cHJlc3MgYXMgcHhcbmltcG9ydCBwbG90bHkuZ3JhcGhfb2JqZWN0cyBhcyBnb1xuZnJvbSBwbG90bHkuc3VicGxvdHMgaW1wb3J0IG1ha2Vfc3VicGxvdHNcbmltcG9ydCBkYXRldGltZSBhcyBkdFxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YVxuaW1wb3J0IHdhcm5pbmdzXG4iLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoiaW1wb3J0IHBhbmRhcyBhcyBwZCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiaW1wb3J0IG51bXB5IGFzIG5wIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJpbXBvcnQgcGxvdGx5LmV4cHJlc3MgYXMgcHgifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImltcG9ydCBwbG90bHkuZ3JhcGhfb2JqZWN0cyBhcyBnbyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiZnJvbSBwbG90bHkuc3VicGxvdHMgaW1wb3J0IG1ha2Vfc3VicGxvdHMifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImltcG9ydCBkYXRldGltZSBhcyBkdCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiaW1wb3J0IHdhcm5pbmdzIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE0Y2JaSExmV1d0SHhlZEZTSHRVRVluIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJGaW5kIHRoZSBtYWluIHByb2plY3Qgc3RydWN0dXJlLCBpbmNsdWRpbmcgYW55IERqYW5nbyBhcHBzLCBtb2RlbHMsIGFuZCBkYXRhIGFuYWx5c2lzIGZpbGVzLiBMb29rIGZvciBhbnkgZXhpc3RpbmcgZGF0YSBhbmFseXNpcyBvciB2aXN1YWxpemF0aW9uIGNvZGUuXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJJ2xsIGhlbHAgeW91IHNldCB1cCBhIFB5dGhvbiBlbnZpcm9ubWVudCB3aXRoIHRoZSBkYXRhIGFuYWx5c2lzIGFuZCB2aXN1YWxpemF0aW9uIGxpYnJhcmllcyB5b3UndmUgaW1wb3J0ZWQuIExldCBtZSBmaXJzdCBleHBsb3JlIHRoZSBjb2RlYmFzZSB0byB1bmRlcnN0YW5kIHRoZSBwcm9qZWN0IHN0cnVjdHVyZSBhbmQgY29udGV4dC5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiaW1wb3J0IHBhbmRhcyBhcyBwZFxuaW1wb3J0IG51bXB5IGFzIG5wXG5pbXBvcnQgcGxvdGx5LmV4cHJlc3MgYXMgcHhcbmltcG9ydCBwbG90bHkuZ3JhcGhfb2JqZWN0cyBhcyBnb1xuZnJvbSBwbG90bHkuc3VicGxvdHMgaW1wb3J0IG1ha2Vfc3VicGxvdHNcbmltcG9ydCBkYXRldGltZSBhcyBkdFxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YVxuaW1wb3J0IHdhcm5pbmdzXG4ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiSSdsbCBoZWxwIHlvdSBzZXQgdXAgYSBQeXRob24gZW52aXJvbm1lbnQgd2l0aCB0aGUgZGF0YSBhbmFseXNpcyBhbmQgdmlzdWFsaXphdGlvbiBsaWJyYXJpZXMgeW91J3ZlIGltcG9ydGVkLiBMZXQgbWUgZmlyc3QgZXhwbG9yZSB0aGUgY29kZWJhc2UgdG8gdW5kZXJzdGFuZCB0aGUgcHJvamVjdCBzdHJ1Y3R1cmUgYW5kIGNvbnRleHQuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMzczZDAyY2QtOTAxOC00Y2E4LWI3OWUtOTkwMDMyYTkxYzNlIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxU3FMMzhpcmg3R1V2N3o2VG9IdDhGcCIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiRmluZCBhbnkgZXhpc3RpbmcgUHl0aG9uIHNjcmlwdHMgb3IgSnVweXRlciBub3RlYm9va3MgZm9yIGRhdGEgYW5hbHlzaXMgb3IgdmlzdWFsaXphdGlvbi4gTG9vayBmb3IgZmlsZXMgd2l0aCAucHkgb3IgLmlweW5iIGV4dGVuc2lvbnMgdGhhdCBtaWdodCBiZSB1c2luZyBwYW5kYXMsIG51bXB5LCBwbG90bHksIG9yIG90aGVyIGRhdGEgYW5hbHlzaXMgbGlicmFyaWVzLlwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0IG1lIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgZXhpc3RpbmcgZGF0YSBhbmFseXNpcyBzY3JpcHRzIG9yIG5vdGVib29rcyBpbiB0aGUgcHJvamVjdDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2dvb2dsZV9hbmFseXRpY3NfZGF0YS5jc3ZcbmRhdGUsc291cmNlLG1lZGl1bSxjaGFubmVsX2dyb3VwaW5nLGRldmljZV9jYXRlZ29yeSxsYW5kaW5nX3BhZ2Usc2Vzc2lvbnMsbmV3X3VzZXJzLGJvdW5jZV9yYXRlLHBhZ2VzX3Blcl9zZXNzaW9uLGF2Z19zZXNzaW9uX2R1cmF0aW9uLHRyYW5zYWN0aW9ucyxyZXZlbnVlLGNvbnZlcnNpb25fcmF0ZVxuMjAyNC0wMS0wMSxnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywzNDUsMTg3LDAuMzIsMy41LDI0NSwxMiw4NDAuMDAsMC4wMzQ4XG4yMDI0LTAxLTAxLGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTg3LDk4LDAuMjgsNC4yLDMxMiw4LDU2MC4wMCwwLjA0MjhcbjIwMjQtMDEtMDEsZmFjZWJvb2sscmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDE1Niw4NywwLjM1LDIuOCwxOTgsNSwzNTAuMDAsMC4wMzIxXG4yMDI0LTAxLTAxLGluc3RhZ3JhbSxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTIzLDc2LDAuMzgsMi41LDE3NiwzLDIxMC4wMCwwLjAyNDRcbjIwMjQtMDEtMDEsZGlyZWN0LG5vbmUsRGlyZWN0LGRlc2t0b3AsLywyMzQsMTEyLDAuMjUsNS42LDQyMywxNSwxMDUwLjAwLDAuMDY0MVxuMjAyNC0wMS0wMSxnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywyNjcsMTQzLDAuMzQsMy4yLDIzMiw5LDYzMC4wMCwwLjAzMzdcbjIwMjQtMDEtMDEsZ29vZ2xlLGNwYyxQYWlkIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywxMzIsNzYsMC4zMCwzLjgsMjg3LDUsMzUwLjAwLDAuMDM3OVxuMjAyNC0wMS0wMSxmYWNlYm9vayxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsOTgsNTQsMC4zNywyLjYsMTg3LDIsMTQwLjAwLDAuMDIwNFxuMjAyNC0wMS0wMixnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywzNzgsMjAxLDAuMzAsMy43LDI1NiwxNSwxMDUwLjAwLDAuMDM5N1xuMjAyNC0wMS0wMixnb29nbGUsY3BjLFBhaWQgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDIwMSwxMTIsMC4yNiw0LjUsMzI0LDEwLDcwMC4wMCwwLjA0OThcbjIwMjQtMDEtMDIsZmFjZWJvb2sscmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDE3Niw5OCwwLjMzLDMuMCwyMTAsNyw0OTAuMDAsMC4wMzk4XG4yMDI0LTAxLTAyLGluc3RhZ3JhbSxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTQ1LDg3LDAuMzYsMi43LDE4OSw1LDM1MC4wMCwwLjAzNDVcbjIwMjQtMDEtMDIsZGlyZWN0LG5vbmUsRGlyZWN0LGRlc2t0b3AsLywyNTYsMTMyLDAuMjMsNS44LDQ0NSwxOCwxMjYwLjAwLDAuMDcwM1xuMjAyNC0wMS0wMixnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywyODksMTU2LDAuMzIsMy40LDI0NSwxMSw3NzAuMDAsMC4wMzgxXG4yMDI0LTAxLTAyLGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsMTU2LDg5LDAuMjgsNC4wLDI5OCw3LDQ5MC4wMCwwLjA0NDlcbjIwMjQtMDEtMDIsZmFjZWJvb2sscmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLDExMiw2NywwLjM1LDIuOCwxOTgsNCwyODAuMDAsMC4wMzU3XG4yMDI0LTAxLTAzLGdvb2dsZSxvcmdhbmljLE9yZ2FuaWMgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDQxMiwyMjMsMC4yOCwzLjksMjY3LDE4LDEyNjAuMDAsMC4wNDM3XG4yMDI0LTAxLTAzLGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMjIzLDEzMiwwLjI0LDQuNywzMzYsMTMsOTEwLjAwLDAuMDU4M1xuLi4uXG4yMDI0LTAxLTA1LGRpcmVjdCxub25lLERpcmVjdCxkZXNrdG9wLC8sMzIzLDE5OCwwLjE3LDYuNCw1MTIsMjksMjAzMC4wMCwwLjA4OThcbjIwMjQtMDEtMDUsZ29vZ2xlLG9yZ2FuaWMsT3JnYW5pYyBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsMzU2LDE4OSwwLjI2LDQuMCwyNzgsMjAsMTQwMC4wMCwwLjA1NjJcbjIwMjQtMDEtMDUsZ29vZ2xlLGNwYyxQYWlkIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywyMjMsMTMyLDAuMjIsNC42LDMzMiwxNCw5ODAuMDAsMC4wNjI4XG4yMDI0LTAxLTA1LGZhY2Vib29rLHJlZmVycmFsLFNvY2lhbCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywxNzYsMTAxLDAuMjksMy40LDIzMiwxMCw3MDAuMDAsMC4wNTY4XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2N1c3RvbWVyX2RhdGEuY3N2XG5jdXN0b21lcl9pZCxmaXJzdF9uYW1lLGxhc3RfbmFtZSxlbWFpbCxnZW5kZXIsYWdlLGNpdHksc3RhdGUsc2lnbnVwX2RhdGUsY3VzdG9tZXJfc2VnbWVudCx0b3RhbF9vcmRlcnMsdG90YWxfc3BlbmQsYXZnX29yZGVyX3ZhbHVlLGxhc3RfcHVyY2hhc2VfZGF0ZSxkYXlzX3NpbmNlX2xhc3RfcHVyY2hhc2UsZmF2b3JpdGVfY2F0ZWdvcnksZmF2b3JpdGVfcHJvZHVjdCxlbWFpbF9zdWJzY3JpYmVyLG1vYmlsZV9hcHBfdXNlcixsb3lhbHR5X3RpZXJcbjEwMDEsSm9obixTbWl0aCxqb2huLnNtaXRoQGVtYWlsLmNvbSxNLDM0LE5ldyBZb3JrLE5ZLDIwMjMtMDEtMTUsSGlnaCBWYWx1ZSwxMiwxMjUwLjQ1LDEwNC4yMCwyMDI0LTAxLTAyLDUsTWVuJ3MgU2hpcnRzLFN1bW1lciBMaW5lbiBTaGlydCxUUlVFLFRSVUUsR29sZFxuMTAwMixFbWlseSxKb2huc29uLGVtaWx5LmpAZW1haWwuY29tLEYsMjksTG9zIEFuZ2VsZXMsQ0EsMjAyMy0wMi0wMyxSZWd1bGFyLDgsNjQ1Ljc1LDgwLjcyLDIwMjQtMDEtMDMsNCxXb21lbidzIERyZXNzZXMsRmxvcmFsIFN1bW1lciBEcmVzcyxUUlVFLFRSVUUsU2lsdmVyXG4xMDAzLE1pY2hhZWwsV2lsbGlhbXMsbS53aWxsaWFtc0BlbWFpbC5jb20sTSw0MixDaGljYWdvLElMLDIwMjMtMDEtMjIsSGlnaCBWYWx1ZSwxNSwxODc2LjMwLDEyNS4wOSwyMDI0LTAxLTAxLDYsTWVuJ3MgT3V0ZXJ3ZWFyLFdpbnRlciBDb2F0IENsYXNzaWMsVFJVRSxGQUxTRSxHb2xkXG4xMDA0LEplc3NpY2EsQnJvd24samVzcy5icm93bkBlbWFpbC5jb20sRiwzMSxIb3VzdG9uLFRYLDIwMjMtMDMtMTEsUmVndWxhciw2LDQ4Ny4yMCw4MS4yMCwyMDI0LTAxLTA0LDMsV29tZW4ncyBBY2Nlc3NvcmllcyxTcHJpbmcgU2NhcmYgU2V0LEZBTFNFLFRSVUUsQnJvbnplXG4xMDA1LERhdmlkLEpvbmVzLGRhdmlkLmpAZW1haWwuY29tLE0sMjcsUGhpbGFkZWxwaGlhLFBBLDIwMjMtMDItMTgsQXQgUmlzaywzLDIxMC40NSw3MC4xNSwyMDIzLTExLTE1LDUzLE1lbidzIFNoaXJ0cyxCYXNpYyBUZWUgMy1QYWNrLFRSVUUsRkFMU0UsQnJvbnplXG4xMDA2LFNhcmFoLEdhcmNpYSxzLmdhcmNpYUBlbWFpbC5jb20sRiwzOCxQaG9lbml4LEFaLDIwMjMtMDEtMDUsSGlnaCBWYWx1ZSwxOCwyMTQ1LjYwLDExOS4yMCwyMDI0LTAxLTAyLDUsV29tZW4ncyBEcmVzc2VzLFN1bW1lciBNYXhpIERyZXNzLFRSVUUsVFJVRSxQbGF0aW51bVxuMTAwNyxSb2JlcnQsTWlsbGVyLHJvYi5taWxsZXJAZW1haWwuY29tLE0sNDUsU2FuIEFudG9uaW8sVFgsMjAyMy0wNC0wMixSZWd1bGFyLDcsNTk4LjQwLDg1LjQ5LDIwMjMtMTItMTIsMjYsTWVuJ3MgQWNjZXNzb3JpZXMsTGVhdGhlciBCZWx0LEZBTFNFLEZBTFNFLFNpbHZlclxuMTAwOCxKZW5uaWZlcixEYXZpcyxqZW4uZGF2aXNAZW1haWwuY29tLEYsMzMsU2FuIERpZWdvLENBLDIwMjMtMDItMjcsUmVndWxhciw5LDcyMy4xNSw4MC4zNSwyMDI0LTAxLTA1LDIsV29tZW4ncyBPdXRlcndlYXIsU3ByaW5nIEphY2tldCxUUlVFLFRSVUUsU2lsdmVyXG4xMDA5LEphbWVzLFJvZHJpZ3VleixqLnJvZHJpZ3VlekBlbWFpbC5jb20sTSwyOSxEYWxsYXMsVFgsMjAyMy0wMy0xNSxBdCBSaXNrLDQsMjY3LjgwLDY2Ljk1LDIwMjMtMTEtMDIsNjYsTWVuJ3MgU2hpcnRzLEdyYXBoaWMgVGVlIENvbGxlY3Rpb24sRkFMU0UsVFJVRSxCcm9uemVcbjEwMTAsTGlzYSxNYXJ0aW5leixsaXNhLm1AZW1haWwuY29tLEYsMzYsU2FuIEpvc2UsQ0EsMjAyMy0wMS0xOCxIaWdoIFZhbHVlLDE0LDE2NTQuMjUsMTE4LjE2LDIwMjQtMDEtMDMsNCxXb21lbidzIERyZXNzZXMsRXZlbmluZyBDb2NrdGFpbCBEcmVzcyxUUlVFLFRSVUUsR29sZFxuMTAxMSxUaG9tYXMsSGVybmFuZGV6LHQuaGVybmFuZGV6QGVtYWlsLmNvbSxNLDQxLEF1c3RpbixUWCwyMDIzLTAyLTA5LFJlZ3VsYXIsOCw2ODcuMzUsODUuOTIsMjAyMy0xMi0yOCwxMCxNZW4ncyBPdXRlcndlYXIsTGlnaHR3ZWlnaHQgSmFja2V0LFRSVUUsRkFMU0UsU2lsdmVyXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2luc3RhZ3JhbV9hZHNfZGF0YS5jc3ZcbmRhdGUsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxhZF9zZXRfaWQsYWRfc2V0X25hbWUsYWRfaWQsYWRfbmFtZSxvYmplY3RpdmUsaW1wcmVzc2lvbnMscmVhY2gsY2xpY2tzLGN0cixjcGMsc3BlbmQsY29udmVyc2lvbnMsY29udmVyc2lvbl92YWx1ZSxjb3N0X3Blcl9jb252ZXJzaW9uLHJvYXNcbjIwMjQtMDEtMDEsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywyODc2LDE5ODcsMTIzLDAuMDQyOCwwLjkwLDExMC43MCw0LDI4MC4wMCwyNy42OCwyLjUzXG4yMDI0LTAxLTAxLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTIsTWVuJ3MgU2hpcnRzLDMwMDEyMSxTdW1tZXIgU2hpcnQgU3RhdGljLENPTlZFUlNJT05TLDIzNDUsMTY1NCw5OCwwLjA0MTgsMC45MCw4OC4yMCwzLDIxMC4wMCwyOS40MCwyLjM4XG4yMDI0LTAxLTAxLDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxODc2LDEzNDUsNzYsMC4wNDA1LDAuOTUsNzIuMjAsMiwxNjAuMDAsMzYuMTAsMi4yMlxuMjAyNC0wMS0wMSwzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxNjU0LDEyMzQsNjUsMC4wMzkzLDAuODUsNTUuMjUsMSw1MC4wMCw1NS4yNSwwLjkxXG4yMDI0LTAxLTAyLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTEsV29tZW4ncyBEcmVzc2VzLDMwMDExMSxTdW1tZXIgRHJlc3MgQ2Fyb3VzZWwsQ09OVkVSU0lPTlMsMzAxMiwyMTM0LDE0NSwwLjA0ODEsMC45MCwxMzAuNTAsNiw0MjAuMDAsMjEuNzUsMy4yMlxuMjAyNC0wMS0wMiwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyNTY3LDE4NzYsMTEyLDAuMDQzNiwwLjkwLDEwMC44MCw0LDI4MC4wMCwyNS4yMCwyLjc4XG4yMDI0LTAxLTAyLDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxOTg3LDE0NTYsODcsMC4wNDM4LDAuOTUsODIuNjUsMywyNDAuMDAsMjcuNTUsMi45MFxuMjAyNC0wMS0wMiwzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxNzY1LDEzNDUsNzgsMC4wNDQyLDAuODUsNjYuMzAsMiwxMDAuMDAsMzMuMTUsMS41MVxuMjAyNC0wMS0wMywzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDExLFdvbWVuJ3MgRHJlc3NlcywzMDAxMTEsU3VtbWVyIERyZXNzIENhcm91c2VsLENPTlZFUlNJT05TLDMyNDUsMjI0NSwxNjcsMC4wNTE1LDAuOTAsMTUwLjMwLDgsNTYwLjAwLDE4Ljc5LDMuNzNcbjIwMjQtMDEtMDMsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMixNZW4ncyBTaGlydHMsMzAwMTIxLFN1bW1lciBTaGlydCBTdGF0aWMsQ09OVkVSU0lPTlMsMjc4OSwxOTg3LDEzMiwwLjA0NzMsMC45MCwxMTguODAsNSwzNTAuMDAsMjMuNzYsMi45NVxuMjAyNC0wMS0wMywzMDAyLFdpbnRlcl9TYWxlX0lHLDMwMDIxLFdpbnRlciBDb2F0cywzMDAyMTEsV2ludGVyIENvYXQgVmlkZW8sQ09OVkVSU0lPTlMsMTg3NiwxNDMyLDc4LDAuMDQxNiwwLjk1LDc0LjEwLDIsMTYwLjAwLDM3LjA1LDIuMTZcbjIwMjQtMDEtMDMsMzAwMyxFdmVyeWRheV9CYXNpY3NfSUcsMzAwMzEsQmFzaWMgVGVlcywzMDAzMTEsQmFzaWMgVGVlIENvbGxlY3Rpb24sQ09OVkVSU0lPTlMsMTk4NywxNTQzLDg5LDAuMDQ0OCwwLjg1LDc1LjY1LDMsMTUwLjAwLDI1LjIyLDEuOThcbjIwMjQtMDEtMDQsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzNDU2LDIzNDUsMTg5LDAuMDU0NywwLjkwLDE3MC4xMCwxMCw3MDAuMDAsMTcuMDEsNC4xMlxuMjAyNC0wMS0wNCwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyOTg3LDIxMzQsMTQzLDAuMDQ3OSwwLjkwLDEyOC43MCw2LDQyMC4wMCwyMS40NSwzLjI2XG4yMDI0LTAxLTA0LDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxNzY1LDEzMjEsNjcsMC4wMzgwLDAuOTUsNjMuNjUsMSw4MC4wMCw2My42NSwxLjI2XG4yMDI0LTAxLTA0LDMwMDMsRXZlcnlkYXlfQmFzaWNzX0lHLDMwMDMxLEJhc2ljIFRlZSBDb2xsZWN0aW9uLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywyMTM0LDE2NTQsMTAxLDAuMDQ3MywwLjg1LDg1Ljg1LDQsMjAwLjAwLDIxLjQ2LDIuMzNcbjIwMjQtMDEtMDUsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzNjc4LDI1NjcsMjEyLDAuMDU3NiwwLjkwLDE5MC44MCwxMiw4NDAuMDAsMTUuOTAsNC40MFxuMjAyNC0wMS0wNSwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywzMjQ1LDIzNDUsMTY3LDAuMDUxNSwwLjkwLDE1MC4zMCw4LDU2MC4wMCwxOC43OSwzLjczXG4yMDI0LTAxLTA1LDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxNjU0LDEyMzQsNTYsMC4wMzM5LDAuOTUsNTMuMjAsMCwwLjAwLDAuMDAsMC4wMFxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9mYWNlYm9va19hZHNfZGF0YS5jc3ZcbmRhdGUsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxhZF9zZXRfaWQsYWRfc2V0X25hbWUsYWRfaWQsYWRfbmFtZSxvYmplY3RpdmUsaW1wcmVzc2lvbnMscmVhY2gsY2xpY2tzLGN0cixjcGMsc3BlbmQsY29udmVyc2lvbnMsY29udmVyc2lvbl92YWx1ZSxjb3N0X3Blcl9jb252ZXJzaW9uLHJvYXNcbjIwMjQtMDEtMDEsMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQiwyMDAxMSxXb21lbidzIERyZXNzZXMsMjAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzNDU2LDIzNDUsMTg3LDAuMDU0MSwwLjg1LDE1OC45NSw3LDQ5MC4wMCwyMi43MSwzLjA4XG4yMDI0LTAxLTAxLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsMjAwMTIsTWVuJ3MgU2hpcnRzLDIwMDEyMSxTdW1tZXIgU2hpcnQgU3RhdGljLENPTlZFUlNJT05TLDI4NzYsMTk4NywxMzIsMC4wNDU5LDAuODUsMTEyLjIwLDQsMjgwLjAwLDI4LjA1LDIuNTBcbjIwMjQtMDEtMDEsMjAwMixXaW50ZXJfU2FsZV9GQiwyMDAyMSxXaW50ZXIgQ29hdHMsMjAwMjExLFdpbnRlciBDb2F0IFZpZGVvLENPTlZFUlNJT05TLDIzNDUsMTY1NCw5OCwwLjA0MTgsMC45MCw4OC4yMCwzLDI0MC4wMCwyOS40MCwyLjcyXG4yMDI0LTAxLTAxLDIwMDMsRXZlcnlkYXlfQmFzaWNzX0ZCLDIwMDMxLEJhc2ljIFRlZXMsMjAwMzExLEJhc2ljIFRlZSBDb2xsZWN0aW9uLENPTlZFUlNJT05TLDE5ODcsMTQzMiw3NiwwLjAzODIsMC44MCw2MC44MCwyLDEwMC4wMCwzMC40MCwxLjY0XG4yMDI0LTAxLTAyLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsMjAwMTEsV29tZW4ncyBEcmVzc2VzLDIwMDExMSxTdW1tZXIgRHJlc3MgQ2Fyb3VzZWwsQ09OVkVSU0lPTlMsMzY1NCwyNDU2LDIwMSwwLjA1NTAsMC44NSwxNzAuODUsOSw2MzAuMDAsMTguOTgsMy42OVxuMjAyNC0wMS0wMiwyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLDIwMDEyLE1lbidzIFNoaXJ0cywyMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywzMDEyLDIxMzQsMTQ1LDAuMDQ4MSwwLjg1LDEyMy4yNSw1LDM1MC4wMCwyNC42NSwyLjg0XG4yMDI0LTAxLTAyLDIwMDIsV2ludGVyX1NhbGVfRkIsMjAwMjEsV2ludGVyIENvYXRzLDIwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywyNDU2LDE3NjUsMTEyLDAuMDQ1NiwwLjkwLDEwMC44MCw0LDMyMC4wMCwyNS4yMCwzLjE3XG4yMDI0LTAxLTAyLDIwMDMsRXZlcnlkYXlfQmFzaWNzX0ZCLDIwMDMxLEJhc2ljIFRlZXMsMjAwMzExLEJhc2ljIFRlZSBDb2xsZWN0aW9uLENPTlZFUlNJT05TLDIxMzQsMTU2Nyw4OSwwLjA0MTcsMC44MCw3MS4yMCwzLDE1MC4wMCwyMy43MywyLjExXG4yMDI0LTAxLTAzLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsMjAwMTEsV29tZW4ncyBEcmVzc2VzLDIwMDExMSxTdW1tZXIgRHJlc3MgQ2Fyb3VzZWwsQ09OVkVSU0lPTlMsMzg3NiwyNTY3LDIyMywwLjA1NzUsMC44NSwxODkuNTUsMTEsNzcwLjAwLDE3LjIzLDQuMDZcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2XG50b3VjaHBvaW50X2lkLGN1c3RvbWVyX2lkLGRhdGUsY2hhbm5lbCxzb3VyY2UsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxpbnRlcmFjdGlvbl90eXBlLGNvbnZlcnNpb24sY29udmVyc2lvbl92YWx1ZSxwcm9kdWN0X2NhdGVnb3J5LHByb2R1Y3RfaWQscHJvZHVjdF9uYW1lXG4xMDAwMSwxMDAxLDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsYWRfY2xpY2ssRkFMU0UsMC4wMCxNZW4ncyBTaGlydHMsTlVMTCxOVUxMXG4xMDAwMiwxMDAxLDIwMjQtMDEtMDEsT3JnYW5pYyBTZWFyY2gsR29vZ2xlLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwMDMsMTAwMSwyMDI0LTAxLTAyLEVtYWlsLE5ld3NsZXR0ZXIsTlVMTCxXZWVrbHlfRGVhbHMsZW1haWxfb3BlbixGQUxTRSwwLjAwLE5VTEwsTlVMTCxOVUxMXG4xMDAwNCwxMDAxLDIwMjQtMDEtMDIsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQixhZF9jbGljayxUUlVFLDgwLjAwLE1lbidzIFNoaXJ0cywyMDAxLFN1bW1lciBMaW5lbiBTaGlydFxuMTAwMDUsMTAwMiwyMDI0LTAxLTAxLFBhaWQgU29jaWFsLEluc3RhZ3JhbSwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAwNiwxMDAyLDIwMjQtMDEtMDEsUGFpZCBTb2NpYWwsSW5zdGFncmFtLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsYWRfY2xpY2ssRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAwNywxMDAyLDIwMjQtMDEtMDIsT3JnYW5pYyBTZWFyY2gsR29vZ2xlLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsV29tZW4ncyBEcmVzc2VzLE5VTEwsTlVMTFxuMTAwMDgsMTAwMiwyMDI0LTAxLTAzLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LGFkX2NsaWNrLFRSVUUsNzAuMDAsV29tZW4ncyBEcmVzc2VzLDEwMDEsRmxvcmFsIFN1bW1lciBEcmVzc1xuMTAwMDksMTAwMywyMDI0LTAxLTAxLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMixXaW50ZXJfU2FsZV8yMDI0LGFkX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgT3V0ZXJ3ZWFyLE5VTEwsTlVMTFxuMTAwMTAsMTAwMywyMDI0LTAxLTAxLE9yZ2FuaWMgU29jaWFsLEZhY2Vib29rLE5VTEwsTlVMTCxwYWdlX3Zpc2l0LEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDExLDEwMDMsMjAyNC0wMS0wMSxQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAyLFdpbnRlcl9TYWxlX0ZCLGFkX2NsaWNrLFRSVUUsODAuMDAsTWVuJ3MgT3V0ZXJ3ZWFyLDMwMDEsV2ludGVyIENvYXQgQ2xhc3NpY1xuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9nb29nbGVfYWRzX2RhdGEuY3N2XG5kYXRlLGNhbXBhaWduX2lkLGNhbXBhaWduX25hbWUsYWRfZ3JvdXBfaWQsYWRfZ3JvdXBfbmFtZSxrZXl3b3JkLG1hdGNoX3R5cGUsZGV2aWNlLGltcHJlc3Npb25zLGNsaWNrcyxjb3N0LGNvbnZlcnNpb25zLGNvbnZlcnNpb25fdmFsdWUsY3RyLGNwYyxyb2FzXG4yMDI0LTAxLTAxLDEwMDEsU3VtbWVyX0NvbGxlY3Rpb25fMjAyNCwxMDAxMSxXb21lbidzIERyZXNzZXMsc3VtbWVyIGRyZXNzLGJyb2FkLG1vYmlsZSwxMjQ1LDc4LDE1Ni4wMCwzLDIxMC4wMCwwLjA2MjYsMi4wMCwxLjM1XG4yMDI0LTAxLTAxLDEwMDEsU3VtbWVyX0NvbGxlY3Rpb25fMjAyNCwxMDAxMixNZW4ncyBTaGlydHMsc3VtbWVyIHNoaXJ0LGJyb2FkLG1vYmlsZSw5ODcsNDUsOTAuMDAsMSw4MC4wMCwwLjA0NTYsMi4wMCwwLjg5XG4yMDI0LTAxLTAxLDEwMDIsV2ludGVyX1NhbGVfMjAyNCwxMDAyMSxXaW50ZXIgQ29hdHMsd2ludGVyIGNvYXQgc2FsZSxleGFjdCxkZXNrdG9wLDg3Niw2NSwxNjIuNTAsNCwzMjAuMDAsMC4wNzQyLDIuNTAsMS45N1xuMjAyNC0wMS0wMSwxMDAzLEV2ZXJ5ZGF5X0Vzc2VudGlhbHMsMTAwMzEsQmFzaWMgVGVlcyxiYXNpYyB0LXNoaXJ0LHBocmFzZSx0YWJsZXQsNjU0LDMyLDQ4LjAwLDIsMTAwLjAwLDAuMDQ4OSwxLjUwLDIuMDhcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvZ29vZ2xlX3NlYXJjaF9jb25zb2xlX2RhdGEuY3N2XG5kYXRlLHF1ZXJ5LHBhZ2UsZGV2aWNlLGNvdW50cnksaW1wcmVzc2lvbnMsY2xpY2tzLGN0cixwb3NpdGlvblxuMjAyNC0wMS0wMSxzdW1tZXIgZHJlc3NlcywvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLG1vYmlsZSxVUywyMzQ1LDE4NywwLjA3OTcsMy4yXG4yMDI0LTAxLTAxLHN1bW1lciBzaGlydHMgbWVuLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsbW9iaWxlLFVTLDE4NzYsMTMyLDAuMDcwNCw0LjFcbjIwMjQtMDEtMDEsd2ludGVyIGNvYXRzIHNhbGUsL2NvbGxlY3Rpb25zL3dpbnRlci1zYWxlL2NvYXRzLGRlc2t0b3AsVVMsMTU0Myw5OCwwLjA2MzUsMi44XG4yMDI0LTAxLTAxLGJhc2ljIHQtc2hpcnRzLC9jb2xsZWN0aW9ucy9iYXNpY3MvdGVlcyx0YWJsZXQsVVMsMTIzNCw3NiwwLjA2MTYsNS4yXG4yMDI0LTAxLTAyLHN1bW1lciBkcmVzc2VzLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsbW9iaWxlLFVTLDI0NTYsMjAxLDAuMDgxOCwzLjFcbjIwMjQtMDEtMDIsc3VtbWVyIHNoaXJ0cyBtZW4sL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cyxtb2JpbGUsVVMsMTkyMywxNDUsMC4wNzU0LDMuOVxuMjAyNC0wMS0wMix3aW50ZXIgY29hdHMgc2FsZSwvY29sbGVjdGlvbnMvd2ludGVyLXNhbGUvY29hdHMsZGVza3RvcCxVUywxNjIxLDExMiwwLjA2OTEsMi43XG4yMDI0LTAxLTAyLGJhc2ljIHQtc2hpcnRzLC9jb2xsZWN0aW9ucy9iYXNpY3MvdGVlcyx0YWJsZXQsVVMsMTM0NSw4OSwwLjA2NjIsNC44XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL192ZW5kb3IvcGVwNTE3L2VudmJ1aWxkLnB5XG5cIlwiXCJCdWlsZCB3aGVlbHMvc2Rpc3RzIGJ5IGluc3RhbGxpbmcgYnVpbGQgZGVwcyB0byBhIHRlbXBvcmFyeSBlbnZpcm9ubWVudC5cblwiXCJcIlxuXG5pbXBvcnQgaW9cbmltcG9ydCBvc1xuaW1wb3J0IGxvZ2dpbmdcbmltcG9ydCBzaHV0aWxcbmZyb20gc3VicHJvY2VzcyBpbXBvcnQgY2hlY2tfY2FsbFxuaW1wb3J0IHN5c1xuZnJvbSBzeXNjb25maWcgaW1wb3J0IGdldF9wYXRoc1xuZnJvbSB0ZW1wZmlsZSBpbXBvcnQgbWtkdGVtcFxuXG5mcm9tIC5jb21wYXQgaW1wb3J0IHRvbWxfbG9hZFxuZnJvbSAud3JhcHBlcnMgaW1wb3J0IFBlcDUxN0hvb2tDYWxsZXIsIExvZ2dlcldyYXBwZXJcblxubG9nID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pXG5cblxuZGVmIF9sb2FkX3B5cHJvamVjdChzb3VyY2VfZGlyKTpcbiAgICB3aXRoIGlvLm9wZW4oXG4gICAgICAgICAgICBvcy5wYXRoLmpvaW4oc291cmNlX2RpciwgJ3B5cHJvamVjdC50b21sJyksXG4gICAgICAgICAgICAncmInLFxuICAgICAgICAgICAgKSBhcyBmOlxuICAgICAgICBweXByb2plY3RfZGF0YSA9IHRvbWxfbG9hZChmKVxuICAgIGJ1aWxkc3lzID0gcHlwcm9qZWN0X2RhdGFbJ2J1aWxkLXN5c3RlbSddXG4gICAgcmV0dXJuIChcbiAgICAgICAgYnVpbGRzeXNbJ3JlcXVpcmVzJ10sXG4gICAgICAgIGJ1aWxkc3lzWydidWlsZC1iYWNrZW5kJ10sXG4gICAgICAgIGJ1aWxkc3lzLmdldCgnYmFja2VuZC1wYXRoJyksXG4gICAgKVxuXG5cbmNsYXNzIEJ1aWxkRW52aXJvbm1lbnQob2JqZWN0KTpcbiAgICBcIlwiXCJDb250ZXh0IG1hbmFnZXIgdG8gaW5zdGFsbCBidWlsZCBkZXBzIGluIGEgc2ltcGxlIHRlbXBvcmFyeSBlbnZpcm9ubWVudFxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL3BlcDUxNy9jaGVjay5weVxuXCJcIlwiQ2hlY2sgYSBwcm9qZWN0IGFuZCBiYWNrZW5kIGJ5IGF0dGVtcHRpbmcgdG8gYnVpbGQgdXNpbmcgUEVQIDUxNyBob29rcy5cblwiXCJcIlxuaW1wb3J0IGFyZ3BhcnNlXG5pbXBvcnQgaW9cbmltcG9ydCBsb2dnaW5nXG5pbXBvcnQgb3NcbmZyb20gb3MucGF0aCBpbXBvcnQgaXNmaWxlLCBqb2luIGFzIHBqb2luXG5pbXBvcnQgc2h1dGlsXG5mcm9tIHN1YnByb2Nlc3MgaW1wb3J0IENhbGxlZFByb2Nlc3NFcnJvclxuaW1wb3J0IHN5c1xuaW1wb3J0IHRhcmZpbGVcbmZyb20gdGVtcGZpbGUgaW1wb3J0IG1rZHRlbXBcbmltcG9ydCB6aXBmaWxlXG5cbmZyb20gLmNvbG9ybG9nIGltcG9ydCBlbmFibGVfY29sb3VyZnVsX291dHB1dFxuZnJvbSAuY29tcGF0IGltcG9ydCBUT01MRGVjb2RlRXJyb3IsIHRvbWxfbG9hZFxuZnJvbSAuZW52YnVpbGQgaW1wb3J0IEJ1aWxkRW52aXJvbm1lbnRcbmZyb20gLndyYXBwZXJzIGltcG9ydCBQZXA1MTdIb29rQ2FsbGVyXG5cbmxvZyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKVxuLi4uXG5cblxuZGVmIGNoZWNrKHNvdXJjZV9kaXIpOlxuICAgIHB5cHJvamVjdCA9IHBqb2luKHNvdXJjZV9kaXIsICdweXByb2plY3QudG9tbCcpXG4gICAgaWYgaXNmaWxlKHB5cHJvamVjdCk6XG4gICAgICAgIGxvZy5pbmZvKCdGb3VuZCBweXByb2plY3QudG9tbCcpXG4gICAgZWxzZTpcbiAgICAgICAgbG9nLmVycm9yKCdNaXNzaW5nIHB5cHJvamVjdC50b21sJylcbiAgICAgICAgcmV0dXJuIEZhbHNlXG5cbiAgICB0cnk6XG4gICAgICAgIHdpdGggaW8ub3BlbihweXByb2plY3QsICdyYicpIGFzIGY6XG4gICAgICAgICAgICBweXByb2plY3RfZGF0YSA9IHRvbWxfbG9hZChmKVxuICAgICAgICAjIEVuc3VyZSB0aGUgbWFuZGF0b3J5IGRhdGEgY2FuIGJlIGxvYWRlZFxuICAgICAgICBidWlsZHN5cyA9IHB5cHJvamVjdF9kYXRhWydidWlsZC1zeXN0ZW0nXVxuICAgICAgICByZXF1aXJlcyA9IGJ1aWxkc3lzWydyZXF1aXJlcyddXG4gICAgICAgIGJhY2tlbmQgPSBidWlsZHN5c1snYnVpbGQtYmFja2VuZCddXG4gICAgICAgIGJhY2tlbmRfcGF0aCA9IGJ1aWxkc3lzLmdldCgnYmFja2VuZC1wYXRoJylcbiAgICAgICAgbG9nLmluZm8oJ0xvYWRlZCBweXByb2plY3QudG9tbCcpXG4gICAgZXhjZXB0IChUT01MRGVjb2RlRXJyb3IsIEtleUVycm9yKTpcbiAgICAgICAgbG9nLmVycm9yKFwiSW52YWxpZCBweXByb2plY3QudG9tbFwiLCBleGNfaW5mbz1UcnVlKVxuICAgICAgICByZXR1cm4gRmFsc2VcblxuICAgIGhvb2tzID0gUGVwNTE3SG9va0NhbGxlcihzb3VyY2VfZGlyLCBiYWNrZW5kLCBiYWNrZW5kX3BhdGgpXG5cbiAgICBzZGlzdF9vayA9IGNoZWNrX2J1aWxkX3NkaXN0KGhvb2tzLCByZXF1aXJlcylcbiAgICB3aGVlbF9vayA9IGNoZWNrX2J1aWxkX3doZWVsKGhvb2tzLCByZXF1aXJlcylcblxuICAgIGlmIG5vdCBzZGlzdF9vazpcbiAgICAgICAgbG9nLndhcm5pbmcoJ1NkaXN0IGNoZWNrcyBmYWlsZWQ7IHNjcm9sbCB1cCB0byBzZWUnKVxuICAgIGlmIG5vdCB3aGVlbF9vazpcbiAgICAgICAgbG9nLndhcm5pbmcoJ1doZWVsIGNoZWNrcyBmYWlsZWQnKVxuXG4gICAgcmV0dXJuIHNkaXN0X29rXG5cblxuZGVmIG1haW4oYXJndj1Ob25lKTpcbiAgICBsb2cud2FybmluZygncGVwNTE3LmNoZWNrIGlzIGRlcHJlY2F0ZWQuICdcbiAgICAgICAgICAgICAgICAnQ29uc2lkZXIgc3dpdGNoaW5nIHRvIGh0dHBzOi8vcHlwaS5vcmcvcHJvamVjdC9idWlsZC8nKVxuXG4gICAgYXAgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigpXG4gICAgYXAuYWRkX2FyZ3VtZW50KFxuICAgICAgICAnc291cmNlX2RpcicsXG4gICAgICAgIGhlbHA9XCJBIGRpcmVjdG9yeSBjb250YWluaW5nIHB5cHJvamVjdC50b21sXCIpXG4gICAgYXJncyA9IGFwLnBhcnNlX2FyZ3MoYXJndilcblxuICAgIGVuYWJsZV9jb2xvdXJmdWxfb3V0cHV0KClcblxuICAgIG9rID0gY2hlY2soYXJncy5zb3VyY2VfZGlyKVxuXG4gICAgaWYgb2s6XG4gICAgICAgIHByaW50KGFuc2koJ0NoZWNrcyBwYXNzZWQnLCAnZ3JlZW4nKSlcbiAgICBlbHNlOlxuICAgICAgICBwcmludChhbnNpKCdDaGVja3MgZmFpbGVkJywgJ3JlZCcpKVxuICAgICAgICBzeXMuZXhpdCgxKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BrZ19yZXNvdXJjZXMvdGVzdHMvZGF0YS9teS10ZXN0LXBhY2thZ2Utc291cmNlL3NldHVwLnB5XG5pbXBvcnQgc2V0dXB0b29sc1xuc2V0dXB0b29scy5zZXR1cChcbiAgICBuYW1lPVwibXktdGVzdC1wYWNrYWdlXCIsXG4gICAgdmVyc2lvbj1cIjEuMFwiLFxuICAgIHppcF9zYWZlPVRydWUsXG4pXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL192ZW5kb3IvZGlzdGxpYi91dGlsLnB5XG4uLi5cblxuIyBkZWYgX2dldF9weXBpcmNfY29tbWFuZCgpOlxuICAgICMgXCJcIlwiXG4gICAgIyBHZXQgdGhlIGRpc3R1dGlscyBjb21tYW5kIGZvciBpbnRlcmFjdGluZyB3aXRoIFB5UEkgY29uZmlndXJhdGlvbnMuXG4gICAgIyA6cmV0dXJuOiB0aGUgY29tbWFuZC5cbiAgICAjIFwiXCJcIlxuICAgICMgZnJvbSBkaXN0dXRpbHMuY29yZSBpbXBvcnQgRGlzdHJpYnV0aW9uXG4gICAgIyBmcm9tIGRpc3R1dGlscy5jb25maWcgaW1wb3J0IFB5UElSQ0NvbW1hbmRcbiAgICAjIGQgPSBEaXN0cmlidXRpb24oKVxuICAgICMgcmV0dXJuIFB5UElSQ0NvbW1hbmQoZClcblxuY2xhc3MgUHlQSVJDRmlsZShvYmplY3QpOlxuXG4gICAgREVGQVVMVF9SRVBPU0lUT1JZID0gJ2h0dHBzOi8vdXBsb2FkLnB5cGkub3JnL2xlZ2FjeS8nXG4gICAgREVGQVVMVF9SRUFMTSA9ICdweXBpJ1xuXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGZuPU5vbmUsIHVybD1Ob25lKTpcbiAgICAgICAgaWYgZm4gaXMgTm9uZTpcbiAgICAgICAgICAgIGZuID0gb3MucGF0aC5qb2luKG9zLnBhdGguZXhwYW5kdXNlcignficpLCAnLnB5cGlyYycpXG4gICAgICAgIHNlbGYuZmlsZW5hbWUgPSBmblxuICAgICAgICBzZWxmLnVybCA9IHVybFxuXG4gICAgZGVmIHJlYWQoc2VsZik6XG4gICAgICAgIHJlc3VsdCA9IHt9XG5cbiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoc2VsZi5maWxlbmFtZSk6XG4gICAgICAgICAgICByZXBvc2l0b3J5ID0gc2VsZi51cmwgb3Igc2VsZi5ERUZBVUxUX1JFUE9TSVRPUllcblxuICAgICAgICAgICAgY29uZmlnID0gY29uZmlncGFyc2VyLlJhd0NvbmZpZ1BhcnNlcigpXG4gICAgICAgICAgICBjb25maWcucmVhZChzZWxmLmZpbGVuYW1lKVxuICAgICAgICAgICAgc2VjdGlvbnMgPSBjb25maWcuc2VjdGlvbnMoKVxuICAgICAgICAgICAgaWYgJ2Rpc3R1dGlscycgaW4gc2VjdGlvbnM6XG4gICAgICAgICAgICAgICAgIyBsZXQncyBnZXQgdGhlIGxpc3Qgb2Ygc2VydmVyc1xuICAgICAgICAgICAgICAgIGluZGV4X3NlcnZlcnMgPSBjb25maWcuZ2V0KCdkaXN0dXRpbHMnLCAnaW5kZXgtc2VydmVycycpXG4gICAgICAgICAgICAgICAgX3NlcnZlcnMgPSBbc2VydmVyLnN0cmlwKCkgZm9yIHNlcnZlciBpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4X3NlcnZlcnMuc3BsaXQoJ1xcbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgc2VydmVyLnN0cmlwKCkgIT0gJyddXG4gICAgICAgICAgICAgICAgaWYgX3NlcnZlcnMgPT0gW106XG4gICAgICAgICAgICAgICAgICAgICMgbm90aGluZyBzZXQsIGxldCdzIHRyeSB0byBnZXQgdGhlIGRlZmF1bHQgcHlwaVxuICAgICAgICAgICAgICAgICAgICBpZiAncHlwaScgaW4gc2VjdGlvbnM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfc2VydmVycyA9IFsncHlwaSddXG4gICAgICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICAgICAgZm9yIHNlcnZlciBpbiBfc2VydmVyczpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHsnc2VydmVyJzogc2VydmVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Wyd1c2VybmFtZSddID0gY29uZmlnLmdldChzZXJ2ZXIsICd1c2VybmFtZScpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICMgb3B0aW9uYWwgcGFyYW1zXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3Iga2V5LCBkZWZhdWx0IGluICgoJ3JlcG9zaXRvcnknLCBzZWxmLkRFRkFVTFRfUkVQT1NJVE9SWSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJ3JlYWxtJywgc2VsZi5ERUZBVUxUX1JFQUxNKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgncGFzc3dvcmQnLCBOb25lKSk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY29uZmlnLmhhc19vcHRpb24oc2VydmVyLCBrZXkpOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IGNvbmZpZy5nZXQoc2VydmVyLCBrZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBkZWZhdWx0XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL192ZW5kb3IvcGVwNTE3L2J1aWxkLnB5XG4uLi5cblxuXG5kZWYgbG9hZF9zeXN0ZW0oc291cmNlX2Rpcik6XG4gICAgXCJcIlwiXG4gICAgTG9hZCB0aGUgYnVpbGQgc3lzdGVtIGZyb20gYSBzb3VyY2UgZGlyIChweXByb2plY3QudG9tbCkuXG4gICAgXCJcIlwiXG4gICAgcHlwcm9qZWN0ID0gb3MucGF0aC5qb2luKHNvdXJjZV9kaXIsICdweXByb2plY3QudG9tbCcpXG4gICAgd2l0aCBpby5vcGVuKHB5cHJvamVjdCwgJ3JiJykgYXMgZjpcbiAgICAgICAgcHlwcm9qZWN0X2RhdGEgPSB0b21sX2xvYWQoZilcbiAgICByZXR1cm4gcHlwcm9qZWN0X2RhdGFbJ2J1aWxkLXN5c3RlbSddXG5cblxuZGVmIGNvbXBhdF9zeXN0ZW0oc291cmNlX2Rpcik6XG4gICAgXCJcIlwiXG4gICAgR2l2ZW4gYSBzb3VyY2UgZGlyLCBhdHRlbXB0IHRvIGdldCBhIGJ1aWxkIHN5c3RlbSBiYWNrZW5kXG4gICAgYW5kIHJlcXVpcmVtZW50cyBmcm9tIHB5cHJvamVjdC50b21sLiBGYWxsYmFjayB0b1xuICAgIHNldHVwdG9vbHMgYnV0IG9ubHkgaWYgdGhlIGZpbGUgd2FzIG5vdCBmb3VuZCBvciBhIGJ1aWxkXG4gICAgc3lzdGVtIHdhcyBub3QgaW5kaWNhdGVkLlxuICAgIFwiXCJcIlxuICAgIHRyeTpcbiAgICAgICAgc3lzdGVtID0gbG9hZF9zeXN0ZW0oc291cmNlX2RpcilcbiAgICBleGNlcHQgKEZpbGVOb3RGb3VuZEVycm9yLCBLZXlFcnJvcik6XG4gICAgICAgIHN5c3RlbSA9IHt9XG4gICAgc3lzdGVtLnNldGRlZmF1bHQoXG4gICAgICAgICdidWlsZC1iYWNrZW5kJyxcbiAgICAgICAgJ3NldHVwdG9vbHMuYnVpbGRfbWV0YTpfX2xlZ2FjeV9fJyxcbiAgICApXG4gICAgc3lzdGVtLnNldGRlZmF1bHQoJ3JlcXVpcmVzJywgWydzZXR1cHRvb2xzJywgJ3doZWVsJ10pXG4gICAgcmV0dXJuIHN5c3RlbVxuLi4uXG5cblxuZGVmIGJ1aWxkKHNvdXJjZV9kaXIsIGRpc3QsIGRlc3Q9Tm9uZSwgc3lzdGVtPU5vbmUpOlxuICAgIHN5c3RlbSA9IHN5c3RlbSBvciBsb2FkX3N5c3RlbShzb3VyY2VfZGlyKVxuICAgIGRlc3QgPSBvcy5wYXRoLmpvaW4oc291cmNlX2RpciwgZGVzdCBvciAnZGlzdCcpXG4gICAgbWtkaXJfcChkZXN0KVxuXG4gICAgdmFsaWRhdGVfc3lzdGVtKHN5c3RlbSlcbiAgICBob29rcyA9IFBlcDUxN0hvb2tDYWxsZXIoXG4gICAgICAgIHNvdXJjZV9kaXIsIHN5c3RlbVsnYnVpbGQtYmFja2VuZCddLCBzeXN0ZW0uZ2V0KCdiYWNrZW5kLXBhdGgnKVxuICAgIClcblxuICAgIHdpdGggQnVpbGRFbnZpcm9ubWVudCgpIGFzIGVudjpcbiAgICAgICAgZW52LnBpcF9pbnN0YWxsKHN5c3RlbVsncmVxdWlyZXMnXSlcbiAgICAgICAgX2RvX2J1aWxkKGhvb2tzLCBlbnYsIGRpc3QsIGRlc3QpXG5cblxucGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoKVxucGFyc2VyLmFkZF9hcmd1bWVudChcbiAgICAnc291cmNlX2RpcicsXG4gICAgaGVscD1cIkEgZGlyZWN0b3J5IGNvbnRhaW5pbmcgcHlwcm9qZWN0LnRvbWxcIixcbilcbnBhcnNlci5hZGRfYXJndW1lbnQoXG4gICAgJy0tYmluYXJ5JywgJy1iJyxcbiAgICBhY3Rpb249J3N0b3JlX3RydWUnLFxuICAgIGRlZmF1bHQ9RmFsc2UsXG4pXG5wYXJzZXIuYWRkX2FyZ3VtZW50KFxuICAgICctLXNvdXJjZScsICctcycsXG4gICAgYWN0aW9uPSdzdG9yZV90cnVlJyxcbiAgICBkZWZhdWx0PUZhbHNlLFxuKVxucGFyc2VyLmFkZF9hcmd1bWVudChcbiAgICAnLS1vdXQtZGlyJywgJy1vJyxcbiAgICBoZWxwPVwiRGVzdGluYXRpb24gaW4gd2hpY2ggdG8gc2F2ZSB0aGUgYnVpbGRzIHJlbGF0aXZlIHRvIHNvdXJjZSBkaXJcIixcbilcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9wa2dfcmVzb3VyY2VzL192ZW5kb3IvYXBwZGlycy5weVxuIyEvdXNyL2Jpbi9lbnYgcHl0aG9uXG4jIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuIyBDb3B5cmlnaHQgKGMpIDIwMDUtMjAxMCBBY3RpdmVTdGF0ZSBTb2Z0d2FyZSBJbmMuXG4jIENvcHlyaWdodCAoYykgMjAxMyBFZGR5IFBldHJpyJlvclxuXG5cIlwiXCJVdGlsaXRpZXMgZm9yIGRldGVybWluaW5nIGFwcGxpY2F0aW9uLXNwZWNpZmljIGRpcnMuXG5cblNlZSA8aHR0cDovL2dpdGh1Yi5jb20vQWN0aXZlU3RhdGUuLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE0Y2JaSExmV1d0SHhlZEZTSHRVRVluIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGV4aXN0aW5nIGRhdGEgYW5hbHlzaXMgc2NyaXB0cyBvciBub3RlYm9va3MgaW4gdGhlIHByb2plY3Q6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZWVlMjk2MjgtYjJhOC00ZGNlLTk3ZDctODBlZGMxODMyNmI4IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxMzFLTHBXQ2U0dUJ3MjhZTXI5OThnMyIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiRmluZCBhbnkgRGphbmdvIHByb2plY3QgZmlsZXMgbGlrZSBzZXR0aW5ncy5weSwgdXJscy5weSwgb3IgbWFuYWdlLnB5LiBBbHNvIGxvb2sgZm9yIGFueSByZXF1aXJlbWVudHMudHh0IGZpbGUuXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQgbWUgY2hlY2sgaWYgdGhlcmUncyBhIERqYW5nbyBwcm9qZWN0IHN0cnVjdHVyZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2dvb2dsZV9hbmFseXRpY3NfZGF0YS5jc3ZcbmRhdGUsc291cmNlLG1lZGl1bSxjaGFubmVsX2dyb3VwaW5nLGRldmljZV9jYXRlZ29yeSxsYW5kaW5nX3BhZ2Usc2Vzc2lvbnMsbmV3X3VzZXJzLGJvdW5jZV9yYXRlLHBhZ2VzX3Blcl9zZXNzaW9uLGF2Z19zZXNzaW9uX2R1cmF0aW9uLHRyYW5zYWN0aW9ucyxyZXZlbnVlLGNvbnZlcnNpb25fcmF0ZVxuMjAyNC0wMS0wMSxnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywzNDUsMTg3LDAuMzIsMy41LDI0NSwxMiw4NDAuMDAsMC4wMzQ4XG4yMDI0LTAxLTAxLGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTg3LDk4LDAuMjgsNC4yLDMxMiw4LDU2MC4wMCwwLjA0MjhcbjIwMjQtMDEtMDEsZmFjZWJvb2sscmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDE1Niw4NywwLjM1LDIuOCwxOTgsNSwzNTAuMDAsMC4wMzIxXG4yMDI0LTAxLTAxLGluc3RhZ3JhbSxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTIzLDc2LDAuMzgsMi41LDE3NiwzLDIxMC4wMCwwLjAyNDRcbjIwMjQtMDEtMDEsZGlyZWN0LG5vbmUsRGlyZWN0LGRlc2t0b3AsLywyMzQsMTEyLDAuMjUsNS42LDQyMywxNSwxMDUwLjAwLDAuMDY0MVxuMjAyNC0wMS0wMSxnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywyNjcsMTQzLDAuMzQsMy4yLDIzMiw5LDYzMC4wMCwwLjAzMzdcbjIwMjQtMDEtMDEsZ29vZ2xlLGNwYyxQYWlkIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywxMzIsNzYsMC4zMCwzLjgsMjg3LDUsMzUwLjAwLDAuMDM3OVxuMjAyNC0wMS0wMSxmYWNlYm9vayxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsOTgsNTQsMC4zNywyLjYsMTg3LDIsMTQwLjAwLDAuMDIwNFxuMjAyNC0wMS0wMixnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywzNzgsMjAxLDAuMzAsMy43LDI1NiwxNSwxMDUwLjAwLDAuMDM5N1xuMjAyNC0wMS0wMixnb29nbGUsY3BjLFBhaWQgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDIwMSwxMTIsMC4yNiw0LjUsMzI0LDEwLDcwMC4wMCwwLjA0OThcbjIwMjQtMDEtMDIsZmFjZWJvb2sscmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDE3Niw5OCwwLjMzLDMuMCwyMTAsNyw0OTAuMDAsMC4wMzk4XG4yMDI0LTAxLTAyLGluc3RhZ3JhbSxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTQ1LDg3LDAuMzYsMi43LDE4OSw1LDM1MC4wMCwwLjAzNDVcbjIwMjQtMDEtMDIsZGlyZWN0LG5vbmUsRGlyZWN0LGRlc2t0b3AsLywyNTYsMTMyLDAuMjMsNS44LDQ0NSwxOCwxMjYwLjAwLDAuMDcwM1xuMjAyNC0wMS0wMixnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywyODksMTU2LDAuMzIsMy40LDI0NSwxMSw3NzAuMDAsMC4wMzgxXG4yMDI0LTAxLTAyLGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsMTU2LDg5LDAuMjgsNC4wLDI5OCw3LDQ5MC4wMCwwLjA0NDlcbjIwMjQtMDEtMDIsZmFjZWJvb2sscmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLDExMiw2NywwLjM1LDIuOCwxOTgsNCwyODAuMDAsMC4wMzU3XG4yMDI0LTAxLTAzLGdvb2dsZSxvcmdhbmljLE9yZ2FuaWMgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDQxMiwyMjMsMC4yOCwzLjksMjY3LDE4LDEyNjAuMDAsMC4wNDM3XG4yMDI0LTAxLTAzLGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMjIzLDEzMiwwLjI0LDQuNywzMzYsMTMsOTEwLjAwLDAuMDU4M1xuLi4uXG4yMDI0LTAxLTA1LGRpcmVjdCxub25lLERpcmVjdCxkZXNrdG9wLC8sMzIzLDE5OCwwLjE3LDYuNCw1MTIsMjksMjAzMC4wMCwwLjA4OThcbjIwMjQtMDEtMDUsZ29vZ2xlLG9yZ2FuaWMsT3JnYW5pYyBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsMzU2LDE4OSwwLjI2LDQuMCwyNzgsMjAsMTQwMC4wMCwwLjA1NjJcbjIwMjQtMDEtMDUsZ29vZ2xlLGNwYyxQYWlkIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywyMjMsMTMyLDAuMjIsNC42LDMzMiwxNCw5ODAuMDAsMC4wNjI4XG4yMDI0LTAxLTA1LGZhY2Vib29rLHJlZmVycmFsLFNvY2lhbCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywxNzYsMTAxLDAuMjksMy40LDIzMiwxMCw3MDAuMDAsMC4wNTY4XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2luc3RhZ3JhbV9hZHNfZGF0YS5jc3ZcbmRhdGUsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxhZF9zZXRfaWQsYWRfc2V0X25hbWUsYWRfaWQsYWRfbmFtZSxvYmplY3RpdmUsaW1wcmVzc2lvbnMscmVhY2gsY2xpY2tzLGN0cixjcGMsc3BlbmQsY29udmVyc2lvbnMsY29udmVyc2lvbl92YWx1ZSxjb3N0X3Blcl9jb252ZXJzaW9uLHJvYXNcbjIwMjQtMDEtMDEsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywyODc2LDE5ODcsMTIzLDAuMDQyOCwwLjkwLDExMC43MCw0LDI4MC4wMCwyNy42OCwyLjUzXG4yMDI0LTAxLTAxLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTIsTWVuJ3MgU2hpcnRzLDMwMDEyMSxTdW1tZXIgU2hpcnQgU3RhdGljLENPTlZFUlNJT05TLDIzNDUsMTY1NCw5OCwwLjA0MTgsMC45MCw4OC4yMCwzLDIxMC4wMCwyOS40MCwyLjM4XG4yMDI0LTAxLTAxLDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxODc2LDEzNDUsNzYsMC4wNDA1LDAuOTUsNzIuMjAsMiwxNjAuMDAsMzYuMTAsMi4yMlxuMjAyNC0wMS0wMSwzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxNjU0LDEyMzQsNjUsMC4wMzkzLDAuODUsNTUuMjUsMSw1MC4wMCw1NS4yNSwwLjkxXG4yMDI0LTAxLTAyLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTEsV29tZW4ncyBEcmVzc2VzLDMwMDExMSxTdW1tZXIgRHJlc3MgQ2Fyb3VzZWwsQ09OVkVSU0lPTlMsMzAxMiwyMTM0LDE0NSwwLjA0ODEsMC45MCwxMzAuNTAsNiw0MjAuMDAsMjEuNzUsMy4yMlxuMjAyNC0wMS0wMiwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyNTY3LDE4NzYsMTEyLDAuMDQzNiwwLjkwLDEwMC44MCw0LDI4MC4wMCwyNS4yMCwyLjc4XG4yMDI0LTAxLTAyLDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxOTg3LDE0NTYsODcsMC4wNDM4LDAuOTUsODIuNjUsMywyNDAuMDAsMjcuNTUsMi45MFxuMjAyNC0wMS0wMiwzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxNzY1LDEzNDUsNzgsMC4wNDQyLDAuODUsNjYuMzAsMiwxMDAuMDAsMzMuMTUsMS41MVxuMjAyNC0wMS0wMywzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDExLFdvbWVuJ3MgRHJlc3NlcywzMDAxMTEsU3VtbWVyIERyZXNzIENhcm91c2VsLENPTlZFUlNJT05TLDMyNDUsMjI0NSwxNjcsMC4wNTE1LDAuOTAsMTUwLjMwLDgsNTYwLjAwLDE4Ljc5LDMuNzNcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9waXAzXG4jIS9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvYmluL3B5dGhvblxuIyAtKi0gY29kaW5nOiB1dGYtOCAtKi1cbmltcG9ydCByZVxuaW1wb3J0IHN5c1xuZnJvbSBwaXAuX2ludGVybmFsLmNsaS5tYWluIGltcG9ydCBtYWluXG5pZiBfX25hbWVfXyA9PSAnX19tYWluX18nOlxuICAgIHN5cy5hcmd2WzBdID0gcmUuc3ViKHInKC1zY3JpcHRcXC5weXd8XFwuZXhlKT8kJywgJycsIHN5cy5hcmd2WzBdKVxuICAgIHN5cy5leGl0KG1haW4oKSlcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9waXBcbiMhL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9iaW4vcHl0aG9uXG4jIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuaW1wb3J0IHJlXG5pbXBvcnQgc3lzXG5mcm9tIHBpcC5faW50ZXJuYWwuY2xpLm1haW4gaW1wb3J0IG1haW5cbmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6XG4gICAgc3lzLmFyZ3ZbMF0gPSByZS5zdWIocicoLXNjcmlwdFxcLnB5d3xcXC5leGUpPyQnLCAnJywgc3lzLmFyZ3ZbMF0pXG4gICAgc3lzLmV4aXQobWFpbigpKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvYmluL3BpcDMuOVxuIyEvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9weXRob25cbiMgLSotIGNvZGluZzogdXRmLTggLSotXG5pbXBvcnQgcmVcbmltcG9ydCBzeXNcbmZyb20gcGlwLl9pbnRlcm5hbC5jbGkubWFpbiBpbXBvcnQgbWFpblxuaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzpcbiAgICBzeXMuYXJndlswXSA9IHJlLnN1YihyJygtc2NyaXB0XFwucHl3fFxcLmV4ZSk/JCcsICcnLCBzeXMuYXJndlswXSlcbiAgICBzeXMuZXhpdChtYWluKCkpXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2ZhY2Vib29rX2Fkc19kYXRhLmNzdlxuZGF0ZSxjYW1wYWlnbl9pZCxjYW1wYWlnbl9uYW1lLGFkX3NldF9pZCxhZF9zZXRfbmFtZSxhZF9pZCxhZF9uYW1lLG9iamVjdGl2ZSxpbXByZXNzaW9ucyxyZWFjaCxjbGlja3MsY3RyLGNwYyxzcGVuZCxjb252ZXJzaW9ucyxjb252ZXJzaW9uX3ZhbHVlLGNvc3RfcGVyX2NvbnZlcnNpb24scm9hc1xuMjAyNC0wMS0wMSwyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLDIwMDExLFdvbWVuJ3MgRHJlc3NlcywyMDAxMTEsU3VtbWVyIERyZXNzIENhcm91c2VsLENPTlZFUlNJT05TLDM0NTYsMjM0NSwxODcsMC4wNTQxLDAuODUsMTU4Ljk1LDcsNDkwLjAwLDIyLjcxLDMuMDhcbjIwMjQtMDEtMDEsMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQiwyMDAxMixNZW4ncyBTaGlydHMsMjAwMTIxLFN1bW1lciBTaGlydCBTdGF0aWMsQ09OVkVSU0lPTlMsMjg3NiwxOTg3LDEzMiwwLjA0NTksMC44NSwxMTIuMjAsNCwyODAuMDAsMjguMDUsMi41MFxuMjAyNC0wMS0wMSwyMDAyLFdpbnRlcl9TYWxlX0ZCLDIwMDIxLFdpbnRlciBDb2F0cywyMDAyMTEsV2ludGVyIENvYXQgVmlkZW8sQ09OVkVSU0lPTlMsMjM0NSwxNjU0LDk4LDAuMDQxOCwwLjkwLDg4LjIwLDMsMjQwLjAwLDI5LjQwLDIuNzJcbjIwMjQtMDEtMDEsMjAwMyxFdmVyeWRheV9CYXNpY3NfRkIsMjAwMzEsQmFzaWMgVGVlcywyMDAzMTEsQmFzaWMgVGVlIENvbGxlY3Rpb24sQ09OVkVSU0lPTlMsMTk4NywxNDMyLDc2LDAuMDM4MiwwLjgwLDYwLjgwLDIsMTAwLjAwLDMwLjQwLDEuNjRcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvY3VzdG9tZXJfZGF0YS5jc3ZcbmN1c3RvbWVyX2lkLGZpcnN0X25hbWUsbGFzdF9uYW1lLGVtYWlsLGdlbmRlcixhZ2UsY2l0eSxzdGF0ZSxzaWdudXBfZGF0ZSxjdXN0b21lcl9zZWdtZW50LHRvdGFsX29yZGVycyx0b3RhbF9zcGVuZCxhdmdfb3JkZXJfdmFsdWUsbGFzdF9wdXJjaGFzZV9kYXRlLGRheXNfc2luY2VfbGFzdF9wdXJjaGFzZSxmYXZvcml0ZV9jYXRlZ29yeSxmYXZvcml0ZV9wcm9kdWN0LGVtYWlsX3N1YnNjcmliZXIsbW9iaWxlX2FwcF91c2VyLGxveWFsdHlfdGllclxuMTAwMSxKb2huLFNtaXRoLGpvaG4uc21pdGhAZW1haWwuY29tLE0sMzQsTmV3IFlvcmssTlksMjAyMy0wMS0xNSxIaWdoIFZhbHVlLDEyLDEyNTAuNDUsMTA0LjIwLDIwMjQtMDEtMDIsNSxNZW4ncyBTaGlydHMsU3VtbWVyIExpbmVuIFNoaXJ0LFRSVUUsVFJVRSxHb2xkXG4xMDAyLEVtaWx5LEpvaG5zb24sZW1pbHkuakBlbWFpbC5jb20sRiwyOSxMb3MgQW5nZWxlcyxDQSwyMDIzLTAyLTAzLFJlZ3VsYXIsOCw2NDUuNzUsODAuNzIsMjAyNC0wMS0wMyw0LFdvbWVuJ3MgRHJlc3NlcyxGbG9yYWwgU3VtbWVyIERyZXNzLFRSVUUsVFJVRSxTaWx2ZXJcbjEwMDMsTWljaGFlbCxXaWxsaWFtcyxtLndpbGxpYW1zQGVtYWlsLmNvbSxNLDQyLENoaWNhZ28sSUwsMjAyMy0wMS0yMixIaWdoIFZhbHVlLDE1LDE4NzYuMzAsMTI1LjA5LDIwMjQtMDEtMDEsNixNZW4ncyBPdXRlcndlYXIsV2ludGVyIENvYXQgQ2xhc3NpYyxUUlVFLEZBTFNFLEdvbGRcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L3B5dmVudi5jZmdcbmhvbWUgPSAvb3B0L2FuYWNvbmRhMy9iaW5cbmluY2x1ZGUtc3lzdGVtLXNpdGUtcGFja2FnZXMgPSBmYWxzZVxudmVyc2lvbiA9IDMuOS4xM1xuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9jdXN0b21lcl90b3VjaHBvaW50cy5jc3ZcbnRvdWNocG9pbnRfaWQsY3VzdG9tZXJfaWQsZGF0ZSxjaGFubmVsLHNvdXJjZSxjYW1wYWlnbl9pZCxjYW1wYWlnbl9uYW1lLGludGVyYWN0aW9uX3R5cGUsY29udmVyc2lvbixjb252ZXJzaW9uX3ZhbHVlLHByb2R1Y3RfY2F0ZWdvcnkscHJvZHVjdF9pZCxwcm9kdWN0X25hbWVcbjEwMDAxLDEwMDEsMjAyNC0wMS0wMSxQYWlkIFNlYXJjaCxHb29nbGUgQWRzLDEwMDEsU3VtbWVyX0NvbGxlY3Rpb25fMjAyNCxhZF9jbGljayxGQUxTRSwwLjAwLE1lbidzIFNoaXJ0cyxOVUxMLE5VTExcbjEwMDAyLDEwMDEsMjAyNC0wMS0wMSxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxNZW4ncyBTaGlydHMsTlVMTCxOVUxMXG4xMDAwMywxMDAxLDIwMjQtMDEtMDIsRW1haWwsTmV3c2xldHRlcixOVUxMLFdlZWtseV9EZWFscyxlbWFpbF9vcGVuLEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDA0LDEwMDEsMjAyNC0wMS0wMixQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLGFkX2NsaWNrLFRSVUUsODAuMDAsTWVuJ3MgU2hpcnRzLDIwMDEsU3VtbWVyIExpbmVuIFNoaXJ0XG4xMDAwNSwxMDAyLDIwMjQtMDEtMDEsUGFpZCBTb2NpYWwsSW5zdGFncmFtLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsYWRfaW1wcmVzc2lvbixGQUxTRSwwLjAwLFdvbWVuJ3MgRHJlc3NlcyxOVUxMLE5VTExcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvZ29vZ2xlX2Fkc19kYXRhLmNzdlxuZGF0ZSxjYW1wYWlnbl9pZCxjYW1wYWlnbl9uYW1lLGFkX2dyb3VwX2lkLGFkX2dyb3VwX25hbWUsa2V5d29yZCxtYXRjaF90eXBlLGRldmljZSxpbXByZXNzaW9ucyxjbGlja3MsY29zdCxjb252ZXJzaW9ucyxjb252ZXJzaW9uX3ZhbHVlLGN0cixjcGMscm9hc1xuMjAyNC0wMS0wMSwxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsMTAwMTEsV29tZW4ncyBEcmVzc2VzLHN1bW1lciBkcmVzcyxicm9hZCxtb2JpbGUsMTI0NSw3OCwxNTYuMDAsMywyMTAuMDAsMC4wNjI2LDIuMDAsMS4zNVxuMjAyNC0wMS0wMSwxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsMTAwMTIsTWVuJ3MgU2hpcnRzLHN1bW1lciBzaGlydCxicm9hZCxtb2JpbGUsOTg3LDQ1LDkwLjAwLDEsODAuMDAsMC4wNDU2LDIuMDAsMC44OVxuMjAyNC0wMS0wMSwxMDAyLFdpbnRlcl9TYWxlXzIwMjQsMTAwMjEsV2ludGVyIENvYXRzLHdpbnRlciBjb2F0IHNhbGUsZXhhY3QsZGVza3RvcCw4NzYsNjUsMTYyLjUwLDQsMzIwLjAwLDAuMDc0MiwyLjUwLDEuOTdcbjIwMjQtMDEtMDEsMTAwMyxFdmVyeWRheV9Fc3NlbnRpYWxzLDEwMDMxLEJhc2ljIFRlZXMsYmFzaWMgdC1zaGlydCxwaHJhc2UsdGFibGV0LDY1NCwzMiw0OC4wMCwyLDEwMC4wMCwwLjA0ODksMS41MCwyLjA4XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2dvb2dsZV9zZWFyY2hfY29uc29sZV9kYXRhLmNzdlxuZGF0ZSxxdWVyeSxwYWdlLGRldmljZSxjb3VudHJ5LGltcHJlc3Npb25zLGNsaWNrcyxjdHIscG9zaXRpb25cbjIwMjQtMDEtMDEsc3VtbWVyIGRyZXNzZXMsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3Nlcyxtb2JpbGUsVVMsMjM0NSwxODcsMC4wNzk3LDMuMlxuMjAyNC0wMS0wMSxzdW1tZXIgc2hpcnRzIG1lbiwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLG1vYmlsZSxVUywxODc2LDEzMiwwLjA3MDQsNC4xXG4yMDI0LTAxLTAxLHdpbnRlciBjb2F0cyBzYWxlLC9jb2xsZWN0aW9ucy93aW50ZXItc2FsZS9jb2F0cyxkZXNrdG9wLFVTLDE1NDMsOTgsMC4wNjM1LDIuOFxuMjAyNC0wMS0wMSxiYXNpYyB0LXNoaXJ0cywvY29sbGVjdGlvbnMvYmFzaWNzL3RlZXMsdGFibGV0LFVTLDEyMzQsNzYsMC4wNjE2LDUuMlxuMjAyNC0wMS0wMixzdW1tZXIgZHJlc3NlcywvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLG1vYmlsZSxVUywyNDU2LDIwMSwwLjA4MTgsMy4xXG4yMDI0LTAxLTAyLHN1bW1lciBzaGlydHMgbWVuLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsbW9iaWxlLFVTLDE5MjMsMTQ1LDAuMDc1NCwzLjlcbjIwMjQtMDEtMDIsd2ludGVyIGNvYXRzIHNhbGUsL2NvbGxlY3Rpb25zL3dpbnRlci1zYWxlL2NvYXRzLGRlc2t0b3AsVVMsMTYyMSwxMTIsMC4wNjkxLDIuN1xuMjAyNC0wMS0wMixiYXNpYyB0LXNoaXJ0cywvY29sbGVjdGlvbnMvYmFzaWNzL3RlZXMsdGFibGV0LFVTLDEzNDUsODksMC4wNjYyLDQuOFxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL3B5Z21lbnRzL21vZGVsaW5lLnB5XG5cIlwiXCJcbiAgICBweWdtZW50cy5tb2RlbGluZVxuICAgIH5+fn5+fn5+fn5+fn5+fn5+XG5cbiAgICBBIHNpbXBsZSBtb2RlbGluZSBwYXJzZXIgKGJhc2VkIG9uIHB5bW9kZWxpbmUpLlxuXG4gICAgOmNvcHlyaWdodDogQ29weXJpZ2h0IDIwMDYtMjAyMSBieSB0aGUgUHlnbWVudHMgdGVhbSwgc2VlIEFVVEhPUlMuXG4gICAgOmxpY2Vuc2U6IEJTRCwgc2VlIExJQ0VOU0UgZm9yIGRldGFpbHMuXG5cIlwiXCJcblxuaW1wb3J0IHJlXG5cbl9fYWxsX18gPSBbJ2dldF9maWxldHlwZV9mcm9tX2J1ZmZlciddXG5cblxubW9kZWxpbmVfcmUgPSByZS5jb21waWxlKHInJydcbiAgICAoPzogdmkgfCB2aW0gfCBleCApICg/OiBbPD0+XT8gXFxkKiApPyA6XG4gICAgLiogKD86IGZ0IHwgZmlsZXR5cGUgfCBzeW4gfCBzeW50YXggKSA9ICggW146XFxzXSsgKVxuJycnLCByZS5WRVJCT1NFKVxuXG5cbmRlZiBnZXRfZmlsZXR5cGVfZnJvbV9saW5lKGwpOlxuICAgIG0gPSBtb2RlbGluZV9yZS5zZWFyY2gobClcbiAgICBpZiBtOlxuICAgICAgICByZXR1cm4gbS5ncm91cCgxKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvYmluL0FjdGl2YXRlLnBzMVxuPCNcbi5TeW5vcHNpc1xuQWN0aXZhdGUgYSBQeXRob24gdmlydHVhbCBlbnZpcm9ubWVudCBmb3IgdGhlIGN1cnJlbnQgUG93ZXJTaGVsbCBzZXNzaW9uLlxuXG4uRGVzY3JpcHRpb25cblB1c2hlcyB0aGUgcHl0aG9uIGV4ZWN1dGFibGUgZm9yIGEgdmlydHVhbCBlbnZpcm9ubWVudCB0byB0aGUgZnJvbnQgb2YgdGhlXG4kRW52OlBBVEggZW52aXJvbm1lbnQgdmFyaWFibGUgYW5kIHNldHMgdGhlIHByb21wdCB0byBzaWduaWZ5IHRoYXQgeW91IGFyZVxuaW4gYSBQeXRob24gdmlydHVhbCBlbnZpcm9ubWVudC4gTWFrZXMgdXNlIG9mIHRoZSBjb21tYW5kIGxpbmUgc3dpdGNoZXMgYXNcbndlbGwgYXMgdGhlIGBweXZlbnYuY2ZnYCBmaWxlIHZhbHVlcyBwcmVzZW50IGluIHRoZSB2aXJ0dWFsIGVudmlyb25tZW50LlxuXG4uUGFyYW1ldGVyIFZlbnZEaXJcblBhdGggdG8gdGhlIGRpcmVjdG9yeSB0aGF0IGNvbnRhaW5zIHRoZSB2aXJ0dWFsIGVudmlyb25tZW50IHRvIGFjdGl2YXRlLiBUaGVcbmRlZmF1bHQgdmFsdWUgZm9yIHRoaXMgaXMgdGhlIHBhcmVudCBvZiB0aGUgZGlyZWN0b3J5IHRoYXQgdGhlIEFjdGl2YXRlLnBzMVxuc2NyaXB0IGlzIGxvY2F0ZWQgd2l0aGluLlxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvYmluL2FjdGl2YXRlXG4jIFRoaXMgZmlsZSBtdXN0IGJlIHVzZWQgd2l0aCBcInNvdXJjZSBiaW4vYWN0aXZhdGVcIiAqZnJvbSBiYXNoKlxuIyB5b3UgY2Fubm90IHJ1biBpdCBkaXJlY3RseVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL2Rpc3RsaWIvc2NyaXB0cy5weVxuIyAtKi0gY29kaW5nOiB1dGYtOCAtKi1cbiNcbiMgQ29weXJpZ2h0IChDKSAyMDEzLTIwMTUgVmluYXkgU2FqaXAuXG4jIExpY2Vuc2VkIHRvIHRoZSBQeXRob24gU29mdHdhcmUgRm91bmRhdGlvbiB1bmRlciBhIGNvbnRyaWJ1dG9yIGFncmVlbWVudC5cbiMgU2VlIExJQ0VOU0UudHh0IGFuZCBDT05UUklCVVRPUlMudHh0LlxuI1xuZnJvbSBpbyBpbXBvcnQgQnl0ZXNJT1xuaW1wb3J0IGxvZ2dpbmdcbmltcG9ydCBvc1xuaW1wb3J0IHJlXG5pbXBvcnQgc3RydWN0XG5pbXBvcnQgc3lzXG5cbmZyb20gLmNvbXBhdCBpbXBvcnQgc3lzY29uZmlnLCBkZXRlY3RfZW5jb2RpbmcsIFppcEZpbGVcbmZyb20gLnJlc291cmNlcyBpbXBvcnQgZmluZGVyXG5mcm9tIC51dGlsIGltcG9ydCAoRmlsZU9wZXJhdG9yLCBnZXRfZXhwb3J0X2VudHJ5LCBjb252ZXJ0X3BhdGgsXG4gICAgICAgICAgICAgICAgICAgZ2V0X2V4ZWN1dGFibGUsIGdldF9wbGF0Zm9ybSwgaW5fdmVudilcbi4uLlxuXG4jIGNoZWNrIGlmIFB5dGhvbiBpcyBjYWxsZWQgb24gdGhlIGZpcnN0IGxpbmUgd2l0aCB0aGlzIGV4cHJlc3Npb25cbkZJUlNUX0xJTkVfUkUgPSByZS5jb21waWxlKGInXiMhLipweXRob253P1swLTkuXSooWyBcXHRdLiopPyQnKVxuU0NSSVBUX1RFTVBMQVRFID0gcicnJyMgLSotIGNvZGluZzogdXRmLTggLSotXG5pbXBvcnQgcmVcbmltcG9ydCBzeXNcbmZyb20gJShtb2R1bGUpcyBpbXBvcnQgJShpbXBvcnRfbmFtZSlzXG5pZiBfX25hbWVfXyA9PSAnX19tYWluX18nOlxuICAgIHN5cy5hcmd2WzBdID0gcmUuc3ViKHInKC1zY3JpcHRcXC5weXd8XFwuZXhlKT8kJywgJycsIHN5cy5hcmd2WzBdKVxuICAgIHN5cy5leGl0KCUoZnVuYylzKCkpXG4nJydcbi4uLlxuXG4gICAgIyBQdWJsaWMgQVBJIGZvbGxvd3NcblxuICAgIGRlZiBtYWtlKHNlbGYsIHNwZWNpZmljYXRpb24sIG9wdGlvbnM9Tm9uZSk6XG4gICAgICAgIFwiXCJcIlxuICAgICAgICBNYWtlIGEgc2NyaXB0LlxuXG4gICAgICAgIDpwYXJhbSBzcGVjaWZpY2F0aW9uOiBUaGUgc3BlY2lmaWNhdGlvbiwgd2hpY2ggaXMgZWl0aGVyIGEgdmFsaWQgZXhwb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeSBzcGVjaWZpY2F0aW9uICh0byBtYWtlIGEgc2NyaXB0IGZyb20gYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGFibGUpIG9yIGEgZmlsZW5hbWUgKHRvIG1ha2UgYSBzY3JpcHQgYnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlpbmcgZnJvbSBhIHNvdXJjZSBsb2NhdGlvbikuXG4gICAgICAgIDpwYXJhbSBvcHRpb25zOiBBIGRpY3Rpb25hcnkgb2Ygb3B0aW9ucyBjb250cm9sbGluZyBzY3JpcHQgZ2VuZXJhdGlvbi5cbiAgICAgICAgOnJldHVybjogQSBsaXN0IG9mIGFsbCBhYnNvbHV0ZSBwYXRobmFtZXMgd3JpdHRlbiB0by5cbiAgICAgICAgXCJcIlwiXG4gICAgICAgIGZpbGVuYW1lcyA9IFtdXG4gICAgICAgIGVudHJ5ID0gZ2V0X2V4cG9ydF9lbnRyeShzcGVjaWZpY2F0aW9uKVxuICAgICAgICBpZiBlbnRyeSBpcyBOb25lOlxuICAgICAgICAgICAgc2VsZi5fY29weV9zY3JpcHQoc3BlY2lmaWNhdGlvbiwgZmlsZW5hbWVzKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgc2VsZi5fbWFrZV9zY3JpcHQoZW50cnksIGZpbGVuYW1lcywgb3B0aW9ucz1vcHRpb25zKVxuICAgICAgICByZXR1cm4gZmlsZW5hbWVzXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL192ZW5kb3IvcmljaC9zY29wZS5weVxuZnJvbSBjb2xsZWN0aW9ucy5hYmMgaW1wb3J0IE1hcHBpbmdcbmZyb20gdHlwaW5nIGltcG9ydCBUWVBFX0NIRUNLSU5HLCBBbnksIE9wdGlvbmFsLCBUdXBsZVxuXG5mcm9tIC5oaWdobGlnaHRlciBpbXBvcnQgUmVwckhpZ2hsaWdodGVyXG5mcm9tIC5wYW5lbCBpbXBvcnQgUGFuZWxcbmZyb20gLnByZXR0eSBpbXBvcnQgUHJldHR5XG5mcm9tIC50YWJsZSBpbXBvcnQgVGFibGVcbmZyb20gLnRleHQgaW1wb3J0IFRleHQsIFRleHRUeXBlXG5cbmlmIFRZUEVfQ0hFQ0tJTkc6XG4gICAgZnJvbSAuY29uc29sZSBpbXBvcnQgQ29uc29sZVJlbmRlcmFibGVcblxuXG5kZWYgcmVuZGVyX3Njb3BlKFxuICAgIHNjb3BlOiBcIk1hcHBpbmdbc3RyLCBBbnldXCIsXG4gICAgKixcbiAgICB0aXRsZTogT3B0aW9uYWxbVGV4dFR5cGVdID0gTm9uZSxcbiAgICBzb3J0X2tleXM6IGJvb2wgPSBUcnVlLFxuICAgIGluZGVudF9ndWlkZXM6IGJvb2wgPSBGYWxzZSxcbiAgICBtYXhfbGVuZ3RoOiBPcHRpb25hbFtpbnRdID0gTm9uZSxcbiAgICBtYXhfc3RyaW5nOiBPcHRpb25hbFtpbnRdID0gTm9uZSxcbikgLT4gXCJDb25zb2xlUmVuZGVyYWJsZVwiOlxuICAgIFwiXCJcIlJlbmRlciBweXRob24gdmFyaWFibGVzIGluIGEgZ2l2ZW4gc2NvcGUuXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL192ZW5kb3IvcmljaC9qdXB5dGVyLnB5XG5mcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0LCBJdGVyYWJsZSwgTGlzdFxuXG5mcm9tIC4gaW1wb3J0IGdldF9jb25zb2xlXG5mcm9tIC5zZWdtZW50IGltcG9ydCBTZWdtZW50XG5mcm9tIC50ZXJtaW5hbF90aGVtZSBpbXBvcnQgREVGQVVMVF9URVJNSU5BTF9USEVNRVxuXG5KVVBZVEVSX0hUTUxfRk9STUFUID0gXCJcIlwiXFxcbjxwcmUgc3R5bGU9XCJ3aGl0ZS1zcGFjZTpwcmU7b3ZlcmZsb3cteDphdXRvO2xpbmUtaGVpZ2h0Om5vcm1hbDtmb250LWZhbWlseTpNZW5sbywnRGVqYVZ1IFNhbnMgTW9ubycsY29uc29sYXMsJ0NvdXJpZXIgTmV3Jyxtb25vc3BhY2VcIj57Y29kZX08L3ByZT5cblwiXCJcIlxuXG5cbmNsYXNzIEp1cHl0ZXJSZW5kZXJhYmxlOlxuICAgIFwiXCJcIkEgc2hpbSB0byB3cml0ZSBodG1sIHRvIEp1cHl0ZXIgbm90ZWJvb2suXCJcIlwiXG5cbiAgICBkZWYgX19pbml0X18oc2VsZiwgaHRtbDogc3RyLCB0ZXh0OiBzdHIpIC0+IE5vbmU6XG4gICAgICAgIHNlbGYuaHRtbCA9IGh0bWxcbiAgICAgICAgc2VsZi50ZXh0ID0gdGV4dFxuXG4gICAgZGVmIF9yZXByX21pbWVidW5kbGVfKFxuICAgICAgICBzZWxmLCBpbmNsdWRlOiBJdGVyYWJsZVtzdHJdLCBleGNsdWRlOiBJdGVyYWJsZVtzdHJdLCAqKmt3YXJnczogQW55XG4gICAgKSAtPiBEaWN0W3N0ciwgc3RyXTpcbiAgICAgICAgZGF0YSA9IHtcInRleHQvcGxhaW5cIjogc2VsZi50ZXh0LCBcInRleHQvaHRtbFwiOiBzZWxmLmh0bWx9XG4gICAgICAgIGlmIGluY2x1ZGU6XG4gICAgICAgICAgICBkYXRhID0ge2s6IHYgZm9yIChrLCB2KSBpbiBkYXRhLml0ZW1zKCkgaWYgayBpbiBpbmNsdWRlfVxuICAgICAgICBpZiBleGNsdWRlOlxuICAgICAgICAgICAgZGF0YSA9IHtrOiB2IGZvciAoaywgdikgaW4gZGF0YS5pdGVtcygpIGlmIGsgbm90IGluIGV4Y2x1ZGV9XG4gICAgICAgIHJldHVybiBkYXRhXG5cblxuY2xhc3MgSnVweXRlck1peGluOlxuICAgIFwiXCJcIkFkZCB0byBhbiBSaWNoIHJlbmRlcmFibGUgdG8gbWFrZSBpdCByZW5kZXIgaW4gSnVweXRlciBub3RlYm9vay5cIlwiXCJcblxuICAgIF9fc2xvdHNfXyA9ICgpXG5cbiAgICBkZWYgX3JlcHJfbWltZWJ1bmRsZV8oXG4gICAgICAgIHNlbGYsIGluY2x1ZGU6IEl0ZXJhYmxlW3N0cl0sIGV4Y2x1ZGU6IEl0ZXJhYmxlW3N0cl0sICoqa3dhcmdzOiBBbnlcbiAgICApIC0+IERpY3Rbc3RyLCBzdHJdOlxuICAgICAgICBjb25zb2xlID0gZ2V0X2NvbnNvbGUoKVxuICAgICAgICBzZWdtZW50cyA9IGxpc3QoY29uc29sZS5yZW5kZXIoc2VsZiwgY29uc29sZS5vcHRpb25zKSkgICMgdHlwZTogaWdub3JlXG4gICAgICAgIGh0bWwgPSBfcmVuZGVyX3NlZ21lbnRzKHNlZ21lbnRzKVxuICAgICAgICB0ZXh0ID0gY29uc29sZS5fcmVuZGVyX2J1ZmZlcihzZWdtZW50cylcbiAgICAgICAgZGF0YSA9IHtcInRleHQvcGxhaW5cIjogdGV4dCwgXCJ0ZXh0L2h0bWxcIjogaHRtbH1cbiAgICAgICAgaWYgaW5jbHVkZTpcbiAgICAgICAgICAgIGRhdGEgPSB7azogdiBmb3IgKGssIHYpIGluIGRhdGEuaXRlbXMoKSBpZiBrIGluIGluY2x1ZGV9XG4gICAgICAgIGlmIGV4Y2x1ZGU6XG4gICAgICAgICAgICBkYXRhID0ge2s6IHYgZm9yIChrLCB2KSBpbiBkYXRhLml0ZW1zKCkgaWYgayBub3QgaW4gZXhjbHVkZX1cbiAgICAgICAgcmV0dXJuIGRhdGFcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX3ZlbmRvci9yaWNoL2pzb24ucHlcbi4uLlxuXG5cbmlmIF9fbmFtZV9fID09IFwiX19tYWluX19cIjpcblxuICAgIGltcG9ydCBhcmdwYXJzZVxuICAgIGltcG9ydCBzeXNcblxuICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPVwiUHJldHR5IHByaW50IGpzb25cIilcbiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KFxuICAgICAgICBcInBhdGhcIixcbiAgICAgICAgbWV0YXZhcj1cIlBBVEhcIixcbiAgICAgICAgaGVscD1cInBhdGggdG8gZmlsZSwgb3IgLSBmb3Igc3RkaW5cIixcbiAgICApXG4gICAgcGFyc2VyLmFkZF9hcmd1bWVudChcbiAgICAgICAgXCItaVwiLFxuICAgICAgICBcIi0taW5kZW50XCIsXG4gICAgICAgIG1ldGF2YXI9XCJTUEFDRVNcIixcbiAgICAgICAgdHlwZT1pbnQsXG4gICAgICAgIGhlbHA9XCJOdW1iZXIgb2Ygc3BhY2VzIGluIGFuIGluZGVudFwiLFxuICAgICAgICBkZWZhdWx0PTIsXG4gICAgKVxuICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpXG5cbiAgICBmcm9tIHBpcC5fdmVuZG9yLnJpY2guY29uc29sZSBpbXBvcnQgQ29uc29sZVxuXG4gICAgY29uc29sZSA9IENvbnNvbGUoKVxuICAgIGVycm9yX2NvbnNvbGUgPSBDb25zb2xlKHN0ZGVycj1UcnVlKVxuXG4gICAgdHJ5OlxuICAgICAgICBpZiBhcmdzLnBhdGggPT0gXCItXCI6XG4gICAgICAgICAgICBqc29uX2RhdGEgPSBzeXMuc3RkaW4ucmVhZCgpXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICB3aXRoIG9wZW4oYXJncy5wYXRoLCBcInJ0XCIpIGFzIGpzb25fZmlsZTpcbiAgICAgICAgICAgICAgICBqc29uX2RhdGEgPSBqc29uX2ZpbGUucmVhZCgpXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlcnJvcjpcbiAgICAgICAgZXJyb3JfY29uc29sZS5wcmludChmXCJVbmFibGUgdG8gcmVhZCB7YXJncy5wYXRoIXJ9OyB7ZXJyb3J9XCIpXG4gICAgICAgIHN5cy5leGl0KC0xKVxuXG4gICAgY29uc29sZS5wcmludChKU09OKGpzb25fZGF0YSwgaW5kZW50PWFyZ3MuaW5kZW50KSwgc29mdF93cmFwPVRydWUpXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvc2V0dXB0b29scy9sYXVuY2gucHlcblwiXCJcIlxuTGF1bmNoIHRoZSBQeXRob24gc2NyaXB0IG9uIHRoZSBjb21tYW5kIGxpbmUgYWZ0ZXJcbnNldHVwdG9vbHMgaXMgYm9vdHN0cmFwcGVkIHZpYSBpbXBvcnQuXG5cIlwiXCJcblxuIyBOb3RlIHRoYXQgc2V0dXB0b29scyBnZXRzIGltcG9ydGVkIGltcGxpY2l0bHkgYnkgdGhlXG4jIGludm9jYXRpb24gb2YgdGhpcyBzY3JpcHQgdXNpbmcgcHl0aG9uIC1tIHNldHVwdG9vbHMubGF1bmNoXG5cbmltcG9ydCB0b2tlbml6ZVxuaW1wb3J0IHN5c1xuXG5cbmRlZiBydW4oKTpcbiAgICBcIlwiXCJcbiAgICBSdW4gdGhlIHNjcmlwdCBpbiBzeXMuYXJndlsxXSBhcyBpZiBpdCBoYWRcbiAgICBiZWVuIGludm9rZWQgbmF0dXJhbGx5LlxuICAgIFwiXCJcIlxuICAgIF9fYnVpbHRpbnNfX1xuICAgIHNjcmlwdF9uYW1lID0gc3lzLmFyZ3ZbMV1cbiAgICBuYW1lc3BhY2UgPSBkaWN0KFxuICAgICAgICBfX2ZpbGVfXz1zY3JpcHRfbmFtZSxcbiAgICAgICAgX19uYW1lX189J19fbWFpbl9fJyxcbiAgICAgICAgX19kb2NfXz1Ob25lLFxuICAgIClcbiAgICBzeXMuYXJndls6XSA9IHN5cy5hcmd2WzE6XVxuXG4gICAgb3Blbl8gPSBnZXRhdHRyKHRva2VuaXplLCAnb3BlbicsIG9wZW4pXG4gICAgd2l0aCBvcGVuXyhzY3JpcHRfbmFtZSkgYXMgZmlkOlxuICAgICAgICBzY3JpcHQgPSBmaWQucmVhZCgpXG4gICAgbm9ybV9zY3JpcHQgPSBzY3JpcHQucmVwbGFjZSgnXFxcXHJcXFxcbicsICdcXFxcbicpXG4gICAgY29kZSA9IGNvbXBpbGUobm9ybV9zY3JpcHQsIHNjcmlwdF9uYW1lLCAnZXhlYycpXG4gICAgZXhlYyhjb2RlLCBuYW1lc3BhY2UpXG5cblxuaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzpcbiAgICBydW4oKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL3JpY2gvcHJvZ3Jlc3NfYmFyLnB5XG5pbXBvcnQgbWF0aFxuZnJvbSBmdW5jdG9vbHMgaW1wb3J0IGxydV9jYWNoZVxuZnJvbSB0aW1lIGltcG9ydCBtb25vdG9uaWNcbmZyb20gdHlwaW5nIGltcG9ydCBJdGVyYWJsZSwgTGlzdCwgT3B0aW9uYWxcblxuZnJvbSAuY29sb3IgaW1wb3J0IENvbG9yLCBibGVuZF9yZ2JcbmZyb20gLmNvbG9yX3RyaXBsZXQgaW1wb3J0IENvbG9yVHJpcGxldFxuZnJvbSAuY29uc29sZSBpbXBvcnQgQ29uc29sZSwgQ29uc29sZU9wdGlvbnMsIFJlbmRlclJlc3VsdFxuZnJvbSAuanVweXRlciBpbXBvcnQgSnVweXRlck1peGluXG5mcm9tIC5tZWFzdXJlIGltcG9ydCBNZWFzdXJlbWVudFxuZnJvbSAuc2VnbWVudCBpbXBvcnQgU2VnbWVudFxuZnJvbSAuc3R5bGUgaW1wb3J0IFN0eWxlLCBTdHlsZVR5cGVcblxuIyBOdW1iZXIgb2YgY2hhcmFjdGVycyBiZWZvcmUgJ3B1bHNlJyBhbmltYXRpb24gcmVwZWF0c1xuUFVMU0VfU0laRSA9IDIwXG5cblxuY2xhc3MgUHJvZ3Jlc3NCYXIoSnVweXRlck1peGluKTpcbiAgICBcIlwiXCJSZW5kZXJzIGEgKHByb2dyZXNzKSBiYXIuIFVzZWQgYnkgcmljaC5wcm9ncmVzcy5cbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL19kaXN0dXRpbHMvY29tbWFuZC9idWlsZF9zY3JpcHRzLnB5XG5cIlwiXCJkaXN0dXRpbHMuY29tbWFuZC5idWlsZF9zY3JpcHRzXG5cbkltcGxlbWVudHMgdGhlIERpc3R1dGlscyAnYnVpbGRfc2NyaXB0cycgY29tbWFuZC5cIlwiXCJcblxuaW1wb3J0IG9zLCByZVxuZnJvbSBzdGF0IGltcG9ydCBTVF9NT0RFXG5mcm9tIGRpc3R1dGlscyBpbXBvcnQgc3lzY29uZmlnXG5mcm9tIGRpc3R1dGlscy5jb3JlIGltcG9ydCBDb21tYW5kXG5mcm9tIGRpc3R1dGlscy5kZXBfdXRpbCBpbXBvcnQgbmV3ZXJcbmZyb20gZGlzdHV0aWxzLnV0aWwgaW1wb3J0IGNvbnZlcnRfcGF0aFxuZnJvbSBkaXN0dXRpbHMgaW1wb3J0IGxvZ1xuaW1wb3J0IHRva2VuaXplXG5cbiMgY2hlY2sgaWYgUHl0aG9uIGlzIGNhbGxlZCBvbiB0aGUgZmlyc3QgbGluZSB3aXRoIHRoaXMgZXhwcmVzc2lvblxuZmlyc3RfbGluZV9yZSA9IHJlLmNvbXBpbGUoYideIyEuKnB5dGhvblswLTkuXSooWyBcXHRdLiopPyQnKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL3JpY2gvbGl2ZS5weVxuLi4uXG5cbiAgICAgICAgICAgIGZvciBleGNoYW5nZSBpbiBleGNoYW5nZXM6XG4gICAgICAgICAgICAgICAgaWYgZXhjaGFuZ2UgPT0gc2VsZWN0X2V4Y2hhbmdlOlxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC40KVxuICAgICAgICAgICAgICAgIGlmIHJhbmRvbS5yYW5kaW50KDAsIDEwKSA8IDE6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG5leHQoZXhhbXBsZXMpKVxuICAgICAgICAgICAgICAgIGV4Y2hhbmdlX3JhdGVfZGljdFsoc2VsZWN0X2V4Y2hhbmdlLCBleGNoYW5nZSldID0gMjAwIC8gKFxuICAgICAgICAgICAgICAgICAgICAocmFuZG9tLnJhbmRvbSgpICogMzIwKSArIDFcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgaWYgbGVuKGV4Y2hhbmdlX3JhdGVfZGljdCkgPiBsZW4oZXhjaGFuZ2VzKSAtIDE6XG4gICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlX3JhdGVfZGljdC5wb3AobGlzdChleGNoYW5nZV9yYXRlX2RpY3Qua2V5cygpKVswXSlcbiAgICAgICAgICAgICAgICB0YWJsZSA9IFRhYmxlKHRpdGxlPVwiRXhjaGFuZ2UgUmF0ZXNcIilcblxuICAgICAgICAgICAgICAgIHRhYmxlLmFkZF9jb2x1bW4oXCJTb3VyY2UgQ3VycmVuY3lcIilcbiAgICAgICAgICAgICAgICB0YWJsZS5hZGRfY29sdW1uKFwiRGVzdGluYXRpb24gQ3VycmVuY3lcIilcbiAgICAgICAgICAgICAgICB0YWJsZS5hZGRfY29sdW1uKFwiRXhjaGFuZ2UgUmF0ZVwiKVxuXG4gICAgICAgICAgICAgICAgZm9yICgoc291cmNlLCBkZXN0KSwgZXhjaGFuZ2VfcmF0ZSkgaW4gZXhjaGFuZ2VfcmF0ZV9kaWN0Lml0ZW1zKCk6XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLmFkZF9yb3coXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmXCJ7ZXhjaGFuZ2VfcmF0ZTouNGZ9XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJyZWRcIiBpZiBleGNoYW5nZV9yYXRlIDwgMS4wIGVsc2UgXCJncmVlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgbGl2ZV90YWJsZS51cGRhdGUoQWxpZ24uY2VudGVyKHRhYmxlKSlcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX3ZlbmRvci9yaWNoL2RlZmF1bHRfc3R5bGVzLnB5XG4uLi5cblxuXG5pZiBfX25hbWVfXyA9PSBcIl9fbWFpbl9fXCI6ICAjIHByYWdtYTogbm8gY292ZXJcbiAgICBpbXBvcnQgYXJncGFyc2VcbiAgICBpbXBvcnQgaW9cblxuICAgIGZyb20gcGlwLl92ZW5kb3IucmljaC5jb25zb2xlIGltcG9ydCBDb25zb2xlXG4gICAgZnJvbSBwaXAuX3ZlbmRvci5yaWNoLnRhYmxlIGltcG9ydCBUYWJsZVxuICAgIGZyb20gcGlwLl92ZW5kb3IucmljaC50ZXh0IGltcG9ydCBUZXh0XG5cbiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigpXG4gICAgcGFyc2VyLmFkZF9hcmd1bWVudChcIi0taHRtbFwiLCBhY3Rpb249XCJzdG9yZV90cnVlXCIsIGhlbHA9XCJFeHBvcnQgYXMgSFRNTCB0YWJsZVwiKVxuICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpXG4gICAgaHRtbDogYm9vbCA9IGFyZ3MuaHQuLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFTcUwzOGlyaDdHVXY3ejZUb0h0OEZwIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSBjaGVjayBpZiB0aGVyZSdzIGEgRGphbmdvIHByb2plY3Qgc3RydWN0dXJlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImI3M2VlYjE0LWM2OTktNDlmYi1iYzQ4LTlkNjcyNTIyMDhkZCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVBiNmFQNW5pS0hYOTJ5cXpLcGQyRWsiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwiZmluZCAuIC10eXBlIGYgLW5hbWUgXFxcInJlcXVpcmVtZW50cy50eHRcXFwiIC1vIC1uYW1lIFxcXCJtYW5hZ2UucHlcXFwiIC1vIC1uYW1lIFxcXCJzZXR0aW5ncy5weVxcXCIgLW8gLW5hbWUgXFxcInVybHMucHlcXFwiXCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMzB9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQgbWUgY2hlY2sgZm9yIGFueSByZXF1aXJlbWVudHMudHh0IGZpbGUgb3IgYW55IG90aGVyIHByb2plY3QgY29uZmlndXJhdGlvbiBmaWxlczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL192ZW5kb3IvcGVwNTE3L2NoZWNrLnB5XG4uLi5cblxuXG5kZWYgY2hlY2soc291cmNlX2Rpcik6XG4gICAgcHlwcm9qZWN0ID0gcGpvaW4oc291cmNlX2RpciwgJ3B5cHJvamVjdC50b21sJylcbiAgICBpZiBpc2ZpbGUocHlwcm9qZWN0KTpcbiAgICAgICAgbG9nLmluZm8oJ0ZvdW5kIHB5cHJvamVjdC50b21sJylcbiAgICBlbHNlOlxuICAgICAgICBsb2cuZXJyb3IoJ01pc3NpbmcgcHlwcm9qZWN0LnRvbWwnKVxuICAgICAgICByZXR1cm4gRmFsc2VcblxuICAgIHRyeTpcbiAgICAgICAgd2l0aCBpby5vcGVuKHB5cHJvamVjdCwgJ3JiJykgYXMgZjpcbiAgICAgICAgICAgIHB5cHJvamVjdF9kYXRhID0gdG9tbF9sb2FkKGYpXG4gICAgICAgICMgRW5zdXJlIHRoZSBtYW5kYXRvcnkgZGF0YSBjYW4gYmUgbG9hZGVkXG4gICAgICAgIGJ1aWxkc3lzID0gcHlwcm9qZWN0X2RhdGFbJ2J1aWxkLXN5c3RlbSddXG4gICAgICAgIHJlcXVpcmVzID0gYnVpbGRzeXNbJ3JlcXVpcmVzJ11cbiAgICAgICAgYmFja2VuZCA9IGJ1aWxkc3lzWydidWlsZC1iYWNrZW5kJ11cbiAgICAgICAgYmFja2VuZF9wYXRoID0gYnVpbGRzeXMuZ2V0KCdiYWNrZW5kLXBhdGgnKVxuICAgICAgICBsb2cuaW5mbygnTG9hZGVkIHB5cHJvamVjdC50b21sJylcbiAgICBleGNlcHQgKFRPTUxEZWNvZGVFcnJvciwgS2V5RXJyb3IpOlxuICAgICAgICBsb2cuZXJyb3IoXCJJbnZhbGlkIHB5cHJvamVjdC50b21sXCIsIGV4Y19pbmZvPVRydWUpXG4gICAgICAgIHJldHVybiBGYWxzZVxuXG4gICAgaG9va3MgPSBQZXA1MTdIb29rQ2FsbGVyKHNvdXJjZV9kaXIsIGJhY2tlbmQsIGJhY2tlbmRfcGF0aClcblxuICAgIHNkaXN0X29rID0gY2hlY2tfYnVpbGRfc2Rpc3QoaG9va3MsIHJlcXVpcmVzKVxuICAgIHdoZWVsX29rID0gY2hlY2tfYnVpbGRfd2hlZWwoaG9va3MsIHJlcXVpcmVzKVxuXG4gICAgaWYgbm90IHNkaXN0X29rOlxuICAgICAgICBsb2cud2FybmluZygnU2Rpc3QgY2hlY2tzIGZhaWxlZDsgc2Nyb2xsIHVwIHRvIHNlZScpXG4gICAgaWYgbm90IHdoZWVsX29rOlxuICAgICAgICBsb2cud2FybmluZygnV2hlZWwgY2hlY2tzIGZhaWxlZCcpXG5cbiAgICByZXR1cm4gc2Rpc3Rfb2tcblxuXG5kZWYgbWFpbihhcmd2PU5vbmUpOlxuICAgIGxvZy53YXJuaW5nKCdwZXA1MTcuY2hlY2sgaXMgZGVwcmVjYXRlZC4gJ1xuICAgICAgICAgICAgICAgICdDb25zaWRlciBzd2l0Y2hpbmcgdG8gaHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L2J1aWxkLycpXG5cbiAgICBhcCA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKClcbiAgICBhcC5hZGRfYXJndW1lbnQoXG4gICAgICAgICdzb3VyY2VfZGlyJyxcbiAgICAgICAgaGVscD1cIkEgZGlyZWN0b3J5IGNvbnRhaW5pbmcgcHlwcm9qZWN0LnRvbWxcIilcbiAgICBhcmdzID0gYXAucGFyc2VfYXJncyhhcmd2KVxuXG4gICAgZW5hYmxlX2NvbG91cmZ1bF9vdXRwdXQoKVxuXG4gICAgb2sgPSBjaGVjayhhcmdzLnNvdXJjZV9kaXIpXG5cbiAgICBpZiBvazpcbiAgICAgICAgcHJpbnQoYW5zaSgnQ2hlY2tzIHBhc3NlZCcsICdncmVlbicpKVxuICAgIGVsc2U6XG4gICAgICAgIHByaW50KGFuc2koJ0NoZWNrcyBmYWlsZWQnLCAncmVkJykpXG4gICAgICAgIHN5cy5leGl0KDEpXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9weXZlbnYuY2ZnXG5ob21lID0gL29wdC9hbmFjb25kYTMvYmluXG5pbmNsdWRlLXN5c3RlbS1zaXRlLXBhY2thZ2VzID0gZmFsc2VcbnZlcnNpb24gPSAzLjkuMTNcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX2ludGVybmFsL3B5cHJvamVjdC5weVxuaW1wb3J0IG9zXG5mcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBuYW1lZHR1cGxlXG5mcm9tIHR5cGluZyBpbXBvcnQgQW55LCBMaXN0LCBPcHRpb25hbFxuXG5mcm9tIHBpcC5fdmVuZG9yIGltcG9ydCB0b21saVxuZnJvbSBwaXAuX3ZlbmRvci5wYWNrYWdpbmcucmVxdWlyZW1lbnRzIGltcG9ydCBJbnZhbGlkUmVxdWlyZW1lbnQsIFJlcXVpcmVtZW50XG5cbmZyb20gcGlwLl9pbnRlcm5hbC5leGNlcHRpb25zIGltcG9ydCAoXG4gICAgSW5zdGFsbGF0aW9uRXJyb3IsXG4gICAgSW52YWxpZFB5UHJvamVjdEJ1aWxkUmVxdWlyZXMsXG4gICAgTWlzc2luZ1B5UHJvamVjdEJ1aWxkUmVxdWlyZXMsXG4pXG5cblxuZGVmIF9pc19saXN0X29mX3N0cihvYmo6IEFueSkgLT4gYm9vbDpcbiAgICByZXR1cm4gaXNpbnN0YW5jZShvYmosIGxpc3QpIGFuZCBhbGwoaXNpbnN0YW5jZShpdGVtLCBzdHIpIGZvciBpdGVtIGluIG9iailcblxuXG5kZWYgbWFrZV9weXByb2plY3RfcGF0aCh1bnBhY2tlZF9zb3VyY2VfZGlyZWN0b3J5OiBzdHIpIC0+IHN0cjpcbiAgICByZXR1cm4gb3MucGF0aC5qb2luKHVucGFja2VkX3NvdXJjZV9kaXJlY3RvcnksIFwicHlwcm9qZWN0LnRvbWxcIilcblxuXG5CdWlsZFN5c3RlbURldGFpbHMgPSBuYW1lZHR1cGxlKFxuICAgIFwiQnVpbGRTeXN0ZW1EZXRhaWxzXCIsIFtcInJlcXVpcmVzXCIsIFwiYmFja2VuZFwiLCBcImNoZWNrXCIsIFwiYmFja2VuZF9wYXRoXCJdXG4pXG5cblxuZGVmIGxvYWRfcHlwcm9qZWN0X3RvbWwoXG4gICAgdXNlX3BlcDUxNzogT3B0aW9uYWxbYm9vbF0sIHB5cHJvamVjdF90b21sOiBzdHIsIHNldHVwX3B5OiBzdHIsIHJlcV9uYW1lOiBzdHJcbikgLT4gT3B0aW9uYWxbQnVpbGRTeXN0ZW1EZXRhaWxzXTpcbiAgICBcIlwiXCJMb2FkIHRoZSBweXByb2plY3QudG9tbCBmaWxlLlxuXG4gICAgUGFyYW1ldGVyczpcbiAgICAgICAgdXNlX3BlcDUxNyAtIEhhcyB0aGUgdXNlciByZXF1ZXN0ZWQgUEVQIDUxNyBwcm9jZXNzaW5nPyBOb25lXG4gICAgICAgICAgICAgICAgICAgICBtZWFucyB0aGUgdXNlciBoYXNuJ3QgZXhwbGljaXRseSBzcGVjaWZpZWQuXG4gICAgICAgIHB5cHJvamVjdF90b21sIC0gTG9jYXRpb24gb2YgdGhlIHByb2plY3QncyBweXByb2plY3QudG9tbCBmaWxlXG4gICAgICAgIHNldHVwX3B5IC0gTG9jYXRpb24gb2YgdGhlIHByb2plY3QncyBzZXR1cC5weSBmaWxlXG4gICAgICAgIHJlcV9uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHJlcXVpcmVtZW50IHdlJ3JlIHByb2Nlc3NpbmcgKGZvclxuICAgICAgICAgICAgICAgICAgIGVycm9yIHJlcG9ydGluZylcblxuICAgIFJldHVybnM6XG4gICAgICAgIE5vbmUgaWYgd2Ugc2hvdWxkIHVzZSB0aGUgbGVnYWN5IGNvZGUgcGF0aCwgb3RoZXJ3aXNlIGEgdHVwbGVcbiAgICAgICAgKFxuICAgICAgICAgICAgcmVxdWlyZW1lbnRzIGZyb20gcHlwcm9qZWN0LnRvbWwsXG4gICAgICAgICAgICBuYW1lIG9mIFBFUCA1MTcgYmFja2VuZCxcbiAgICAgICAgICAgIHJlcXVpcmVtZW50cyB3ZSBzaG91bGQgY2hlY2sgYXJlIGluc3RhbGxlZCBhZnRlciBzZXR0aW5nXG4gICAgICAgICAgICAgICAgdXAgdGhlIGJ1aWxkIGVudmlyb25tZW50XG4gICAgICAgICAgICBkaXJlY3RvcnkgcGF0aHMgdG8gaW1wb3J0IHRoZSBiYWNrZW5kIGZyb20gKGJhY2tlbmQtcGF0aCksXG4gICAgICAgICAgICAgICAgcmVsYXRpdmUgdG8gdGhlIHByb2plY3Qgcm9vdC5cbiAgICAgICAgKVxuICAgIFwiXCJcIlxuICAgIGhhc19weXByb2plY3QgPSBvcy5wYXRoLmlzZmlsZShweXByb2plY3RfdG9tbClcbiAgICBoYXNfc2V0dXAgPSBvcy5wYXRoLmlzZmlsZShzZXR1cF9weSlcblxuICAgIGlmIG5vdCBoYXNfcHlwcm9qZWN0IGFuZCBub3QgaGFzX3NldHVwOlxuICAgICAgICByYWlzZSBJbnN0YWxsYXRpb25FcnJvcihcbiAgICAgICAgICAgIGZcIntyZXFfbmFtZX0gZG9lcyBub3QgYXBwZWFyIHRvIGJlIGEgUHl0aG9uIHByb2plY3Q6IFwiXG4gICAgICAgICAgICBmXCJuZWl0aGVyICdzZXR1cC5weScgbm9yICdweXByb2plY3QudG9tbCcgZm91bmQuXCJcbiAgICAgICAgKVxuXG4gICAgaWYgaGFzX3B5cHJvamVjdDpcbiAgICAgICAgd2l0aCBvcGVuKHB5cHJvamVjdF90b21sLCBlbmNvZGluZz1cInV0Zi04XCIpIGFzIGY6XG4gICAgICAgICAgICBwcF90b21sID0gdG9tbGkubG9hZHMoZi5yZWFkKCkpXG4gICAgICAgIGJ1aWxkX3N5c3RlbSA9IHBwX3RvbWwuZ2V0KFwiYnVpbGQtc3lzdGVtXCIpXG4gICAgZWxzZTpcbiAgICAgICAgYnVpbGRfc3lzdGVtID0gTm9uZVxuLi4uXG5cbiAgICBpZiBidWlsZF9zeXN0ZW0gaXMgTm9uZTpcbiAgICAgICAgIyBFaXRoZXIgdGhlIHVzZXIgaGFzIGEgcHlwcm9qZWN0LnRvbWwgd2l0aCBubyBidWlsZC1zeXN0ZW1cbiAgICAgICAgIyBzZWN0aW9uLCBvciB0aGUgdXNlciBoYXMgbm8gcHlwcm9qZWN0LnRvbWwsIGJ1dCBoYXMgb3B0ZWQgaW5cbiAgICAgICAgIyBleHBsaWNpdGx5IHZpYSAtLXVzZS1wZXA1MTcuXG4gICAgICAgICMgSW4gdGhlIGFic2VuY2Ugb2YgYW55IGV4cGxpY2l0IGJhY2tlbmQgc3BlY2lmaWNhdGlvbiwgd2VcbiAgICAgICAgIyBhc3N1bWUgdGhlIHNldHVwdG9vbHMgYmFja2VuZCB0aGF0IG1vc3QgY2xvc2VseSBlbXVsYXRlcyB0aGVcbiAgICAgICAgIyB0cmFkaXRpb25hbCBkaXJlY3Qgc2V0dXAucHkgZXhlY3V0aW9uLCBhbmQgcmVxdWlyZSB3aGVlbCBhbmRcbiAgICAgICAgIyBhIHZlcnNpb24gb2Ygc2V0dXB0b29scyB0aGF0IHN1cHBvcnRzIHRoYXQgYmFja2VuZC5cblxuICAgICAgICBidWlsZF9zeXN0ZW0gPSB7XG4gICAgICAgICAgICBcInJlcXVpcmVzXCI6IFtcInNldHVwdG9vbHM+PTQwLjguMFwiLCBcIndoZWVsXCJdLFxuICAgICAgICAgICAgXCJidWlsZC1iYWNrZW5kXCI6IFwic2V0dXB0b29scy5idWlsZF9tZXRhOl9fbGVnYWN5X19cIixcbiAgICAgICAgfVxuLi4uXG4gICAgICAgICMgZXhlY3V0ZSBzZXR1cC5weSwgYnV0IG5ldmVyIGNvbnNpZGVyZWQgbmVlZGluZyB0byBtZW50aW9uIHRoZSBidWlsZFxuICAgICAgICAjIHRvb2xzIHRoZW1zZWx2ZXMuIFRoZSBvcmlnaW5hbCBQRVAgNTE4IGNvZGUgaGFkIGEgc2ltaWxhciBjaGVjayAoYnV0XG4gICAgICAgICMgaW1wbGVtZW50ZWQgaW4gYSBkaWZmZXJlbnQgd2F5KS5cbiAgICAgICAgYmFja2VuZCA9IFwic2V0dXB0b29scy5idWlsZF9tZXRhOl9fbGVnYWN5X19cIlxuICAgICAgICBjaGVjayA9IFtcInNldHVwdG9vbHM+PTQwLjguMFwiLCBcIndoZWVsXCJdXG5cbiAgICByZXR1cm4gQnVpbGRTeXN0ZW1EZXRhaWxzKHJlcXVpcmVzLCBiYWNrZW5kLCBjaGVjaywgYmFja2VuZF9wYXRoKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvYmluL3BpcFxuIyEvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9weXRob25cbiMgLSotIGNvZGluZzogdXRmLTggLSotXG5pbXBvcnQgcmVcbmltcG9ydCBzeXNcbmZyb20gcGlwLl9pbnRlcm5hbC5jbGkubWFpbiBpbXBvcnQgbWFpblxuaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzpcbiAgICBzeXMuYXJndlswXSA9IHJlLnN1YihyJygtc2NyaXB0XFwucHl3fFxcLmV4ZSk/JCcsICcnLCBzeXMuYXJndlswXSlcbiAgICBzeXMuZXhpdChtYWluKCkpXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvX2Rpc3R1dGlsc19oYWNrL19faW5pdF9fLnB5XG4uLi5cblxuXG5kZWYgY2xlYXJfZGlzdHV0aWxzKCk6XG4gICAgaWYgJ2Rpc3R1dGlscycgbm90IGluIHN5cy5tb2R1bGVzOlxuICAgICAgICByZXR1cm5cbiAgICB3YXJuaW5ncy53YXJuKFwiU2V0dXB0b29scyBpcyByZXBsYWNpbmcgZGlzdHV0aWxzLlwiKVxuICAgIG1vZHMgPSBbbmFtZSBmb3IgbmFtZSBpbiBzeXMubW9kdWxlcyBpZiByZS5tYXRjaChyJ2Rpc3R1dGlsc1xcYicsIG5hbWUpXVxuICAgIGZvciBuYW1lIGluIG1vZHM6XG4gICAgICAgIGRlbCBzeXMubW9kdWxlc1tuYW1lXVxuXG5cbmRlZiBlbmFibGVkKCk6XG4gICAgXCJcIlwiXG4gICAgQWxsb3cgc2VsZWN0aW9uIG9mIGRpc3R1dGlscyBieSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAgICBcIlwiXCJcbiAgICB3aGljaCA9IG9zLmVudmlyb24uZ2V0KCdTRVRVUFRPT0xTX1VTRV9ESVNUVVRJTFMnLCAnc3RkbGliJylcbiAgICByZXR1cm4gd2hpY2ggPT0gJ2xvY2FsJ1xuXG5cbmRlZiBlbnN1cmVfbG9jYWxfZGlzdHV0aWxzKCk6XG4gICAgY2xlYXJfZGlzdHV0aWxzKClcbiAgICBkaXN0dXRpbHMgPSBpbXBvcnRsaWIuaW1wb3J0X21vZHVsZSgnc2V0dXB0b29scy5fZGlzdHV0aWxzJylcbiAgICBkaXN0dXRpbHMuX19uYW1lX18gPSAnZGlzdHV0aWxzJ1xuICAgIHN5cy5tb2R1bGVzWydkaXN0dXRpbHMnXSA9IGRpc3R1dGlsc1xuXG4gICAgIyBzYW5pdHkgY2hlY2sgdGhhdCBzdWJtb2R1bGVzIGxvYWQgYXMgZXhwZWN0ZWRcbiAgICBjb3JlID0gaW1wb3J0bGliLmltcG9ydF9tb2R1bGUoJ2Rpc3R1dGlscy5jb3JlJylcbiAgICBhc3NlcnQgJ19kaXN0dXRpbHMnIGluIGNvcmUuX19maWxlX18sIGNvcmUuX19maWxlX19cbi4uLlxuXG4gICAgQHN0YXRpY21ldGhvZFxuICAgIGRlZiBwaXBfaW1wb3J0ZWRfZHVyaW5nX2J1aWxkKCk6XG4gICAgICAgIFwiXCJcIlxuICAgICAgICBEZXRlY3QgaWYgcGlwIGlzIGJlaW5nIGltcG9ydGVkIGluIGEgYnVpbGQgc2NyaXB0LiBSZWYgIzIzNTUuXG4gICAgICAgIFwiXCJcIlxuICAgICAgICBpbXBvcnQgdHJhY2ViYWNrXG4gICAgICAgIHJldHVybiBhbnkoXG4gICAgICAgICAgICBmcmFtZS5mX2dsb2JhbHNbJ19fZmlsZV9fJ10uZW5kc3dpdGgoJ3NldHVwLnB5JylcbiAgICAgICAgICAgIGZvciBmcmFtZSwgbGluZSBpbiB0cmFjZWJhY2sud2Fsa19zdGFjayhOb25lKVxuICAgICAgICApXG5cblxuRElTVFVUSUxTX0ZJTkRFUiA9IERpc3R1dGlsc01ldGFGaW5kZXIoKVxuXG5cbmRlZiBhZGRfc2hpbSgpOlxuICAgIHN5cy5tZXRhX3BhdGguaW5zZXJ0KDAsIERJU1RVVElMU19GSU5ERVIpXG5cblxuZGVmIHJlbW92ZV9zaGltKCk6XG4gICAgdHJ5OlxuICAgICAgICBzeXMubWV0YV9wYXRoLnJlbW92ZShESVNUVVRJTFNfRklOREVSKVxuICAgIGV4Y2VwdCBWYWx1ZUVycm9yOlxuICAgICAgICBwYXNzXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvc2V0dXB0b29scy9zY3JpcHQudG1wbFxuIyBFQVNZLUlOU1RBTEwtU0NSSVBUOiAlKHNwZWMpciwlKHNjcmlwdF9uYW1lKXJcbl9fcmVxdWlyZXNfXyA9ICUoc3BlYylyXG5fX2ltcG9ydF9fKCdwa2dfcmVzb3VyY2VzJykucnVuX3NjcmlwdCglKHNwZWMpciwgJShzY3JpcHRfbmFtZSlyKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL3BlcDUxNy9idWlsZC5weVxuLi4uXG5cblxuZGVmIGxvYWRfc3lzdGVtKHNvdXJjZV9kaXIpOlxuICAgIFwiXCJcIlxuICAgIExvYWQgdGhlIGJ1aWxkIHN5c3RlbSBmcm9tIGEgc291cmNlIGRpciAocHlwcm9qZWN0LnRvbWwpLlxuICAgIFwiXCJcIlxuICAgIHB5cHJvamVjdCA9IG9zLnBhdGguam9pbihzb3VyY2VfZGlyLCAncHlwcm9qZWN0LnRvbWwnKVxuICAgIHdpdGggaW8ub3BlbihweXByb2plY3QsICdyYicpIGFzIGY6XG4gICAgICAgIHB5cHJvamVjdF9kYXRhID0gdG9tbF9sb2FkKGYpXG4gICAgcmV0dXJuIHB5cHJvamVjdF9kYXRhWydidWlsZC1zeXN0ZW0nXVxuXG5cbmRlZiBjb21wYXRfc3lzdGVtKHNvdXJjZV9kaXIpOlxuICAgIFwiXCJcIlxuICAgIEdpdmVuIGEgc291cmNlIGRpciwgYXR0ZW1wdCB0byBnZXQgYSBidWlsZCBzeXN0ZW0gYmFja2VuZFxuICAgIGFuZCByZXF1aXJlbWVudHMgZnJvbSBweXByb2plY3QudG9tbC4gRmFsbGJhY2sgdG9cbiAgICBzZXR1cHRvb2xzIGJ1dCBvbmx5IGlmIHRoZSBmaWxlIHdhcyBub3QgZm91bmQgb3IgYSBidWlsZFxuICAgIHN5c3RlbSB3YXMgbm90IGluZGljYXRlZC5cbiAgICBcIlwiXCJcbiAgICB0cnk6XG4gICAgICAgIHN5c3RlbSA9IGxvYWRfc3lzdGVtKHNvdXJjZV9kaXIpXG4gICAgZXhjZXB0IChGaWxlTm90Rm91bmRFcnJvciwgS2V5RXJyb3IpOlxuICAgICAgICBzeXN0ZW0gPSB7fVxuICAgIHN5c3RlbS5zZXRkZWZhdWx0KFxuICAgICAgICAnYnVpbGQtYmFja2VuZCcsXG4gICAgICAgICdzZXR1cHRvb2xzLmJ1aWxkX21ldGE6X19sZWdhY3lfXycsXG4gICAgKVxuICAgIHN5c3RlbS5zZXRkZWZhdWx0KCdyZXF1aXJlcycsIFsnc2V0dXB0b29scycsICd3aGVlbCddKVxuICAgIHJldHVybiBzeXN0ZW1cbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9waXAzXG4jIS9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvYmluL3B5dGhvblxuIyAtKi0gY29kaW5nOiB1dGYtOCAtKi1cbmltcG9ydCByZVxuaW1wb3J0IHN5c1xuZnJvbSBwaXAuX2ludGVybmFsLmNsaS5tYWluIGltcG9ydCBtYWluXG5pZiBfX25hbWVfXyA9PSAnX19tYWluX18nOlxuICAgIHN5cy5hcmd2WzBdID0gcmUuc3ViKHInKC1zY3JpcHRcXC5weXd8XFwuZXhlKT8kJywgJycsIHN5cy5hcmd2WzBdKVxuICAgIHN5cy5leGl0KG1haW4oKSlcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9BY3RpdmF0ZS5wczFcbi4uLlxuXG4uUGFyYW1ldGVyIENvbmZpZ0RpclxuUGF0aCB0byB0aGUgZGlyZWN0b3J5IHRoYXQgY29udGFpbnMgdGhlIGBweXZlbnYuY2ZnYCBmaWxlLlxuIz5cbmZ1bmN0aW9uIEdldC1QeVZlbnZDb25maWcoXG4gICAgW1N0cmluZ11cbiAgICAkQ29uZmlnRGlyXG4pIHtcbiAgICBXcml0ZS1WZXJib3NlIFwiR2l2ZW4gQ29uZmlnRGlyPSRDb25maWdEaXIsIG9idGFpbiB2YWx1ZXMgaW4gcHl2ZW52LmNmZ1wiXG5cbiAgICAjIEVuc3VyZSB0aGUgZmlsZSBleGlzdHMsIGFuZCBpc3N1ZSBhIHdhcm5pbmcgaWYgaXQgZG9lc24ndCAoYnV0IHN0aWxsIGFsbG93IHRoZSBmdW5jdGlvbiB0byBjb250aW51ZSkuXG4gICAgJHB5dmVudkNvbmZpZ1BhdGggPSBKb2luLVBhdGggLVJlc29sdmUgLVBhdGggJENvbmZpZ0RpciAtQ2hpbGRQYXRoICdweXZlbnYuY2ZnJyAtRXJyb3JBY3Rpb24gQ29udGludWVcblxuICAgICMgQW4gZW1wdHkgbWFwIHdpbGwgYmUgcmV0dXJuZWQgaWYgbm8gY29uZmlnIGZpbGUgaXMgZm91bmQuXG4gICAgJHB5dmVudkNvbmZpZyA9IEB7IH1cbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9waXAzLjlcbiMhL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9iaW4vcHl0aG9uXG4jIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuaW1wb3J0IHJlXG5pbXBvcnQgc3lzXG5mcm9tIHBpcC5faW50ZXJuYWwuY2xpLm1haW4gaW1wb3J0IG1haW5cbmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6XG4gICAgc3lzLmFyZ3ZbMF0gPSByZS5zdWIocicoLXNjcmlwdFxcLnB5d3xcXC5leGUpPyQnLCAnJywgc3lzLmFyZ3ZbMF0pXG4gICAgc3lzLmV4aXQobWFpbigpKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3NldHVwdG9vbHMvc2NyaXB0IChkZXYpLnRtcGxcbiMgRUFTWS1JTlNUQUxMLURFVi1TQ1JJUFQ6ICUoc3BlYylyLCUoc2NyaXB0X25hbWUpclxuX19yZXF1aXJlc19fID0gJShzcGVjKXJcbl9faW1wb3J0X18oJ3BrZ19yZXNvdXJjZXMnKS5yZXF1aXJlKCUoc3BlYylyKVxuX19maWxlX18gPSAlKGRldl9wYXRoKXJcbndpdGggb3BlbihfX2ZpbGVfXykgYXMgZjpcbiAgICBleGVjKGNvbXBpbGUoZi5yZWFkKCksIF9fZmlsZV9fLCAnZXhlYycpKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL2Rpc3RsaWIvdXRpbC5weVxuLi4uXG5cbl9leHRlcm5hbF9kYXRhX2Jhc2VfdXJsID0gJ2h0dHBzOi8vd3d3LnJlZC1kb3ZlLmNvbS9weXBpL3Byb2plY3RzLydcblxuZGVmIGdldF9wcm9qZWN0X2RhdGEobmFtZSk6XG4gICAgdXJsID0gJyVzLyVzL3Byb2plY3QuanNvbicgJSAobmFtZVswXS51cHBlcigpLCBuYW1lKVxuICAgIHVybCA9IHVybGpvaW4oX2V4dGVybmFsX2RhdGFfYmFzZV91cmwsIHVybClcbiAgICByZXN1bHQgPSBfZ2V0X2V4dGVybmFsX2RhdGEodXJsKVxuICAgIHJldHVybiByZXN1bHRcblxuZGVmIGdldF9wYWNrYWdlX2RhdGEobmFtZSwgdmVyc2lvbik6XG4gICAgdXJsID0gJyVzLyVzL3BhY2thZ2UtJXMuanNvbicgJSAobmFtZVswXS51cHBlcigpLCBuYW1lLCB2ZXJzaW9uKVxuICAgIHVybCA9IHVybGpvaW4oX2V4dGVybmFsX2RhdGFfYmFzZV91cmwsIHVybClcbiAgICByZXR1cm4gX2dldF9leHRlcm5hbF9kYXRhKHVybClcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL2NvbW1hbmQvc2V0b3B0LnB5XG4uLi5cblxuXG5kZWYgY29uZmlnX2ZpbGUoa2luZD1cImxvY2FsXCIpOlxuICAgIFwiXCJcIkdldCB0aGUgZmlsZW5hbWUgb2YgdGhlIGRpc3R1dGlscywgbG9jYWwsIGdsb2JhbCwgb3IgcGVyLXVzZXIgY29uZmlnXG5cbiAgICBga2luZGAgbXVzdCBiZSBvbmUgb2YgXCJsb2NhbFwiLCBcImdsb2JhbFwiLCBvciBcInVzZXJcIlxuICAgIFwiXCJcIlxuICAgIGlmIGtpbmQgPT0gJ2xvY2FsJzpcbiAgICAgICAgcmV0dXJuICdzZXR1cC5jZmcnXG4gICAgaWYga2luZCA9PSAnZ2xvYmFsJzpcbiAgICAgICAgcmV0dXJuIG9zLnBhdGguam9pbihcbiAgICAgICAgICAgIG9zLnBhdGguZGlybmFtZShkaXN0dXRpbHMuX19maWxlX18pLCAnZGlzdHV0aWxzLmNmZydcbiAgICAgICAgKVxuICAgIGlmIGtpbmQgPT0gJ3VzZXInOlxuICAgICAgICBkb3QgPSBvcy5uYW1lID09ICdwb3NpeCcgYW5kICcuJyBvciAnJ1xuICAgICAgICByZXR1cm4gb3MucGF0aC5leHBhbmR1c2VyKGNvbnZlcnRfcGF0aChcIn4vJXNweWRpc3R1dGlscy5jZmdcIiAlIGRvdCkpXG4gICAgcmFpc2UgVmFsdWVFcnJvcihcbiAgICAgICAgXCJjb25maWdfZmlsZSgpIHR5cGUgbXVzdCBiZSAnbG9jYWwnLCAnZ2xvYmFsJywgb3IgJ3VzZXInXCIsIGtpbmRcbiAgICApXG5cblxuZGVmIGVkaXRfY29uZmlnKGZpbGVuYW1lLCBzZXR0aW5ncywgZHJ5X3J1bj1GYWxzZSk6XG4gICAgXCJcIlwiRWRpdCBhIGNvbmZpZ3VyYXRpb24gZmlsZSB0byBpbmNsdWRlIGBzZXR0aW5nc2Bcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX2ludGVybmFsL3V0aWxzL3VybHMucHlcbmltcG9ydCBvc1xuaW1wb3J0IHN0cmluZ1xuaW1wb3J0IHVybGxpYi5wYXJzZVxuaW1wb3J0IHVybGxpYi5yZXF1ZXN0XG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWxcblxuZnJvbSAuY29tcGF0IGltcG9ydCBXSU5ET1dTXG5cblxuZGVmIGdldF91cmxfc2NoZW1lKHVybDogc3RyKSAtPiBPcHRpb25hbFtzdHJdOlxuICAgIGlmIFwiOlwiIG5vdCBpbiB1cmw6XG4gICAgICAgIHJldHVybiBOb25lXG4gICAgcmV0dXJuIHVybC5zcGxpdChcIjpcIiwgMSlbMF0ubG93ZXIoKVxuXG5cbmRlZiBwYXRoX3RvX3VybChwYXRoOiBzdHIpIC0+IHN0cjpcbiAgICBcIlwiXCJcbiAgICBDb252ZXJ0IGEgcGF0aCB0byBhIGZpbGU6IFVSTC4gIFRoZSBwYXRoIHdpbGwgYmUgbWFkZSBhYnNvbHV0ZSBhbmQgaGF2ZVxuICAgIHF1b3RlZCBwYXRoIHBhcnRzLlxuICAgIFwiXCJcIlxuICAgIHBhdGggPSBvcy5wYXRoLm5vcm1wYXRoKG9zLnBhdGguYWJzcGF0aChwYXRoKSlcbiAgICB1cmwgPSB1cmxsaWIucGFyc2UudXJsam9pbihcImZpbGU6XCIsIHVybGxpYi5yZXF1ZXN0LnBhdGhuYW1lMnVybChwYXRoKSlcbiAgICByZXR1cm4gdXJsXG5cblxuZGVmIHVybF90b19wYXRoKHVybDogc3RyKSAtPiBzdHI6XG4gICAgXCJcIlwiXG4gICAgQ29udmVydCBhIGZpbGU6IFVSTCB0byBhIHBhdGguXG4gICAgXCJcIlwiXG4gICAgYXNzZXJ0IHVybC5zdGFydHN3aXRoKFxuICAgICAgICBcImZpbGU6XCJcbiAgICApLCBmXCJZb3UgY2FuIG9ubHkgdHVybiBmaWxlOiB1cmxzIGludG8gZmlsZW5hbWVzIChub3Qge3VybCFyfSlcIlxuXG4gICAgXywgbmV0bG9jLCBwYXRoLCBfLCBfID0gdXJsbGliLnBhcnNlLnVybHNwbGl0KHVybClcblxuICAgIGlmIG5vdCBuZXRsb2Mgb3IgbmV0bG9jID09IFwibG9jYWxob3N0XCI6XG4gICAgICAgICMgQWNjb3JkaW5nIHRvIFJGQyA4MDg5LCBzYW1lIGFzIGVtcHR5IGF1dGhvcml0eS5cbiAgICAgICAgbmV0bG9jID0gXCJcIlxuICAgIGVsaWYgV0lORE9XUzpcbiAgICAgICAgIyBJZiB3ZSBoYXZlIGEgVU5DIHBhdGgsIHByZXBlbmQgVU5DIHNoYXJlIG5vdGF0aW9uLlxuICAgICAgICBuZXRsb2MgPSBcIlxcXFxcXFxcXCIgKyBuZXRsb2NcbiAgICBlbHNlOlxuICAgICAgICByYWlzZSBWYWx1ZUVycm9yKFxuICAgICAgICAgICAgZlwibm9uLWxvY2FsIGZpbGUgVVJJcyBhcmUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtOiB7dXJsIXJ9XCJcbiAgICAgICAgKVxuXG4gICAgcGF0aCA9IHVybGxpYi5yZXF1ZXN0LnVybDJwYXRobmFtZShuZXRsb2MgKyBwYXRoKVxuXG4gICAgIyBPbiBXaW5kb3dzLCB1cmxzcGxpdCBwYXJzZXMgdGhlIHBhdGggYXMgc29tZXRoaW5nIGxpa2UgXCIvQzovVXNlcnMvZm9vXCIuXG4gICAgIyBUaGlzIGNyZWF0ZXMgaXNzdWVzIGZvciBwYXRoLXJlbGF0ZWQgZnVuY3Rpb25zIGxpa2UgaW8ub3BlbigpLCBzbyB3ZSB0cnlcbiAgICAjIHRvIGRldGVjdCBhbmQgc3RyaXAgdGhlIGxlYWRpbmcgc2xhc2guXG4gICAgaWYgKFxuICAgICAgICBXSU5ET1dTXG4gICAgICAgIGFuZCBub3QgbmV0bG9jICAjIE5vdCBVTkMuXG4gICAgICAgIGFuZCBsZW4ocGF0aCkgPj0gM1xuICAgICAgICBhbmQgcGF0aFswXSA9PSBcIi9cIiAgIyBMZWFkaW5nIHNsYXNoIHRvIHN0cmlwLlxuICAgICAgICBhbmQgcGF0aFsxXSBpbiBzdHJpbmcuYXNjaWlfbGV0dGVycyAgIyBEcml2ZSBsZXR0ZXIuXG4gICAgICAgIGFuZCBwYXRoWzI6NF0gaW4gKFwiOlwiLCBcIjovXCIpICAjIENvbG9uICsgZW5kIG9mIHN0cmluZywgb3IgY29sb24gKyBhYnNvbHV0ZSBwYXRoLlxuICAgICk6XG4gICAgICAgIHBhdGggPSBwYXRoWzE6XVxuXG4gICAgcmV0dXJuIHBhdGhcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL19kaXN0dXRpbHMvY29uZmlnLnB5XG5cIlwiXCJkaXN0dXRpbHMucHlwaXJjXG5cblByb3ZpZGVzIHRoZSBQeVBJUkNDb21tYW5kIGNsYXNzLCB0aGUgYmFzZSBjbGFzcyBmb3IgdGhlIGNvbW1hbmQgY2xhc3Nlc1xudGhhdCB1c2VzIC5weXBpcmMgaW4gdGhlIGRpc3R1dGlscy5jb21tYW5kIHBhY2thZ2UuXG5cIlwiXCJcbmltcG9ydCBvc1xuZnJvbSBjb25maWdwYXJzZXIgaW1wb3J0IFJhd0NvbmZpZ1BhcnNlclxuXG5mcm9tIGRpc3R1dGlscy5jbWQgaW1wb3J0IENvbW1hbmRcblxuREVGQVVMVF9QWVBJUkMgPSBcIlwiXCJcXFxuW2Rpc3R1dGlsc11cbmluZGV4LXNlcnZlcnMgPVxuICAgIHB5cGlcblxuW3B5cGldXG51c2VybmFtZTolc1xucGFzc3dvcmQ6JXNcblwiXCJcIlxuLi4uXG5cbiAgICAgICAgICAgIGNvbmZpZyA9IFJhd0NvbmZpZ1BhcnNlcigpXG4gICAgICAgICAgICBjb25maWcucmVhZChyYylcbiAgICAgICAgICAgIHNlY3Rpb25zID0gY29uZmlnLnNlY3Rpb25zKClcbiAgICAgICAgICAgIGlmICdkaXN0dXRpbHMnIGluIHNlY3Rpb25zOlxuICAgICAgICAgICAgICAgICMgbGV0J3MgZ2V0IHRoZSBsaXN0IG9mIHNlcnZlcnNcbiAgICAgICAgICAgICAgICBpbmRleF9zZXJ2ZXJzID0gY29uZmlnLmdldCgnZGlzdHV0aWxzJywgJ2luZGV4LXNlcnZlcnMnKVxuICAgICAgICAgICAgICAgIF9zZXJ2ZXJzID0gW3NlcnZlci5zdHJpcCgpIGZvciBzZXJ2ZXIgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleF9zZXJ2ZXJzLnNwbGl0KCdcXG4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlcnZlci5zdHJpcCgpICE9ICcnXVxuICAgICAgICAgICAgICAgIGlmIF9zZXJ2ZXJzID09IFtdOlxuICAgICAgICAgICAgICAgICAgICAjIG5vdGhpbmcgc2V0LCBsZXQncyB0cnkgdG8gZ2V0IHRoZSBkZWZhdWx0IHB5cGlcbiAgICAgICAgICAgICAgICAgICAgaWYgJ3B5cGknIGluIHNlY3Rpb25zOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3NlcnZlcnMgPSBbJ3B5cGknXVxuICAgICAgICAgICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgICAgICAgICAgIyB0aGUgZmlsZSBpcyBub3QgcHJvcGVybHkgZGVmaW5lZCwgcmV0dXJuaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAjIGFuIGVtcHR5IGRpY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7fVxuICAgICAgICAgICAgICAgIGZvciBzZXJ2ZXIgaW4gX3NlcnZlcnM6XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB7J3NlcnZlcic6IHNlcnZlcn1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFsndXNlcm5hbWUnXSA9IGNvbmZpZy5nZXQoc2VydmVyLCAndXNlcm5hbWUnKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9faW50ZXJuYWwvY29uZmlndXJhdGlvbi5weVxuLi4uXG5mcm9tIHBpcC5faW50ZXJuYWwudXRpbHMgaW1wb3J0IGFwcGRpcnNcbmZyb20gcGlwLl9pbnRlcm5hbC51dGlscy5jb21wYXQgaW1wb3J0IFdJTkRPV1NcbmZyb20gcGlwLl9pbnRlcm5hbC51dGlscy5sb2dnaW5nIGltcG9ydCBnZXRMb2dnZXJcbmZyb20gcGlwLl9pbnRlcm5hbC51dGlscy5taXNjIGltcG9ydCBlbnN1cmVfZGlyLCBlbnVtXG5cblJhd0NvbmZpZ1BhcnNlciA9IGNvbmZpZ3BhcnNlci5SYXdDb25maWdQYXJzZXIgICMgU2hvcnRoYW5kXG5LaW5kID0gTmV3VHlwZShcIktpbmRcIiwgc3RyKVxuXG5DT05GSUdfQkFTRU5BTUUgPSBcInBpcC5pbmlcIiBpZiBXSU5ET1dTIGVsc2UgXCJwaXAuY29uZlwiXG5FTlZfTkFNRVNfSUdOT1JFRCA9IFwidmVyc2lvblwiLCBcImhlbHBcIlxuXG4jIFRoZSBraW5kcyBvZiBjb25maWd1cmF0aW9ucyB0aGVyZSBhcmUuXG5raW5kcyA9IGVudW0oXG4gICAgVVNFUj1cInVzZXJcIiwgICMgVXNlciBTcGVjaWZpY1xuICAgIEdMT0JBTD1cImdsb2JhbFwiLCAgIyBTeXN0ZW0gV2lkZVxuICAgIFNJVEU9XCJzaXRlXCIsICAjIFtWaXJ0dWFsXSBFbnZpcm9ubWVudCBTcGVjaWZpY1xuICAgIEVOVj1cImVudlwiLCAgIyBmcm9tIFBJUF9DT05GSUdfRklMRVxuICAgIEVOVl9WQVI9XCJlbnYtdmFyXCIsICAjIGZyb20gRW52aXJvbm1lbnQgVmFyaWFibGVzXG4pXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2N1c3RvbWVyX2RhdGEuY3N2XG5jdXN0b21lcl9pZCxmaXJzdF9uYW1lLGxhc3RfbmFtZSxlbWFpbCxnZW5kZXIsYWdlLGNpdHksc3RhdGUsc2lnbnVwX2RhdGUsY3VzdG9tZXJfc2VnbWVudCx0b3RhbF9vcmRlcnMsdG90YWxfc3BlbmQsYXZnX29yZGVyX3ZhbHVlLGxhc3RfcHVyY2hhc2VfZGF0ZSxkYXlzX3NpbmNlX2xhc3RfcHVyY2hhc2UsZmF2b3JpdGVfY2F0ZWdvcnksZmF2b3JpdGVfcHJvZHVjdCxlbWFpbF9zdWJzY3JpYmVyLG1vYmlsZV9hcHBfdXNlcixsb3lhbHR5X3RpZXJcbjEwMDEsSm9obixTbWl0aCxqb2huLnNtaXRoQGVtYWlsLmNvbSxNLDM0LE5ldyBZb3JrLE5ZLDIwMjMtMDEtMTUsSGlnaCBWYWx1ZSwxMiwxMjUwLjQ1LDEwNC4yMCwyMDI0LTAxLTAyLDUsTWVuJ3MgU2hpcnRzLFN1bW1lciBMaW5lbiBTaGlydCxUUlVFLFRSVUUsR29sZFxuMTAwMixFbWlseSxKb2huc29uLGVtaWx5LmpAZW1haWwuY29tLEYsMjksTG9zIEFuZ2VsZXMsQ0EsMjAyMy0wMi0wMyxSZWd1bGFyLDgsNjQ1Ljc1LDgwLjcyLDIwMjQtMDEtMDMsNCxXb21lbidzIERyZXNzZXMsRmxvcmFsIFN1bW1lciBEcmVzcyxUUlVFLFRSVUUsU2lsdmVyXG4xMDAzLE1pY2hhZWwsV2lsbGlhbXMsbS53aWxsaWFtc0BlbWFpbC5jb20sTSw0MixDaGljYWdvLElMLDIwMjMtMDEtMjIsSGlnaCBWYWx1ZSwxNSwxODc2LjMwLDEyNS4wOSwyMDI0LTAxLTAxLDYsTWVuJ3MgT3V0ZXJ3ZWFyLFdpbnRlciBDb2F0IENsYXNzaWMsVFJVRSxGQUxTRSxHb2xkXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9iaW4vYWN0aXZhdGVcbiMgVGhpcyBmaWxlIG11c3QgYmUgdXNlZCB3aXRoIFwic291cmNlIGJpbi9hY3RpdmF0ZVwiICpmcm9tIGJhc2gqXG4jIHlvdSBjYW5ub3QgcnVuIGl0IGRpcmVjdGx5XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvZGlzdHV0aWxzLXByZWNlZGVuY2UucHRoXG5pbXBvcnQgb3M7IHZhciA9ICdTRVRVUFRPT0xTX1VTRV9ESVNUVVRJTFMnOyBlbmFibGVkID0gb3MuZW52aXJvbi5nZXQodmFyLCAnc3RkbGliJykgPT0gJ2xvY2FsJzsgZW5hYmxlZCBhbmQgX19pbXBvcnRfXygnX2Rpc3R1dGlsc19oYWNrJykuYWRkX3NoaW0oKTsgXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL19pbnRlcm5hbC9tb2RlbHMvZGlyZWN0X3VybC5weVxuXCJcIlwiIFBFUCA2MTAgXCJcIlwiXG5pbXBvcnQganNvblxuaW1wb3J0IHJlXG5pbXBvcnQgdXJsbGliLnBhcnNlXG5mcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0LCBJdGVyYWJsZSwgT3B0aW9uYWwsIFR5cGUsIFR5cGVWYXIsIFVuaW9uXG5cbl9fYWxsX18gPSBbXG4gICAgXCJEaXJlY3RVcmxcIixcbiAgICBcIkRpcmVjdFVybFZhbGlkYXRpb25FcnJvclwiLFxuICAgIFwiRGlySW5mb1wiLFxuICAgIFwiQXJjaGl2ZUluZm9cIixcbiAgICBcIlZjc0luZm9cIixcbl1cblxuVCA9IFR5cGVWYXIoXCJUXCIpXG5cbkRJUkVDVF9VUkxfTUVUQURBVEFfTkFNRSA9IFwiZGlyZWN0X3VybC5qc29uXCJcbkVOVl9WQVJfUkUgPSByZS5jb21waWxlKHJcIl5cXCRcXHtbQS1aYS16MC05LV9dK1xcfSg6XFwkXFx7W0EtWmEtejAtOS1fXStcXH0pPyRcIilcblxuXG5jbGFzcyBEaXJlY3RVcmxWYWxpZGF0aW9uRXJyb3IoRXhjZXB0aW9uKTpcbiAgICBwYXNzXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvc2V0dXB0b29scy9jb21tYW5kL2RldmVsb3AucHlcbi4uLlxuXG5cbmNsYXNzIGRldmVsb3AobmFtZXNwYWNlcy5EZXZlbG9wSW5zdGFsbGVyLCBlYXN5X2luc3RhbGwpOlxuICAgIFwiXCJcIlNldCB1cCBwYWNrYWdlIGZvciBkZXZlbG9wbWVudFwiXCJcIlxuXG4gICAgZGVzY3JpcHRpb24gPSBcImluc3RhbGwgcGFja2FnZSBpbiAnZGV2ZWxvcG1lbnQgbW9kZSdcIlxuXG4gICAgdXNlcl9vcHRpb25zID0gZWFzeV9pbnN0YWxsLnVzZXJfb3B0aW9ucyArIFtcbiAgICAgICAgKFwidW5pbnN0YWxsXCIsIFwidVwiLCBcIlVuaW5zdGFsbCB0aGlzIHNvdXJjZSBwYWNrYWdlXCIpLFxuICAgICAgICAoXCJlZ2ctcGF0aD1cIiwgTm9uZSwgXCJTZXQgdGhlIHBhdGggdG8gYmUgdXNlZCBpbiB0aGUgLmVnZy1saW5rIGZpbGVcIiksXG4gICAgXVxuXG4gICAgYm9vbGVhbl9vcHRpb25zID0gZWFzeV9pbnN0YWxsLmJvb2xlYW5fb3B0aW9ucyArIFsndW5pbnN0YWxsJ11cblxuICAgIGNvbW1hbmRfY29uc3VtZXNfYXJndW1lbnRzID0gRmFsc2UgICMgb3ZlcnJpZGUgYmFzZVxuXG4gICAgZGVmIHJ1bihzZWxmKTpcbiAgICAgICAgaWYgc2VsZi51bmluc3RhbGw6XG4gICAgICAgICAgICBzZWxmLm11bHRpX3ZlcnNpb24gPSBUcnVlXG4gICAgICAgICAgICBzZWxmLnVuaW5zdGFsbF9saW5rKClcbiAgICAgICAgICAgIHNlbGYudW5pbnN0YWxsX25hbWVzcGFjZXMoKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgc2VsZi5pbnN0YWxsX2Zvcl9kZXZlbG9wbWVudCgpXG4gICAgICAgIHNlbGYud2Fybl9kZXByZWNhdGVkX29wdGlvbnMoKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3NldHVwdG9vbHMvX2Rpc3R1dGlscy9zeXNjb25maWcucHlcblwiXCJcIlByb3ZpZGUgYWNjZXNzIHRvIFB5dGhvbidzIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uICBUaGUgc3BlY2lmaWNcbmNvbmZpZ3VyYXRpb24gdmFyaWFibGVzIGF2YWlsYWJsZSBkZXBlbmQgaGVhdmlseSBvbiB0aGUgcGxhdGZvcm0gYW5kXG5jb25maWd1cmF0aW9uLiAgVGhlIHZhbHVlcyBtYXkgYmUgcmV0cmlldmVkIHVzaW5nXG5nZXRfY29uZmlnX3ZhcihuYW1lKSwgYW5kIHRoZSBsaXN0IG9mIHZhcmlhYmxlcyBpcyBhdmFpbGFibGUgdmlhXG5nZXRfY29uZmlnX3ZhcnMoKS5rZXlzKCkuICBBZGRpdGlvbmFsIGNvbnZlbmllbmNlIGZ1bmN0aW9ucyBhcmUgYWxzb1xuYXZhaWxhYmxlLlxuXG5Xcml0dGVuIGJ5OiAgIEZyZWQgTC4gRHJha2UsIEpyLlxuRW1haWw6ICAgICAgICA8ZmRyYWtlQGFjbS5vcmc+XG5cIlwiXCJcblxuaW1wb3J0IF9pbXBcbmltcG9ydCBvc1xuaW1wb3J0IHJlXG5pbXBvcnQgc3lzXG5cbmZyb20gLmVycm9ycyBpbXBvcnQgRGlzdHV0aWxzUGxhdGZvcm1FcnJvclxuXG5JU19QWVBZID0gJ19fcHlweV9fJyBpbiBzeXMuYnVpbHRpbl9tb2R1bGVfbmFtZXNcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL19kaXN0dXRpbHMvZGVidWcucHlcbmltcG9ydCBvc1xuXG4jIElmIERJU1RVVElMU19ERUJVRyBpcyBhbnl0aGluZyBvdGhlciB0aGFuIHRoZSBlbXB0eSBzdHJpbmcsIHdlIHJ1biBpblxuIyBkZWJ1ZyBtb2RlLlxuREVCVUcgPSBvcy5lbnZpcm9uLmdldCgnRElTVFVUSUxTX0RFQlVHJylcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL2NvbW1hbmQvdXBsb2FkX2RvY3MucHlcbi4uLlxuXG5cbmNsYXNzIHVwbG9hZF9kb2NzKHVwbG9hZCk6XG4gICAgIyBvdmVycmlkZSB0aGUgZGVmYXVsdCByZXBvc2l0b3J5IGFzIHVwbG9hZF9kb2NzIGlzbid0XG4gICAgIyBzdXBwb3J0ZWQgYnkgV2FyZWhvdXNlIChhbmQgd29uJ3QgYmUpLlxuICAgIERFRkFVTFRfUkVQT1NJVE9SWSA9ICdodHRwczovL3B5cGkucHl0aG9uLm9yZy9weXBpLydcblxuICAgIGRlc2NyaXB0aW9uID0gJ1VwbG9hZCBkb2N1bWVudGF0aW9uIHRvIHNpdGVzIG90aGVyIHRoYW4gUHlQaSBzdWNoIGFzIGRldnBpJ1xuXG4gICAgdXNlcl9vcHRpb25zID0gW1xuICAgICAgICAoJ3JlcG9zaXRvcnk9JywgJ3InLFxuICAgICAgICAgXCJ1cmwgb2YgcmVwb3NpdG9yeSBbZGVmYXVsdDogJXNdXCIgJSB1cGxvYWQuREVGQVVMVF9SRVBPU0lUT1JZKSxcbiAgICAgICAgKCdzaG93LXJlc3BvbnNlJywgTm9uZSxcbiAgICAgICAgICdkaXNwbGF5IGZ1bGwgcmVzcG9uc2UgdGV4dCBmcm9tIHNlcnZlcicpLFxuICAgICAgICAoJ3VwbG9hZC1kaXI9JywgTm9uZSwgJ2RpcmVjdG9yeSB0byB1cGxvYWQnKSxcbiAgICBdXG4gICAgYm9vbGVhbl9vcHRpb25zID0gdXBsb2FkLmJvb2xlYW5fb3B0aW9uc1xuXG4gICAgZGVmIGhhc19zcGhpbngoc2VsZik6XG4gICAgICAgIGlmIHNlbGYudXBsb2FkX2RpciBpcyBOb25lOlxuICAgICAgICAgICAgZm9yIGVwIGluIGl0ZXJfZW50cnlfcG9pbnRzKCdkaXN0dXRpbHMuY29tbWFuZHMnLCAnYnVpbGRfc3BoaW54Jyk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRydWVcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL2NvbW1hbmQvcm90YXRlLnB5XG5mcm9tIGRpc3R1dGlscy51dGlsIGltcG9ydCBjb252ZXJ0X3BhdGhcbmZyb20gZGlzdHV0aWxzIGltcG9ydCBsb2dcbmZyb20gZGlzdHV0aWxzLmVycm9ycyBpbXBvcnQgRGlzdHV0aWxzT3B0aW9uRXJyb3JcbmltcG9ydCBvc1xuaW1wb3J0IHNodXRpbFxuXG5mcm9tIHNldHVwdG9vbHMgaW1wb3J0IENvbW1hbmRcblxuXG5jbGFzcyByb3RhdGUoQ29tbWFuZCk6XG4gICAgXCJcIlwiRGVsZXRlIG9sZGVyIGRpc3RyaWJ1dGlvbnNcIlwiXCJcblxuICAgIGRlc2NyaXB0aW9uID0gXCJkZWxldGUgb2xkZXIgZGlzdHJpYnV0aW9ucywga2VlcGluZyBOIG5ld2VzdCBmaWxlc1wiXG4gICAgdXNlcl9vcHRpb25zID0gW1xuICAgICAgICAoJ21hdGNoPScsICdtJywgXCJwYXR0ZXJucyB0byBtYXRjaCAocmVxdWlyZWQpXCIpLFxuICAgICAgICAoJ2Rpc3QtZGlyPScsICdkJywgXCJkaXJlY3Rvcnkgd2hlcmUgdGguLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDEzMUtMcFdDZTR1QncyOFlNcjk5OGczIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSBjaGVjayBmb3IgYW55IHJlcXVpcmVtZW50cy50eHQgZmlsZSBvciBhbnkgb3RoZXIgcHJvamVjdCBjb25maWd1cmF0aW9uIGZpbGVzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImZjMzhiYTUzLTMyZDMtNGZjOC05MDQ1LTM4MzQ5ZGFmM2RmNyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUFGM29lTW1mTkVja1NkUU1FekxHc04iLCJ0b29sX25hbWUiOiJzYXZlLWZpbGUiLCJpbnB1dF9qc29uIjoie1wiZmlsZV9wYXRoXCI6IFwiZGF0YV9hbmFseXNpcy5weVwiLCBcImZpbGVfY29udGVudFwiOiBcImltcG9ydCBwYW5kYXMgYXMgcGRcXG5pbXBvcnQgbnVtcHkgYXMgbnBcXG5pbXBvcnQgcGxvdGx5LmV4cHJlc3MgYXMgcHhcXG5pbXBvcnQgcGxvdGx5LmdyYXBoX29iamVjdHMgYXMgZ29cXG5mcm9tIHBsb3RseS5zdWJwbG90cyBpbXBvcnQgbWFrZV9zdWJwbG90c1xcbmltcG9ydCBkYXRldGltZSBhcyBkdFxcbmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lLCB0aW1lZGVsdGFcXG5pbXBvcnQgd2FybmluZ3NcXG5cXG4jIFN1cHByZXNzIHdhcm5pbmdzXFxud2FybmluZ3MuZmlsdGVyd2FybmluZ3MoJ2lnbm9yZScpXFxuXFxuIyBMb2FkIGRhdGFzZXRzXFxuZGVmIGxvYWRfZGF0YSgpOlxcbiAgICBcXFwiXFxcIlxcXCJMb2FkIGFsbCBkYXRhc2V0cyBmcm9tIHRoZSBkYXRhIGRpcmVjdG9yeVxcXCJcXFwiXFxcIlxcbiAgICBwcmludChcXFwiTG9hZGluZyBkYXRhc2V0cy4uLlxcXCIpXFxuICAgIFxcbiAgICAjIEdvb2dsZSBBbmFseXRpY3MgZGF0YVxcbiAgICBnYV9kYXRhID0gcGQucmVhZF9jc3YoJ2RhdGEvZ29vZ2xlX2FuYWx5dGljc19kYXRhLmNzdicpXFxuICAgIGdhX2RhdGFbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGdhX2RhdGFbJ2RhdGUnXSlcXG4gICAgXFxuICAgICMgQ3VzdG9tZXIgZGF0YVxcbiAgICBjdXN0b21lcl9kYXRhID0gcGQucmVhZF9jc3YoJ2RhdGEvY3VzdG9tZXJfZGF0YS5jc3YnKVxcbiAgICBjdXN0b21lcl9kYXRhWydzaWdudXBfZGF0ZSddID0gcGQudG9fZGF0ZXRpbWUoY3VzdG9tZXJfZGF0YVsnc2lnbnVwX2RhdGUnXSlcXG4gICAgY3VzdG9tZXJfZGF0YVsnbGFzdF9wdXJjaGFzZV9kYXRlJ10gPSBwZC50b19kYXRldGltZShjdXN0b21lcl9kYXRhWydsYXN0X3B1cmNoYXNlX2RhdGUnXSlcXG4gICAgXFxuICAgICMgU29jaWFsIG1lZGlhIGFkcyBkYXRhXFxuICAgIGZiX2FkcyA9IHBkLnJlYWRfY3N2KCdkYXRhL2ZhY2Vib29rX2Fkc19kYXRhLmNzdicpXFxuICAgIGZiX2Fkc1snZGF0ZSddID0gcGQudG9fZGF0ZXRpbWUoZmJfYWRzWydkYXRlJ10pXFxuICAgIFxcbiAgICBpZ19hZHMgPSBwZC5yZWFkX2NzdignZGF0YS9pbnN0YWdyYW1fYWRzX2RhdGEuY3N2JylcXG4gICAgaWdfYWRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZShpZ19hZHNbJ2RhdGUnXSlcXG4gICAgXFxuICAgICMgR29vZ2xlIEFkcyBkYXRhXFxuICAgIGdvb2dsZV9hZHMgPSBwZC5yZWFkX2NzdignZGF0YS9nb29nbGVfYWRzX2RhdGEuY3N2JylcXG4gICAgZ29vZ2xlX2Fkc1snZGF0ZSddID0gcGQudG9fZGF0ZXRpbWUoZ29vZ2xlX2Fkc1snZGF0ZSddKVxcbiAgICBcXG4gICAgIyBDdXN0b21lciB0b3VjaHBvaW50c1xcbiAgICB0b3VjaHBvaW50cyA9IHBkLnJlYWRfY3N2KCdkYXRhL2N1c3RvbWVyX3RvdWNocG9pbnRzLmNzdicpXFxuICAgIHRvdWNocG9pbnRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZSh0b3VjaHBvaW50c1snZGF0ZSddKVxcbiAgICBcXG4gICAgIyBHb29nbGUgU2VhcmNoIENvbnNvbGUgZGF0YVxcbiAgICBzZWFyY2hfY29uc29sZSA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9zZWFyY2hfY29uc29sZV9kYXRhLmNzdicpXFxuICAgIHNlYXJjaF9jb25zb2xlWydkYXRlJ10gPSBwZC50b19kYXRldGltZShzZWFyY2hfY29uc29sZVsnZGF0ZSddKVxcbiAgICBcXG4gICAgcHJpbnQoXFxcIkFsbCBkYXRhc2V0cyBsb2FkZWQgc3VjY2Vzc2Z1bGx5IVxcXCIpXFxuICAgIFxcbiAgICByZXR1cm4ge1xcbiAgICAgICAgJ2dhX2RhdGEnOiBnYV9kYXRhLFxcbiAgICAgICAgJ2N1c3RvbWVyX2RhdGEnOiBjdXN0b21lcl9kYXRhLFxcbiAgICAgICAgJ2ZiX2Fkcyc6IGZiX2FkcyxcXG4gICAgICAgICdpZ19hZHMnOiBpZ19hZHMsXFxuICAgICAgICAnZ29vZ2xlX2Fkcyc6IGdvb2dsZV9hZHMsXFxuICAgICAgICAndG91Y2hwb2ludHMnOiB0b3VjaHBvaW50cyxcXG4gICAgICAgICdzZWFyY2hfY29uc29sZSc6IHNlYXJjaF9jb25zb2xlXFxuICAgIH1cXG5cXG5kZWYgYW5hbHl6ZV9nb29nbGVfYW5hbHl0aWNzKGdhX2RhdGEpOlxcbiAgICBcXFwiXFxcIlxcXCJBbmFseXplIEdvb2dsZSBBbmFseXRpY3MgZGF0YVxcXCJcXFwiXFxcIlxcbiAgICBwcmludChcXFwiXFxcXG49PT0gR29vZ2xlIEFuYWx5dGljcyBBbmFseXNpcyA9PT1cXFwiKVxcbiAgICBcXG4gICAgIyBCYXNpYyBzdGF0aXN0aWNzXFxuICAgIHByaW50KFxcXCJcXFxcbkJhc2ljIFN0YXRpc3RpY3M6XFxcIilcXG4gICAgcHJpbnQoZlxcXCJUb3RhbCBzZXNzaW9uczoge2dhX2RhdGFbJ3Nlc3Npb25zJ10uc3VtKCl9XFxcIilcXG4gICAgcHJpbnQoZlxcXCJUb3RhbCBuZXcgdXNlcnM6IHtnYV9kYXRhWyduZXdfdXNlcnMnXS5zdW0oKX1cXFwiKVxcbiAgICBwcmludChmXFxcIlRvdGFsIHRyYW5zYWN0aW9uczoge2dhX2RhdGFbJ3RyYW5zYWN0aW9ucyddLnN1bSgpfVxcXCIpXFxuICAgIHByaW50KGZcXFwiVG90YWwgcmV2ZW51ZTogJHtnYV9kYXRhWydyZXZlbnVlJ10uc3VtKCk6LjJmfVxcXCIpXFxuICAgIHByaW50KGZcXFwiQXZlcmFnZSBjb252ZXJzaW9uIHJhdGU6IHtnYV9kYXRhWydjb252ZXJzaW9uX3JhdGUnXS5tZWFuKCk6LjIlfVxcXCIpXFxuICAgIFxcbiAgICAjIFNlc3Npb25zIGJ5IHNvdXJjZVxcbiAgICBzZXNzaW9uc19ieV9zb3VyY2UgPSBnYV9kYXRhLmdyb3VwYnkoJ3NvdXJjZScpWydzZXNzaW9ucyddLnN1bSgpLnJlc2V0X2luZGV4KClcXG4gICAgc2Vzc2lvbnNfYnlfc291cmNlID0gc2Vzc2lvbnNfYnlfc291cmNlLnNvcnRfdmFsdWVzKCdzZXNzaW9ucycsIGFzY2VuZGluZz1GYWxzZSlcXG4gICAgXFxuICAgICMgQ3JlYXRlIGEgYmFyIGNoYXJ0IG9mIHNlc3Npb25zIGJ5IHNvdXJjZVxcbiAgICBmaWcgPSBweC5iYXIoXFxuICAgICAgICBzZXNzaW9uc19ieV9zb3VyY2UsIFxcbiAgICAgICAgeD0nc291cmNlJywgXFxuICAgICAgICB5PSdzZXNzaW9ucycsXFxuICAgICAgICB0aXRsZT0nU2Vzc2lvbnMgYnkgU291cmNlJyxcXG4gICAgICAgIGxhYmVscz17J3NvdXJjZSc6ICdTb3VyY2UnLCAnc2Vzc2lvbnMnOiAnVG90YWwgU2Vzc2lvbnMnfSxcXG4gICAgICAgIGNvbG9yPSdzZXNzaW9ucycsXFxuICAgICAgICBjb2xvcl9jb250aW51b3VzX3NjYWxlPSdWaXJpZGlzJ1xcbiAgICApXFxuICAgIGZpZy53cml0ZV9odG1sKCdzZXNzaW9uc19ieV9zb3VyY2UuaHRtbCcpXFxuICAgIHByaW50KFxcXCJcXFxcblNlc3Npb25zIGJ5IHNvdXJjZSBjaGFydCBzYXZlZCBhcyAnc2Vzc2lvbnNfYnlfc291cmNlLmh0bWwnXFxcIilcXG4gICAgXFxuICAgICMgU2Vzc2lvbnMgYW5kIGNvbnZlcnNpb25zIG92ZXIgdGltZVxcbiAgICBkYWlseV9tZXRyaWNzID0gZ2FfZGF0YS5ncm91cGJ5KCdkYXRlJykuYWdnKHtcXG4gICAgICAgICdzZXNzaW9ucyc6ICdzdW0nLFxcbiAgICAgICAgJ3RyYW5zYWN0aW9ucyc6ICdzdW0nLFxcbiAgICAgICAgJ3JldmVudWUnOiAnc3VtJ1xcbiAgICB9KS5yZXNldF9pbmRleCgpXFxuICAgIFxcbiAgICAjIENyZWF0ZSBhIGxpbmUgY2hhcnQgb2Ygc2Vzc2lvbnMgYW5kIHRyYW5zYWN0aW9ucyBvdmVyIHRpbWVcXG4gICAgZmlnID0gbWFrZV9zdWJwbG90cyhzcGVjcz1bW3tcXFwic2Vjb25kYXJ5X3lcXFwiOiBUcnVlfV1dKVxcbiAgICBcXG4gICAgZmlnLmFkZF90cmFjZShcXG4gICAgICAgIGdvLlNjYXR0ZXIoXFxuICAgICAgICAgICAgeD1kYWlseV9tZXRyaWNzWydkYXRlJ10sIFxcbiAgICAgICAgICAgIHk9ZGFpbHlfbWV0cmljc1snc2Vzc2lvbnMnXSxcXG4gICAgICAgICAgICBuYW1lPSdTZXNzaW9ucycsXFxuICAgICAgICAgICAgbGluZT1kaWN0KGNvbG9yPSdibHVlJylcXG4gICAgICAgICksXFxuICAgICAgICBzZWNvbmRhcnlfeT1GYWxzZVxcbiAgICApXFxuICAgIFxcbiAgICBmaWcuYWRkX3RyYWNlKFxcbiAgICAgICAgZ28uU2NhdHRlcihcXG4gICAgICAgICAgICB4PWRhaWx5X21ldHJpY3NbJ2RhdGUnXSwgXFxuICAgICAgICAgICAgeT1kYWlseV9tZXRyaWNzWyd0cmFuc2FjdGlvbnMnXSxcXG4gICAgICAgICAgICBuYW1lPSdUcmFuc2FjdGlvbnMnLFxcbiAgICAgICAgICAgIGxpbmU9ZGljdChjb2xvcj0nZ3JlZW4nKVxcbiAgICAgICAgKSxcXG4gICAgICAgIHNlY29uZGFyeV95PVRydWVcXG4gICAgKVxcbiAgICBcXG4gICAgZmlnLnVwZGF0ZV9sYXlvdXQoXFxuICAgICAgICB0aXRsZT0nU2Vzc2lvbnMgYW5kIFRyYW5zYWN0aW9ucyBPdmVyIFRpbWUnLFxcbiAgICAgICAgeGF4aXNfdGl0bGU9J0RhdGUnLFxcbiAgICAgICAgbGVnZW5kPWRpY3QoeD0wLjAxLCB5PTAuOTksIGJnY29sb3I9J3JnYmEoMjU1LCAyNTUsIDI1NSwgMC44KScpXFxuICAgIClcXG4gICAgXFxuICAgIGZpZy51cGRhdGVfeWF4ZXModGl0bGVfdGV4dD1cXFwiU2Vzc2lvbnNcXFwiLCBzZWNvbmRhcnlfeT1GYWxzZSlcXG4gICAgZmlnLnVwZGF0ZV95YXhlcyh0aXRsZV90ZXh0PVxcXCJUcmFuc2FjdGlvbnNcXFwiLCBzZWNvbmRhcnlfeT1UcnVlKVxcbiAgICBcXG4gICAgZmlnLndyaXRlX2h0bWwoJ3Nlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lLmh0bWwnKVxcbiAgICBwcmludChcXFwiU2Vzc2lvbnMgYW5kIHRyYW5zYWN0aW9ucyBvdmVyIHRpbWUgY2hhcnQgc2F2ZWQgYXMgJ3Nlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lLmh0bWwnXFxcIilcXG4gICAgXFxuICAgICMgRGV2aWNlIGNhdGVnb3J5IGFuYWx5c2lzXFxuICAgIGRldmljZV9tZXRyaWNzID0gZ2FfZGF0YS5ncm91cGJ5KCdkZXZpY2VfY2F0ZWdvcnknKS5hZ2coe1xcbiAgICAgICAgJ3Nlc3Npb25zJzogJ3N1bScsXFxuICAgICAgICAndHJhbnNhY3Rpb25zJzogJ3N1bScsXFxuICAgICAgICAnY29udmVyc2lvbl9yYXRlJzogJ21lYW4nXFxuICAgIH0pLnJlc2V0X2luZGV4KClcXG4gICAgXFxuICAgICMgQ3JlYXRlIGEgcGllIGNoYXJ0IG9mIHNlc3Npb25zIGJ5IGRldmljZVxcbiAgICBmaWcgPSBweC5waWUoXFxuICAgICAgICBkZXZpY2VfbWV0cmljcywgXFxuICAgICAgICB2YWx1ZXM9J3Nlc3Npb25zJywgXFxuICAgICAgICBuYW1lcz0nZGV2aWNlX2NhdGVnb3J5JyxcXG4gICAgICAgIHRpdGxlPSdTZXNzaW9ucyBieSBEZXZpY2UgQ2F0ZWdvcnknLFxcbiAgICAgICAgY29sb3JfZGlzY3JldGVfc2VxdWVuY2U9cHguY29sb3JzLnNlcXVlbnRpYWwuUGxhc21hXFxuICAgIClcXG4gICAgZmlnLndyaXRlX2h0bWwoJ3Nlc3Npb25zX2J5X2RldmljZS5odG1sJylcXG4gICAgcHJpbnQoXFxcIlNlc3Npb25zIGJ5IGRldmljZSBjaGFydCBzYXZlZCBhcyAnc2Vzc2lvbnNfYnlfZGV2aWNlLmh0bWwnXFxcIilcXG4gICAgXFxuICAgIHJldHVybiBkZXZpY2VfbWV0cmljc1xcblxcbmRlZiBhbmFseXplX2N1c3RvbWVyX2RhdGEoY3VzdG9tZXJfZGF0YSk6XFxuICAgIFxcXCJcXFwiXFxcIkFuYWx5emUgY3VzdG9tZXIgZGF0YVxcXCJcXFwiXFxcIlxcbiAgICBwcmludChcXFwiXFxcXG49PT0gQ3VzdG9tZXIgRGF0YSBBbmFseXNpcyA9PT1cXFwiKVxcbiAgICBcXG4gICAgIyBCYXNpYyBzdGF0aXN0aWNzXFxuICAgIHByaW50KFxcXCJcXFxcbkN1c3RvbWVyIERlbW9ncmFwaGljczpcXFwiKVxcbiAgICBwcmludChmXFxcIlRvdGFsIGN1c3RvbWVyczoge2xlbihjdXN0b21lcl9kYXRhKX1cXFwiKVxcbiAgICBwcmludChmXFxcIkdlbmRlciBkaXN0cmlidXRpb246IHtjdXN0b21lcl9kYXRhWydnZW5kZXInXS52YWx1ZV9jb3VudHMobm9ybWFsaXplPVRydWUpLnRvX2RpY3QoKX1cXFwiKVxcbiAgICBwcmludChmXFxcIkF2ZXJhZ2UgYWdlOiB7Y3VzdG9tZXJfZGF0YVsnYWdlJ10ubWVhbigpOi4xZn0geWVhcnNcXFwiKVxcbiAgICBwcmludChmXFxcIkF2ZXJhZ2UgdG90YWwgc3BlbmQ6ICR7Y3VzdG9tZXJfZGF0YVsndG90YWxfc3BlbmQnXS5tZWFuKCk6LjJmfVxcXCIpXFxuICAgIFxcbiAgICAjIEN1c3RvbWVyIHNlZ21lbnRzXFxuICAgIHNlZ21lbnRfY291bnRzID0gY3VzdG9tZXJfZGF0YVsnY3VzdG9tZXJfc2VnbWVudCddLnZhbHVlX2NvdW50cygpXFxuICAgIFxcbiAgICAjIENyZWF0ZSBhIGJhciBjaGFydCBvZiBjdXN0b21lciBzZWdtZW50c1xcbiAgICBmaWcgPSBweC5iYXIoXFxuICAgICAgICB4PXNlZ21lbnRfY291bnRzLmluZGV4LCBcXG4gICAgICAgIHk9c2VnbWVudF9jb3VudHMudmFsdWVzLFxcbiAgICAgICAgdGl0bGU9J0N1c3RvbWVyIFNlZ21lbnRzJyxcXG4gICAgICAgIGxhYmVscz17J3gnOiAnU2VnbWVudCcsICd5JzogJ051bWJlciBvZiBDdXN0b21lcnMnfSxcXG4gICAgICAgIGNvbG9yPXNlZ21lbnRfY291bnRzLnZhbHVlcyxcXG4gICAgICAgIGNvbG9yX2NvbnRpbnVvdXNfc2NhbGU9J1ZpcmlkaXMnXFxuICAgIClcXG4gICAgZmlnLndyaXRlX2h0bWwoJ2N1c3RvbWVyX3NlZ21lbnRzLmh0bWwnKVxcbiAgICBwcmludChcXFwiXFxcXG5DdXN0b21lciBzZWdtZW50cyBjaGFydCBzYXZlZCBhcyAnY3VzdG9tZXJfc2VnbWVudHMuaHRtbCdcXFwiKVxcbiAgICBcXG4gICAgIyBBZ2UgZGlzdHJpYnV0aW9uXFxuICAgIGZpZyA9IHB4Lmhpc3RvZ3JhbShcXG4gICAgICAgIGN1c3RvbWVyX2RhdGEsIFxcbiAgICAgICAgeD0nYWdlJyxcXG4gICAgICAgIG5iaW5zPTIwLFxcbiAgICAgICAgdGl0bGU9J0N1c3RvbWVyIEFnZSBEaXN0cmlidXRpb24nLFxcbiAgICAgICAgbGFiZWxzPXsnYWdlJzogJ0FnZScsICdjb3VudCc6ICdOdW1iZXIgb2YgQ3VzdG9tZXJzJ30sXFxuICAgICAgICBjb2xvcl9kaXNjcmV0ZV9zZXF1ZW5jZT1bJ3B1cnBsZSddXFxuICAgIClcXG4gICAgZmlnLndyaXRlX2h0bWwoJ2FnZV9kaXN0cmlidXRpb24uaHRtbCcpXFxuICAgIHByaW50KFxcXCJBZ2UgZGlzdHJpYnV0aW9uIGNoYXJ0IHNhdmVkIGFzICdhZ2VfZGlzdHJpYnV0aW9uLmh0bWwnXFxcIilcXG4gICAgXFxuICAgICMgTG95YWx0eSB0aWVyIGFuYWx5c2lzXFxuICAgIGxveWFsdHlfc3BlbmQgPSBjdXN0b21lcl9kYXRhLmdyb3VwYnkoJ2xveWFsdHlfdGllcicpLmFnZyh7XFxuICAgICAgICAndG90YWxfc3BlbmQnOiAnbWVhbicsXFxuICAgICAgICAndG90YWxfb3JkZXJzJzogJ21lYW4nXFxuICAgIH0pLnJlc2V0X2luZGV4KClcXG4gICAgXFxuICAgICMgQ3JlYXRlIGEgZ3JvdXBlZCBiYXIgY2hhcnQgb2YgbG95YWx0eSB0aWVyc1xcbiAgICBmaWcgPSBweC5iYXIoXFxuICAgICAgICBsb3lhbHR5X3NwZW5kLCBcXG4gICAgICAgIHg9J2xveWFsdHlfdGllcicsIFxcbiAgICAgICAgeT1bJ3RvdGFsX3NwZW5kJywgJ3RvdGFsX29yZGVycyddLFxcbiAgICAgICAgYmFybW9kZT0nZ3JvdXAnLFxcbiAgICAgICAgdGl0bGU9J0F2ZXJhZ2UgU3BlbmQgYW5kIE9yZGVycyBieSBMb3lhbHR5IFRpZXInLFxcbiAgICAgICAgbGFiZWxzPXtcXG4gICAgICAgICAgICAnbG95YWx0eV90aWVyJzogJ0xveWFsdHkgVGllcicsIFxcbiAgICAgICAgICAgICd2YWx1ZSc6ICdWYWx1ZScsXFxuICAgICAgICAgICAgJ3ZhcmlhYmxlJzogJ01ldHJpYydcXG4gICAgICAgIH1cXG4gICAgKVxcbiAgICBmaWcud3JpdGVfaHRtbCgnbG95YWx0eV90aWVyX2FuYWx5c2lzLmh0bWwnKVxcbiAgICBwcmludChcXFwiTG95YWx0eSB0aWVyIGFuYWx5c2lzIGNoYXJ0IHNhdmVkIGFzICdsb3lhbHR5X3RpZXJfYW5hbHlzaXMuaHRtbCdcXFwiKVxcbiAgICBcXG4gICAgcmV0dXJuIGxveWFsdHlfc3BlbmRcXG5cXG5kZWYgYW5hbHl6ZV9hZF9wZXJmb3JtYW5jZShmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2Fkcyk6XFxuICAgIFxcXCJcXFwiXFxcIkFuYWx5emUgYWQgcGVyZm9ybWFuY2UgYWNyb3NzIHBsYXRmb3Jtc1xcXCJcXFwiXFxcIlxcbiAgICBwcmludChcXFwiXFxcXG49PT0gQWQgUGVyZm9ybWFuY2UgQW5hbHlzaXMgPT09XFxcIilcXG4gICAgXFxuICAgICMgQ29tYmluZSBhZCBkYXRhXFxuICAgIGZiX2Fkc19zdW1tYXJ5ID0gZmJfYWRzLmdyb3VwYnkoJ2RhdGUnKS5hZ2coe1xcbiAgICAgICAgJ2ltcHJlc3Npb25zJzogJ3N1bScsXFxuICAgICAgICAnY2xpY2tzJzogJ3N1bScsXFxuICAgICAgICAnc3BlbmQnOiAnc3VtJyxcXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxcbiAgICAgICAgJ2NvbnZlcnNpb25fdmFsdWUnOiAnc3VtJ1xcbiAgICB9KS5yZXNldF9pbmRleCgpXFxuICAgIGZiX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0ZhY2Vib29rJ1xcbiAgICBcXG4gICAgaWdfYWRzX3N1bW1hcnkgPSBpZ19hZHMuZ3JvdXBieSgnZGF0ZScpLmFnZyh7XFxuICAgICAgICAnaW1wcmVzc2lvbnMnOiAnc3VtJyxcXG4gICAgICAgICdjbGlja3MnOiAnc3VtJyxcXG4gICAgICAgICdzcGVuZCc6ICdzdW0nLFxcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXFxuICAgICAgICAnY29udmVyc2lvbl92YWx1ZSc6ICdzdW0nXFxuICAgIH0pLnJlc2V0X2luZGV4KClcXG4gICAgaWdfYWRzX3N1bW1hcnlbJ3BsYXRmb3JtJ10gPSAnSW5zdGFncmFtJ1xcbiAgICBcXG4gICAgZ29vZ2xlX2Fkc19zdW1tYXJ5ID0gZ29vZ2xlX2Fkcy5ncm91cGJ5KCdkYXRlJykuYWdnKHtcXG4gICAgICAgICdpbXByZXNzaW9ucyc6ICdzdW0nLFxcbiAgICAgICAgJ2NsaWNrcyc6ICdzdW0nLFxcbiAgICAgICAgJ2Nvc3QnOiAnc3VtJyxcXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxcbiAgICAgICAgJ2NvbnZlcnNpb25fdmFsdWUnOiAnc3VtJ1xcbiAgICB9KS5yZXNldF9pbmRleCgpXFxuICAgIGdvb2dsZV9hZHNfc3VtbWFyeSA9IGdvb2dsZV9hZHNfc3VtbWFyeS5yZW5hbWUoY29sdW1ucz17J2Nvc3QnOiAnc3BlbmQnfSlcXG4gICAgZ29vZ2xlX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0dvb2dsZSBBZHMnXFxuICAgIFxcbiAgICAjIENvbWJpbmUgYWxsIHBsYXRmb3Jtc1xcbiAgICBhbGxfYWRzID0gcGQuY29uY2F0KFtcXG4gICAgICAgIGZiX2Fkc19zdW1tYXJ5LCBcXG4gICAgICAgIGlnX2Fkc19zdW1tYXJ5LCBcXG4gICAgICAgIGdvb2dsZV9hZHNfc3VtbWFyeVxcbiAgICBdLCBpZ25vcmVfaW5kZXg9VHJ1ZSlcXG4gICAgXFxuICAgICMgQ2FsY3VsYXRlIG1ldHJpY3NcXG4gICAgYWxsX2Fkc1snY3RyJ10gPSBhbGxfYWRzWydjbGlja3MnXSAvIGFsbF9hZHNbJ2ltcHJlc3Npb25zJ11cXG4gICAgYWxsX2Fkc1snY3BjJ10gPSBhbGxfYWRzWydzcGVuZCddIC8gYWxsX2Fkc1snY2xpY2tzJ11cXG4gICAgYWxsX2Fkc1sncm9hcyddID0gYWxsX2Fkc1snY29udmVyc2lvbl92YWx1ZSddIC8gYWxsX2Fkc1snc3BlbmQnXVxcbiAgICBcXG4gICAgIyBQbGF0Zm9ybSBwZXJmb3JtYW5jZSBjb21wYXJpc29uXFxuICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlID0gYWxsX2Fkcy5ncm91cGJ5KCdwbGF0Zm9ybScpLmFnZyh7XFxuICAgICAgICAnaW1wcmVzc2lvbnMnOiAnc3VtJyxcXG4gICAgICAgICdjbGlja3MnOiAnc3VtJyxcXG4gICAgICAgICdzcGVuZCc6ICdzdW0nLFxcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXFxuICAgICAgICAnY29udmVyc2lvbl92YWx1ZSc6ICdzdW0nLFxcbiAgICAgICAgJ2N0cic6ICdtZWFuJyxcXG4gICAgICAgICdjcGMnOiAnbWVhbicsXFxuICAgICAgICAncm9hcyc6ICdtZWFuJ1xcbiAgICB9KS5yZXNldF9pbmRleCgpXFxuICAgIFxcbiAgICBwcmludChcXFwiXFxcXG5QbGF0Zm9ybSBQZXJmb3JtYW5jZTpcXFwiKVxcbiAgICBwcmludChwbGF0Zm9ybV9wZXJmb3JtYW5jZVtbJ3BsYXRmb3JtJywgJ2ltcHJlc3Npb25zJywgJ2NsaWNrcycsICdjb252ZXJzaW9ucycsICdzcGVuZCcsICdjb252ZXJzaW9uX3ZhbHVlJ11dKVxcbiAgICBcXG4gICAgIyBDcmVhdGUgYSBiYXIgY2hhcnQgY29tcGFyaW5nIHBsYXRmb3Jtc1xcbiAgICBmaWcgPSBweC5iYXIoXFxuICAgICAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSwgXFxuICAgICAgICB4PSdwbGF0Zm9ybScsIFxcbiAgICAgICAgeT0nY29udmVyc2lvbnMnLFxcbiAgICAgICAgY29sb3I9J3BsYXRmb3JtJyxcXG4gICAgICAgIHRpdGxlPSdDb252ZXJzaW9ucyBieSBQbGF0Zm9ybScsXFxuICAgICAgICBsYWJlbHM9eydwbGF0Zm9ybSc6ICdQbGF0Zm9ybScsICdjb252ZXJzaW9ucyc6ICdUb3RhbCBDb252ZXJzaW9ucyd9XFxuICAgIClcXG4gICAgZmlnLndyaXRlX2h0bWwoJ3BsYXRmb3JtX2NvbnZlcnNpb25zLmh0bWwnKVxcbiAgICBwcmludChcXFwiXFxcXG5QbGF0Zm9ybSBjb252ZXJzaW9ucyBjaGFydCBzYXZlZCBhcyAncGxhdGZvcm1fY29udmVyc2lvbnMuaHRtbCdcXFwiKVxcbiAgICBcXG4gICAgIyBST0FTIGNvbXBhcmlzb25cXG4gICAgZmlnID0gcHguYmFyKFxcbiAgICAgICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UsIFxcbiAgICAgICAgeD0ncGxhdGZvcm0nLCBcXG4gICAgICAgIHk9J3JvYXMnLFxcbiAgICAgICAgY29sb3I9J3BsYXRmb3JtJyxcXG4gICAgICAgIHRpdGxlPSdSZXR1cm4gb24gQWQgU3BlbmQgKFJPQVMpIGJ5IFBsYXRmb3JtJyxcXG4gICAgICAgIGxhYmVscz17J3BsYXRmb3JtJzogJ1BsYXRmb3JtJywgJ3JvYXMnOiAnUk9BUyd9XFxuICAgIClcXG4gICAgZmlnLndyaXRlX2h0bWwoJ3BsYXRmb3JtX3JvYXMuaHRtbCcpXFxuICAgIHByaW50KFxcXCJQbGF0Zm9ybSBST0FTIGNoYXJ0IHNhdmVkIGFzICdwbGF0Zm9ybV9yb2FzLmh0bWwnXFxcIilcXG4gICAgXFxuICAgICMgRGFpbHkgcGVyZm9ybWFuY2Ugb3ZlciB0aW1lXFxuICAgIGZpZyA9IHB4LmxpbmUoXFxuICAgICAgICBhbGxfYWRzLCBcXG4gICAgICAgIHg9J2RhdGUnLCBcXG4gICAgICAgIHk9J2NvbnZlcnNpb25zJyxcXG4gICAgICAgIGNvbG9yPSdwbGF0Zm9ybScsXFxuICAgICAgICB0aXRsZT0nRGFpbHkgQ29udmVyc2lvbnMgYnkgUGxhdGZvcm0nLFxcbiAgICAgICAgbGFiZWxzPXsnZGF0ZSc6ICdEYXRlJywgJ2NvbnZlcnNpb25zJzogJ0NvbnZlcnNpb25zJywgJ3BsYXRmb3JtJzogJ1BsYXRmb3JtJ31cXG4gICAgKVxcbiAgICBmaWcud3JpdGVfaHRtbCgnZGFpbHlfY29udmVyc2lvbnMuaHRtbCcpXFxuICAgIHByaW50KFxcXCJEYWlseSBjb252ZXJzaW9ucyBjaGFydCBzYXZlZCBhcyAnZGFpbHlfY29udmVyc2lvbnMuaHRtbCdcXFwiKVxcbiAgICBcXG4gICAgcmV0dXJuIHBsYXRmb3JtX3BlcmZvcm1hbmNlXFxuXFxuZGVmIG1haW4oKTpcXG4gICAgXFxcIlxcXCJcXFwiTWFpbiBmdW5jdGlvbiB0byBydW4gdGhlIGFuYWx5c2lzXFxcIlxcXCJcXFwiXFxuICAgIHByaW50KFxcXCJTdGFydGluZyBkYXRhIGFuYWx5c2lzLi4uXFxcIilcXG4gICAgXFxuICAgICMgTG9hZCBhbGwgZGF0YXNldHNcXG4gICAgZGF0YXNldHMgPSBsb2FkX2RhdGEoKVxcbiAgICBcXG4gICAgIyBBbmFseXplIEdvb2dsZSBBbmFseXRpY3MgZGF0YVxcbiAgICBkZXZpY2VfbWV0cmljcyA9IGFuYWx5emVfZ29vZ2xlX2FuYWx5dGljcyhkYXRhc2V0c1snZ2FfZGF0YSddKVxcbiAgICBcXG4gICAgIyBBbmFseXplIGN1c3RvbWVyIGRhdGFcXG4gICAgbG95YWx0eV9tZXRyaWNzID0gYW5hbHl6ZV9jdXN0b21lcl9kYXRhKGRhdGFzZXRzWydjdXN0b21lcl9kYXRhJ10pXFxuICAgIFxcbiAgICAjIEFuYWx5emUgYWQgcGVyZm9ybWFuY2VcXG4gICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UgPSBhbmFseXplX2FkX3BlcmZvcm1hbmNlKFxcbiAgICAgICAgZGF0YXNldHNbJ2ZiX2FkcyddLCBcXG4gICAgICAgIGRhdGFzZXRzWydpZ19hZHMnXSwgXFxuICAgICAgICBkYXRhc2V0c1snZ29vZ2xlX2FkcyddXFxuICAgIClcXG4gICAgXFxuICAgIHByaW50KFxcXCJcXFxcbkFuYWx5c2lzIGNvbXBsZXRlISBIVE1MIHZpc3VhbGl6YXRpb25zIGhhdmUgYmVlbiBzYXZlZCB0byB0aGUgY3VycmVudCBkaXJlY3RvcnkuXFxcIilcXG4gICAgcHJpbnQoXFxcIllvdSBjYW4gb3BlbiB0aGVzZSBIVE1MIGZpbGVzIGluIHlvdXIgd2ViIGJyb3dzZXIgdG8gdmlldyB0aGUgaW50ZXJhY3RpdmUgY2hhcnRzLlxcXCIpXFxuXFxuaWYgX19uYW1lX18gPT0gXFxcIl9fbWFpbl9fXFxcIjpcXG4gICAgbWFpbigpXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJCYXNlZCBvbiBteSBleHBsb3JhdGlvbiBvZiB5b3VyIGNvZGViYXNlLCBJIGNhbiBzZWUgdGhhdCB5b3UgaGF2ZSBhIGRhdGEgYW5hbHlzaXMgcHJvamVjdCB3aXRoIHNldmVyYWwgQ1NWIGRhdGFzZXRzIGJ1dCBubyBleGlzdGluZyBhbmFseXNpcyBzY3JpcHRzIHlldC4gTGV0IG1lIGhlbHAgeW91IHNldCB1cCBhIFB5dGhvbiBlbnZpcm9ubWVudCB3aXRoIHRoZSBkYXRhIGFuYWx5c2lzIGFuZCB2aXN1YWxpemF0aW9uIGxpYnJhcmllcyB5b3UndmUgaW1wb3J0ZWQuXG5cbiMjIFByb2plY3QgT3ZlcnZpZXdcblxuSSBmb3VuZCBzZXZlcmFsIENTViBkYXRhc2V0cyBpbiB0aGUgYGRhdGEvYCBkaXJlY3Rvcnk6XG4tIGBnb29nbGVfYW5hbHl0aWNzX2RhdGEuY3N2YFxuLSBgY3VzdG9tZXJfZGF0YS5jc3ZgXG4tIGBpbnN0YWdyYW1fYWRzX2RhdGEuY3N2YFxuLSBgZmFjZWJvb2tfYWRzX2RhdGEuY3N2YFxuLSBgY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2YFxuLSBgZ29vZ2xlX2Fkc19kYXRhLmNzdmBcbi0gYGdvb2dsZV9zZWFyY2hfY29uc29sZV9kYXRhLmNzdmBcblxuVGhlc2UgZGF0YXNldHMgYXBwZWFyIHRvIGNvbnRhaW4gbWFya2V0aW5nIGFuZCBjdXN0b21lciBkYXRhIHRoYXQgd291bGQgYmUgcGVyZmVjdCBmb3IgYW5hbHlzaXMgd2l0aCB0aGUgbGlicmFyaWVzIHlvdSd2ZSBpbXBvcnRlZC5cblxuIyMgUGxhbiBmb3IgU2V0dGluZyBVcCBZb3VyIERhdGEgQW5hbHlzaXMgRW52aXJvbm1lbnRcblxuTGV0IG1lIGNyZWF0ZSBhIHNpbXBsZSBkYXRhIGFuYWx5c2lzIHNjcmlwdCB0aGF0IGRlbW9uc3RyYXRlcyBob3cgdG8gdXNlIHRoZSBsaWJyYXJpZXMgeW91J3ZlIGltcG9ydGVkLiBIZXJlJ3MgbXkgcGxhbjpcblxuMS4gQ3JlYXRlIGEgYmFzaWMgZGF0YSBhbmFseXNpcyBzY3JpcHQgdGhhdCBsb2FkcyB0aGUgZGF0YXNldHNcbjIuIERlbW9uc3RyYXRlIGJhc2ljIGRhdGEgbWFuaXB1bGF0aW9uIHdpdGggcGFuZGFzXG4zLiBDcmVhdGUgc29tZSB2aXN1YWxpemF0aW9ucyB3aXRoIHBsb3RseVxuNC4gU2hvdyBob3cgdG8gaGFuZGxlIGRhdGVzIHdpdGggZGF0ZXRpbWVcblxuTGV0J3Mgc3RhcnQgYnkgY3JlYXRpbmcgYSBiYXNpYyBhbmFseXNpcyBzY3JpcHQ6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG48c3Rkb3V0PlxuLi8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL19pbnRlcm5hbC91dGlscy91cmxzLnB5XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUGI2YVA1bmlLSFg5MnlxektwZDJFayJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoyLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6IkJhc2VkIG9uIG15IGV4cGxvcmF0aW9uIG9mIHlvdXIgY29kZWJhc2UsIEkgY2FuIHNlZSB0aGF0IHlvdSBoYXZlIGEgZGF0YSBhbmFseXNpcyBwcm9qZWN0IHdpdGggc2V2ZXJhbCBDU1YgZGF0YXNldHMgYnV0IG5vIGV4aXN0aW5nIGFuYWx5c2lzIHNjcmlwdHMgeWV0LiBMZXQgbWUgaGVscCB5b3Ugc2V0IHVwIGEgUHl0aG9uIGVudmlyb25tZW50IHdpdGggdGhlIGRhdGEgYW5hbHlzaXMgYW5kIHZpc3VhbGl6YXRpb24gbGlicmFyaWVzIHlvdSd2ZSBpbXBvcnRlZC5cblxuIyMgUHJvamVjdCBPdmVydmlld1xuXG5JIGZvdW5kIHNldmVyYWwgQ1NWIGRhdGFzZXRzIGluIHRoZSBgZGF0YS9gIGRpcmVjdG9yeTpcbi0gYGdvb2dsZV9hbmFseXRpY3NfZGF0YS5jc3ZgXG4tIGBjdXN0b21lcl9kYXRhLmNzdmBcbi0gYGluc3RhZ3JhbV9hZHNfZGF0YS5jc3ZgXG4tIGBmYWNlYm9va19hZHNfZGF0YS5jc3ZgXG4tIGBjdXN0b21lcl90b3VjaHBvaW50cy5jc3ZgXG4tIGBnb29nbGVfYWRzX2RhdGEuY3N2YFxuLSBgZ29vZ2xlX3NlYXJjaF9jb25zb2xlX2RhdGEuY3N2YFxuXG5UaGVzZSBkYXRhc2V0cyBhcHBlYXIgdG8gY29udGFpbiBtYXJrZXRpbmcgYW5kIGN1c3RvbWVyIGRhdGEgdGhhdCB3b3VsZCBiZSBwZXJmZWN0IGZvciBhbmFseXNpcyB3aXRoIHRoZSBsaWJyYXJpZXMgeW91J3ZlIGltcG9ydGVkLlxuXG4jIyBQbGFuIGZvciBTZXR0aW5nIFVwIFlvdXIgRGF0YSBBbmFseXNpcyBFbnZpcm9ubWVudFxuXG5MZXQgbWUgY3JlYXRlIGEgc2ltcGxlIGRhdGEgYW5hbHlzaXMgc2NyaXB0IHRoYXQgZGVtb25zdHJhdGVzIGhvdyB0byB1c2UgdGhlIGxpYnJhcmllcyB5b3UndmUgaW1wb3J0ZWQuIEhlcmUncyBteSBwbGFuOlxuXG4xLiBDcmVhdGUgYSBiYXNpYyBkYXRhIGFuYWx5c2lzIHNjcmlwdCB0aGF0IGxvYWRzIHRoZSBkYXRhc2V0c1xuMi4gRGVtb25zdHJhdGUgYmFzaWMgZGF0YSBtYW5pcHVsYXRpb24gd2l0aCBwYW5kYXNcbjMuIENyZWF0ZSBzb21lIHZpc3VhbGl6YXRpb25zIHdpdGggcGxvdGx5XG40LiBTaG93IGhvdyB0byBoYW5kbGUgZGF0ZXMgd2l0aCBkYXRldGltZVxuXG5MZXQncyBzdGFydCBieSBjcmVhdGluZyBhIGJhc2ljIGFuYWx5c2lzIHNjcmlwdDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0Y2YzMGQwNC0zMWQxLTQ1MGEtYTMwMS04ZTRlNWUzMjkwNmIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDExOE5QbTN0S01wTHUxZFJNUXlnQjlvIiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImZpbGVfcGF0aFwiOiBcInJlcXVpcmVtZW50cy50eHRcIiwgXCJmaWxlX2NvbnRlbnRcIjogXCJwYW5kYXM+PTEuMy4wXFxubnVtcHk+PTEuMjAuMFxcbnBsb3RseT49NS4zLjBcXG5kYXRldGltZVwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCdzIGNyZWF0ZSBhIHNpbXBsZSByZXF1aXJlbWVudHMudHh0IGZpbGUgdG8gZW5zdXJlIGFsbCB0aGUgbmVjZXNzYXJ5IGxpYnJhcmllcyBhcmUgaW5zdGFsbGVkOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBzYXZlZCBzdWNjZXNzZnVsbHkuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQUYzb2VNbWZORWNrU2RRTUV6TEdzTiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoyLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQncyBjcmVhdGUgYSBzaW1wbGUgcmVxdWlyZW1lbnRzLnR4dCBmaWxlIHRvIGVuc3VyZSBhbGwgdGhlIG5lY2Vzc2FyeSBsaWJyYXJpZXMgYXJlIGluc3RhbGxlZDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIxYzRhMDlmMy02NWQ4LTQ5OGMtYmEzMS1hNjA5NTg2ZmIwMmQiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFLNWNEbmhEeUFGRDgzZ05jRVJOcVRlIiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImZpbGVfcGF0aFwiOiBcIlJFQURNRS5tZFwiLCBcImZpbGVfY29udGVudFwiOiBcIiMgRGlnaXRhbCBEYXRhIEFuYWx5c2lzXFxuXFxuQSBkYXRhIGFuYWx5c2lzIHByb2plY3QgZm9yIGFuYWx5emluZyBkaWdpdGFsIG1hcmtldGluZyBhbmQgY3VzdG9tZXIgZGF0YS5cXG5cXG4jIyBQcm9qZWN0IE92ZXJ2aWV3XFxuXFxuVGhpcyBwcm9qZWN0IGFuYWx5emVzIHZhcmlvdXMgZGlnaXRhbCBtYXJrZXRpbmcgYW5kIGN1c3RvbWVyIGRhdGFzZXRzIHRvIGV4dHJhY3QgaW5zaWdodHMgYW5kIHZpc3VhbGl6ZSBwZXJmb3JtYW5jZSBtZXRyaWNzLlxcblxcbiMjIERhdGFzZXRzXFxuXFxuVGhlIHByb2plY3QgaW5jbHVkZXMgdGhlIGZvbGxvd2luZyBkYXRhc2V0cyBpbiB0aGUgYGRhdGEvYCBkaXJlY3Rvcnk6XFxuXFxuLSBgZ29vZ2xlX2FuYWx5dGljc19kYXRhLmNzdmA6IFdlYiBhbmFseXRpY3MgZGF0YSBpbmNsdWRpbmcgc2Vzc2lvbnMsIGNvbnZlcnNpb25zLCBhbmQgcmV2ZW51ZVxcbi0gYGN1c3RvbWVyX2RhdGEuY3N2YDogQ3VzdG9tZXIgZGVtb2dyYXBoaWMgYW5kIHB1cmNoYXNlIGluZm9ybWF0aW9uXFxuLSBgZmFjZWJvb2tfYWRzX2RhdGEuY3N2YDogRmFjZWJvb2sgYWR2ZXJ0aXNpbmcgcGVyZm9ybWFuY2UgbWV0cmljc1xcbi0gYGluc3RhZ3JhbV9hZHNfZGF0YS5jc3ZgOiBJbnN0YWdyYW0gYWR2ZXJ0aXNpbmcgcGVyZm9ybWFuY2UgbWV0cmljc1xcbi0gYGdvb2dsZV9hZHNfZGF0YS5jc3ZgOiBHb29nbGUgQWRzIHBlcmZvcm1hbmNlIG1ldHJpY3NcXG4tIGBjdXN0b21lcl90b3VjaHBvaW50cy5jc3ZgOiBDdXN0b21lciBpbnRlcmFjdGlvbiBkYXRhIGFjcm9zcyBkaWZmZXJlbnQgY2hhbm5lbHNcXG4tIGBnb29nbGVfc2VhcmNoX2NvbnNvbGVfZGF0YS5jc3ZgOiBTZWFyY2ggcGVyZm9ybWFuY2UgZGF0YSBmcm9tIEdvb2dsZSBTZWFyY2ggQ29uc29sZVxcblxcbiMjIFNldHVwXFxuXFxuMS4gQ3JlYXRlIGEgdmlydHVhbCBlbnZpcm9ubWVudCAob3B0aW9uYWwgYnV0IHJlY29tbWVuZGVkKTpcXG4gICBgYGBcXG4gICBweXRob24gLW0gdmVudiAudmVudlxcbiAgIHNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGUgICMgT24gV2luZG93czogLnZlbnZcXFxcU2NyaXB0c1xcXFxhY3RpdmF0ZVxcbiAgIGBgYFxcblxcbjIuIEluc3RhbGwgdGhlIHJlcXVpcmVkIHBhY2thZ2VzOlxcbiAgIGBgYFxcbiAgIHBpcCBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHRcXG4gICBgYGBcXG5cXG4jIyBSdW5uaW5nIHRoZSBBbmFseXNpc1xcblxcblRvIHJ1biB0aGUgZGF0YSBhbmFseXNpcyBzY3JpcHQ6XFxuXFxuYGBgXFxucHl0aG9uIGRhdGFfYW5hbHlzaXMucHlcXG5gYGBcXG5cXG5UaGlzIHdpbGw6XFxuMS4gTG9hZCBhbGwgZGF0YXNldHNcXG4yLiBQZXJmb3JtIGFuYWx5c2lzIG9uIEdvb2dsZSBBbmFseXRpY3MgZGF0YVxcbjMuIEFuYWx5emUgY3VzdG9tZXIgZGVtb2dyYXBoaWNzIGFuZCBiZWhhdmlvclxcbjQuIENvbXBhcmUgYWQgcGVyZm9ybWFuY2UgYWNyb3NzIHBsYXRmb3Jtc1xcbjUuIEdlbmVyYXRlIGludGVyYWN0aXZlIEhUTUwgdmlzdWFsaXphdGlvbnNcXG5cXG4jIyBWaXN1YWxpemF0aW9uc1xcblxcblRoZSBzY3JpcHQgZ2VuZXJhdGVzIHNldmVyYWwgaW50ZXJhY3RpdmUgUGxvdGx5IHZpc3VhbGl6YXRpb25zIHNhdmVkIGFzIEhUTUwgZmlsZXM6XFxuXFxuLSBgc2Vzc2lvbnNfYnlfc291cmNlLmh0bWxgOiBCYXIgY2hhcnQgb2Ygc2Vzc2lvbnMgYnkgdHJhZmZpYyBzb3VyY2VcXG4tIGBzZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZS5odG1sYDogVGltZSBzZXJpZXMgb2Ygc2Vzc2lvbnMgYW5kIHRyYW5zYWN0aW9uc1xcbi0gYHNlc3Npb25zX2J5X2RldmljZS5odG1sYDogUGllIGNoYXJ0IG9mIHNlc3Npb25zIGJ5IGRldmljZSBjYXRlZ29yeVxcbi0gYGN1c3RvbWVyX3NlZ21lbnRzLmh0bWxgOiBCYXIgY2hhcnQgb2YgY3VzdG9tZXIgc2VnbWVudHNcXG4tIGBhZ2VfZGlzdHJpYnV0aW9uLmh0bWxgOiBIaXN0b2dyYW0gb2YgY3VzdG9tZXIgYWdlIGRpc3RyaWJ1dGlvblxcbi0gYGxveWFsdHlfdGllcl9hbmFseXNpcy5odG1sYDogQW5hbHlzaXMgb2Ygc3BlbmRpbmcgYnkgbG95YWx0eSB0aWVyXFxuLSBgcGxhdGZvcm1fY29udmVyc2lvbnMuaHRtbGA6IENvbXBhcmlzb24gb2YgY29udmVyc2lvbnMgYWNyb3NzIGFkIHBsYXRmb3Jtc1xcbi0gYHBsYXRmb3JtX3JvYXMuaHRtbGA6IENvbXBhcmlzb24gb2YgUk9BUyBhY3Jvc3MgYWQgcGxhdGZvcm1zXFxuLSBgZGFpbHlfY29udmVyc2lvbnMuaHRtbGA6IFRpbWUgc2VyaWVzIG9mIGRhaWx5IGNvbnZlcnNpb25zIGJ5IHBsYXRmb3JtXFxuXFxuT3BlbiB0aGVzZSBIVE1MIGZpbGVzIGluIGEgd2ViIGJyb3dzZXIgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgdmlzdWFsaXphdGlvbnMuXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQncyBhbHNvIGNyZWF0ZSBhIFJFQURNRS5tZCBmaWxlIHRvIGRvY3VtZW50IHRoZSBwcm9qZWN0OlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBzYXZlZCBzdWNjZXNzZnVsbHkuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxMThOUG0zdEtNcEx1MWRSTVF5Z0I5byJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoyLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6IkxldCdzIGFsc28gY3JlYXRlIGEgUkVBRE1FLm1kIGZpbGUgdG8gZG9jdW1lbnQgdGhlIHByb2plY3Q6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiOTM2NTQ3OTgtZmY1ZC00ODdkLTg0NzMtZWMwZGU3MTU4MDQzIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUUN1M0FtaVlxWXJaeU55WXVjUHc4RSIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJweXRob24gZGF0YV9hbmFseXNpcy5weVwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDYwfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0J3MgdGVzdCB0aGUgc2NyaXB0IHRvIG1ha2Ugc3VyZSBpdCB3b3JrczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkZpbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUs1Y0RuaER5QUZEODNnTmNFUk5xVGUifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MiwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiJMZXQncyB0ZXN0IHRoZSBzY3JpcHQgdG8gbWFrZSBzdXJlIGl0IHdvcmtzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjkyODA5MTFhLWQ2ZjEtNGNjMS1hMDY4LTQ0M2FlNWYwYTg2NCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkdyZWF0ISBJJ3ZlIHNldCB1cCBhIGNvbXBsZXRlIGRhdGEgYW5hbHlzaXMgZW52aXJvbm1lbnQgZm9yIHlvdSB3aXRoIHRoZSBsaWJyYXJpZXMgeW91IGltcG9ydGVkLiBIZXJlJ3Mgd2hhdCBJJ3ZlIGNyZWF0ZWQ6XG5cbjEuICoqZGF0YV9hbmFseXNpcy5weSoqIC0gQSBjb21wcmVoZW5zaXZlIFB5dGhvbiBzY3JpcHQgdGhhdDpcbiAgIC0gTG9hZHMgYWxsIHlvdXIgQ1NWIGRhdGFzZXRzIGZyb20gdGhlIGRhdGEgZGlyZWN0b3J5XG4gICAtIFBlcmZvcm1zIGFuYWx5c2lzIG9uIEdvb2dsZSBBbmFseXRpY3MgZGF0YVxuICAgLSBBbmFseXplcyBjdXN0b21lciBkZW1vZ3JhcGhpY3MgYW5kIGJlaGF2aW9yXG4gICAtIENvbXBhcmVzIGFkIHBlcmZvcm1hbmNlIGFjcm9zcyBwbGF0Zm9ybXMgKEZhY2Vib29rLCBJbnN0YWdyYW0sIEdvb2dsZSBBZHMpXG4gICAtIEdlbmVyYXRlcyBpbnRlcmFjdGl2ZSB2aXN1YWxpemF0aW9uc1xuXG4yLiAqKnJlcXVpcmVtZW50cy50eHQqKiAtIENvbnRhaW5zIHRoZSBuZWNlc3NhcnkgZGVwZW5kZW5jaWVzOlxuICAgLSBwYW5kYXNcbiAgIC0gbnVtcHlcbiAgIC0gcGxvdGx5XG4gICAtIGRhdGV0aW1lXG5cbjMuICoqUkVBRE1FLm1kKiogLSBEb2N1bWVudGF0aW9uIGZvciB5b3VyIHByb2plY3RcblxuVGhlIHNjcmlwdCByYW4gc3VjY2Vzc2Z1bGx5IGFuZCBnZW5lcmF0ZWQgc2V2ZXJhbCBpbnRlcmFjdGl2ZSBIVE1MIHZpc3VhbGl6YXRpb25zOlxuXG4tIGBzZXNzaW9uc19ieV9zb3VyY2UuaHRtbGAgLSBTaG93cyB3aGljaCB0cmFmZmljIHNvdXJjZXMgZHJpdmUgdGhlIG1vc3Qgc2Vzc2lvbnNcbi0gYHNlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lLmh0bWxgIC0gVGltZSBzZXJpZXMgc2hvd2luZyBzZXNzaW9ucyBhbmQgdHJhbnNhY3Rpb25zXG4tIGBzZXNzaW9uc19ieV9kZXZpY2UuaHRtbGAgLSBCcmVha2Rvd24gb2Ygc2Vzc2lvbnMgYnkgZGV2aWNlIGNhdGVnb3J5XG4tIGBjdXN0b21lcl9zZWdtZW50cy5odG1sYCAtIERpc3RyaWJ1dGlvbiBvZiBjdXN0b21lciBzZWdtZW50c1xuLSBgYWdlX2Rpc3RyaWJ1dGlvbi5odG1sYCAtIEhpc3RvZ3JhbSBvZiBjdXN0b21lciBhZ2VzXG4tIGBsb3lhbHR5X3RpZXJfYW5hbHlzaXMuaHRtbGAgLSBTcGVuZGluZyBwYXR0ZXJucyBieSBsb3lhbHR5IHRpZXJcbi0gYHBsYXRmb3JtX2NvbnZlcnNpb25zLmh0bWxgIC0gQ29tcGFyaXNvbiBvZiBjb252ZXJzaW9ucyBhY3Jvc3MgYWQgcGxhdGZvcm1zXG4tIGBwbGF0Zm9ybV9yb2FzLmh0bWxgIC0gUmV0dXJuIG9uIGFkIHNwZW5kIGNvbXBhcmlzb25cbi0gYGRhaWx5X2NvbnZlcnNpb25zLmh0bWxgIC0gRGFpbHkgY29udmVyc2lvbiB0cmVuZHMgYnkgcGxhdGZvcm1cblxuWW91IGNhbiBvcGVuIGFueSBvZiB0aGVzZSBIVE1MIGZpbGVzIGluIHlvdXIgd2ViIGJyb3dzZXIgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgdmlzdWFsaXphdGlvbnMuIFBsb3RseSBjcmVhdGVzIGZ1bGx5IGludGVyYWN0aXZlIGNoYXJ0cyB0aGF0IGFsbG93IHlvdSB0byB6b29tLCBwYW4sIGFuZCBob3ZlciBmb3IgbW9yZSBkZXRhaWxzLlxuXG5UaGUgYW5hbHlzaXMgcmV2ZWFsZWQgc29tZSBpbnRlcmVzdGluZyBpbnNpZ2h0czpcbi0gWW91ciB0b3RhbCByZXZlbnVlIGZyb20gdGhlIGFuYWx5emVkIHBlcmlvZCBpcyAkMzQsNjUwXG4tIFRoZSBhdmVyYWdlIGNvbnZlcnNpb24gcmF0ZSBpcyBhcm91bmQgNSVcbi0gRmFjZWJvb2sgYWRzIGdlbmVyYXRlZCB0aGUgbW9zdCBjb252ZXJzaW9ucyAoMTY5KSwgZm9sbG93ZWQgYnkgSW5zdGFncmFtICgxMzIpIGFuZCBHb29nbGUgQWRzICgxMTcpXG4tIFlvdXIgY3VzdG9tZXIgYmFzZSBoYXMgYW4gYXZlcmFnZSBhZ2Ugb2YgMzQuNCB5ZWFycyB3aXRoIGFuIGV2ZW4gZ2VuZGVyIGRpc3RyaWJ1dGlvblxuXG5Xb3VsZCB5b3UgbGlrZSBtZSB0byBlbmhhbmNlIGFueSBzcGVjaWZpYyBwYXJ0IG9mIHRoZSBhbmFseXNpcyBvciBhZGQgYWRkaXRpb25hbCB2aXN1YWxpemF0aW9ucyBmb3IgcGFydGljdWxhciBtZXRyaWNzP1xuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG4gICAgICAgIDxyZXR1cm4tY29kZT5cbiAgICAgICAgMFxuICAgICAgICA8L3JldHVybi1jb2RlPlxuICAgICAgICA8c3Rkb3V0PlxuICAgICAgICBTdGFydGluZyBkYXRhIGFuYWx5c2lzLi4uXG5Mb2FkaW5nIGRhdGFzZXRzLi4uXG5BbGwgZGF0YXNldHMgbG9hZGVkIHN1Y2Nlc3NmdWxseSFcblxuPT09IEdvb2dsZSBBbmFseXRpY3MgQW5hbHlzaXMgPT09XG5cbkJhc2ljIFN0YXRpc3RpY3M6XG5Ub3RhbCBzZXNzaW9uczogOTUyN1xuVG90YWwgbmV3IHVzZXJzOiA1MzQzXG5Ub3RhbCB0cmFuc2FjdGlvbnM6IDQ5NVxuVG90YWwgcmV2ZW51ZTogJDM0NjUwLjAwXG5BdmVyYWdlIGNvbnZlcnNpb24gcmF0ZTogNS4wMCVcblxuU2Vzc2lvbnMgYnkgc291cmNlIGNoYXJ0IHNhdmVkIGFzICdzZXNzaW9uc19ieV9zb3VyY2UuaHRtbCdcblNlc3Npb25zIGFuZCB0cmFuc2FjdGlvbnMgb3ZlciB0aW1lIGNoYXJ0IHNhdmVkIGFzICdzZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZS5odG1sJ1xuU2Vzc2lvbnMgYnkgZGV2aWNlIGNoYXJ0IHNhdmVkIGFzICdzZXNzaW9uc19ieV9kZXZpY2UuaHRtbCdcblxuPT09IEN1c3RvbWVyIERhdGEgQW5hbHlzaXMgPT09XG5cbkN1c3RvbWVyIERlbW9ncmFwaGljczpcblRvdGFsIGN1c3RvbWVyczogMjBcbkdlbmRlciBkaXN0cmlidXRpb246IHsnTSc6IDAuNSwgJ0YnOiAwLjV9XG5BdmVyYWdlIGFnZTogMzQuNCB5ZWFyc1xuQXZlcmFnZSB0b3RhbCBzcGVuZDogJDkzMi4wNVxuXG5DdXN0b21lciBzZWdtZW50cyBjaGFydCBzYXZlZCBhcyAnY3VzdG9tZXJfc2VnbWVudHMuaHRtbCdcbkFnZSBkaXN0cmlidXRpb24gY2hhcnQgc2F2ZWQgYXMgJ2FnZV9kaXN0cmlidXRpb24uaHRtbCdcbkxveWFsdHkgdGllciBhbmFseXNpcyBjaGFydCBzYXZlZCBhcyAnbG95YWx0eV90aWVyX2FuYWx5c2lzLmh0bWwnXG5cbj09PSBBZCBQZXJmb3JtYW5jZSBBbmFseXNpcyA9PT1cblxuUGxhdGZvcm0gUGVyZm9ybWFuY2U6XG4gICAgIHBsYXRmb3JtICBpbXByZXNzaW9ucyAgY2xpY2tzICBjb252ZXJzaW9ucyAgICBzcGVuZCAgY29udmVyc2lvbl92YWx1ZVxuMCAgICBGYWNlYm9vayAgICAgICAgODQzNDQgICAgNDE1NCAgICAgICAgICAxNjkgIDM1MzQuODAgICAgICAgICAgIDExOTMwLjBcbjEgIEdvb2dsZSBBZHMgICAgICAgIDMwNTY3ICAgIDIwMjEgICAgICAgICAgMTE3ICA0MDc5LjAwICAgICAgICAgICAgODM0MC4wXG4yICAgSW5zdGFncmFtICAgICAgICA3MTYzMSAgICAzMzkxICAgICAgICAgIDEzMiAgMzA1MS4xNSAgICAgICAgICAgIDkzMzAuMFxuXG5QbGF0Zm9ybSBjb252ZXJzaW9ucyBjaGFydCBzYXZlZCBhcyAncGxhdGZvcm1fY29udmVyc2lvbnMuaHRtbCdcblBsYXRmb3JtIFJPQVMgY2hhcnQgc2F2ZWQgYXMgJ3BsYXRmb3JtX3JvYXMuaHRtbCdcbkRhaWx5IGNvbnZlcnNpb25zIGNoYXJ0IHNhdmVkIGFzICdkYWlseV9jb252ZXJzaW9ucy5odG1sJ1xuXG5BbmFseXNpcyBjb21wbGV0ZSEgSFRNTCB2aXN1YWxpemF0aW9ucyBoYXZlIGJlZW4gc2F2ZWQgdG8gdGhlIGN1cnJlbnQgZGlyZWN0b3J5LlxuWW91IGNhbiBvcGVuIHRoZXNlIEhUTUwgZmlsZXMgaW4geW91ciB3ZWIgYnJvd3NlciB0byB2aWV3IHRoZSBpbnRlcmFjdGl2ZSBjaGFydHMuXG5cbiAgICAgICAgPC9zdGRvdXQ+XG4gICAgICAgIDxzdGRlcnI+XG4gICAgICAgIFxuICAgICAgICA8L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFRQ3UzQW1pWXFZclp5TnlZdWNQdzhFIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiR3JlYXQhIEkndmUgc2V0IHVwIGEgY29tcGxldGUgZGF0YSBhbmFseXNpcyBlbnZpcm9ubWVudCBmb3IgeW91IHdpdGggdGhlIGxpYnJhcmllcyB5b3UgaW1wb3J0ZWQuIEhlcmUncyB3aGF0IEkndmUgY3JlYXRlZDpcblxuMS4gKipkYXRhX2FuYWx5c2lzLnB5KiogLSBBIGNvbXByZWhlbnNpdmUgUHl0aG9uIHNjcmlwdCB0aGF0OlxuICAgLSBMb2FkcyBhbGwgeW91ciBDU1YgZGF0YXNldHMgZnJvbSB0aGUgZGF0YSBkaXJlY3RvcnlcbiAgIC0gUGVyZm9ybXMgYW5hbHlzaXMgb24gR29vZ2xlIEFuYWx5dGljcyBkYXRhXG4gICAtIEFuYWx5emVzIGN1c3RvbWVyIGRlbW9ncmFwaGljcyBhbmQgYmVoYXZpb3JcbiAgIC0gQ29tcGFyZXMgYWQgcGVyZm9ybWFuY2UgYWNyb3NzIHBsYXRmb3JtcyAoRmFjZWJvb2ssIEluc3RhZ3JhbSwgR29vZ2xlIEFkcylcbiAgIC0gR2VuZXJhdGVzIGludGVyYWN0aXZlIHZpc3VhbGl6YXRpb25zXG5cbjIuICoqcmVxdWlyZW1lbnRzLnR4dCoqIC0gQ29udGFpbnMgdGhlIG5lY2Vzc2FyeSBkZXBlbmRlbmNpZXM6XG4gICAtIHBhbmRhc1xuICAgLSBudW1weVxuICAgLSBwbG90bHlcbiAgIC0gZGF0ZXRpbWVcblxuMy4gKipSRUFETUUubWQqKiAtIERvY3VtZW50YXRpb24gZm9yIHlvdXIgcHJvamVjdFxuXG5UaGUgc2NyaXB0IHJhbiBzdWNjZXNzZnVsbHkgYW5kIGdlbmVyYXRlZCBzZXZlcmFsIGludGVyYWN0aXZlIEhUTUwgdmlzdWFsaXphdGlvbnM6XG5cbi0gYHNlc3Npb25zX2J5X3NvdXJjZS5odG1sYCAtIFNob3dzIHdoaWNoIHRyYWZmaWMgc291cmNlcyBkcml2ZSB0aGUgbW9zdCBzZXNzaW9uc1xuLSBgc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWUuaHRtbGAgLSBUaW1lIHNlcmllcyBzaG93aW5nIHNlc3Npb25zIGFuZCB0cmFuc2FjdGlvbnNcbi0gYHNlc3Npb25zX2J5X2RldmljZS5odG1sYCAtIEJyZWFrZG93biBvZiBzZXNzaW9ucyBieSBkZXZpY2UgY2F0ZWdvcnlcbi0gYGN1c3RvbWVyX3NlZ21lbnRzLmh0bWxgIC0gRGlzdHJpYnV0aW9uIG9mIGN1c3RvbWVyIHNlZ21lbnRzXG4tIGBhZ2VfZGlzdHJpYnV0aW9uLmh0bWxgIC0gSGlzdG9ncmFtIG9mIGN1c3RvbWVyIGFnZXNcbi0gYGxveWFsdHlfdGllcl9hbmFseXNpcy5odG1sYCAtIFNwZW5kaW5nIHBhdHRlcm5zIGJ5IGxveWFsdHkgdGllclxuLSBgcGxhdGZvcm1fY29udmVyc2lvbnMuaHRtbGAgLSBDb21wYXJpc29uIG9mIGNvbnZlcnNpb25zIGFjcm9zcyBhZCBwbGF0Zm9ybXNcbi0gYHBsYXRmb3JtX3JvYXMuaHRtbGAgLSBSZXR1cm4gb24gYWQgc3BlbmQgY29tcGFyaXNvblxuLSBgZGFpbHlfY29udmVyc2lvbnMuaHRtbGAgLSBEYWlseSBjb252ZXJzaW9uIHRyZW5kcyBieSBwbGF0Zm9ybVxuXG5Zb3UgY2FuIG9wZW4gYW55IG9mIHRoZXNlIEhUTUwgZmlsZXMgaW4geW91ciB3ZWIgYnJvd3NlciB0byBpbnRlcmFjdCB3aXRoIHRoZSB2aXN1YWxpemF0aW9ucy4gUGxvdGx5IGNyZWF0ZXMgZnVsbHkgaW50ZXJhY3RpdmUgY2hhcnRzIHRoYXQgYWxsb3cgeW91IHRvIHpvb20sIHBhbiwgYW5kIGhvdmVyIGZvciBtb3JlIGRldGFpbHMuXG5cblRoZSBhbmFseXNpcyByZXZlYWxlZCBzb21lIGludGVyZXN0aW5nIGluc2lnaHRzOlxuLSBZb3VyIHRvdGFsIHJldmVudWUgZnJvbSB0aGUgYW5hbHl6ZWQgcGVyaW9kIGlzICQzNCw2NTBcbi0gVGhlIGF2ZXJhZ2UgY29udmVyc2lvbiByYXRlIGlzIGFyb3VuZCA1JVxuLSBGYWNlYm9vayBhZHMgZ2VuZXJhdGVkIHRoZSBtb3N0IGNvbnZlcnNpb25zICgxNjkpLCBmb2xsb3dlZCBieSBJbnN0YWdyYW0gKDEzMikgYW5kIEdvb2dsZSBBZHMgKDExNylcbi0gWW91ciBjdXN0b21lciBiYXNlIGhhcyBhbiBhdmVyYWdlIGFnZSBvZiAzNC40IHllYXJzIHdpdGggYW4gZXZlbiBnZW5kZXIgZGlzdHJpYnV0aW9uXG5cbldvdWxkIHlvdSBsaWtlIG1lIHRvIGVuaGFuY2UgYW55IHNwZWNpZmljIHBhcnQgb2YgdGhlIGFuYWx5c2lzIG9yIGFkZCBhZGRpdGlvbmFsIHZpc3VhbGl6YXRpb25zIGZvciBwYXJ0aWN1bGFyIG1ldHJpY3M/XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiI0YWM3MTI1NS00M2Q4LTRmODQtODIzZi0yYWNlNTU2NGYzNDciLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjY3ZjMzYWVlLWUyNzktNDU1NS05MzA2LWFhYTUwYTlhNmU4MiIsInJlcXVlc3RfbWVzc2FnZSI6ImhvdyB0byBydW4gaXQgd2ViIGJhc2U/IGNhbiB5b3UgY3JlYXRlIGl0IGJ5IGRqbmFnbyIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJob3cgdG8gcnVuIGl0IHdlYiBiYXNlPyBjYW4geW91IGNyZWF0ZSBpdCBieSBkam5hZ28ifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTN5VnVINEh3SGtUS2M4TmFKWFNxZ1IiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwicGlwIGluc3RhbGwgZGphbmdvXCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMTIwfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSdsbCBoZWxwIHlvdSBjb252ZXJ0IHRoaXMgZGF0YSBhbmFseXNpcyBwcm9qZWN0IGludG8gYSBEamFuZ28gd2ViIGFwcGxpY2F0aW9uLiBUaGlzIHdpbGwgYWxsb3cgeW91IHRvIHZpZXcgdGhlIHZpc3VhbGl6YXRpb25zIGluIGEgd2ViIGJyb3dzZXIgdGhyb3VnaCBhIHByb3BlciB3ZWIgaW50ZXJmYWNlIHJhdGhlciB0aGFuIGp1c3Qgb3BlbmluZyBIVE1MIGZpbGVzLlxuXG5MZXQgbWUgY3JlYXRlIGEgRGphbmdvIHByb2plY3QgdGhhdCB3aWxsIGRpc3BsYXkgdGhlc2UgdmlzdWFsaXphdGlvbnMuIEhlcmUncyBteSBwbGFuOlxuXG4xLiBTZXQgdXAgYSBEamFuZ28gcHJvamVjdCBzdHJ1Y3R1cmVcbjIuIENyZWF0ZSBhIERqYW5nbyBhcHAgZm9yIHRoZSBkYXRhIGFuYWx5c2lzXG4zLiBNb2RpZnkgdGhlIGRhdGEgYW5hbHlzaXMgY29kZSB0byB3b3JrIHdpdGhpbiBEamFuZ29cbjQuIENyZWF0ZSB2aWV3cyBhbmQgdGVtcGxhdGVzIHRvIGRpc3BsYXkgdGhlIHZpc3VhbGl6YXRpb25zXG41LiBTZXQgdXAgVVJMcyB0byBhY2Nlc3MgdGhlIGRpZmZlcmVudCB2aXN1YWxpemF0aW9uc1xuXG5MZXQncyBzdGFydCBieSBzZXR0aW5nIHVwIHRoZSBEamFuZ28gcHJvamVjdDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiaG93IHRvIHJ1biBpdCB3ZWIgYmFzZT8gY2FuIHlvdSBjcmVhdGUgaXQgYnkgZGpuYWdvIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiSSdsbCBoZWxwIHlvdSBjb252ZXJ0IHRoaXMgZGF0YSBhbmFseXNpcyBwcm9qZWN0IGludG8gYSBEamFuZ28gd2ViIGFwcGxpY2F0aW9uLiBUaGlzIHdpbGwgYWxsb3cgeW91IHRvIHZpZXcgdGhlIHZpc3VhbGl6YXRpb25zIGluIGEgd2ViIGJyb3dzZXIgdGhyb3VnaCBhIHByb3BlciB3ZWIgaW50ZXJmYWNlIHJhdGhlciB0aGFuIGp1c3Qgb3BlbmluZyBIVE1MIGZpbGVzLlxuXG5MZXQgbWUgY3JlYXRlIGEgRGphbmdvIHByb2plY3QgdGhhdCB3aWxsIGRpc3BsYXkgdGhlc2UgdmlzdWFsaXphdGlvbnMuIEhlcmUncyBteSBwbGFuOlxuXG4xLiBTZXQgdXAgYSBEamFuZ28gcHJvamVjdCBzdHJ1Y3R1cmVcbjIuIENyZWF0ZSBhIERqYW5nbyBhcHAgZm9yIHRoZSBkYXRhIGFuYWx5c2lzXG4zLiBNb2RpZnkgdGhlIGRhdGEgYW5hbHlzaXMgY29kZSB0byB3b3JrIHdpdGhpbiBEamFuZ29cbjQuIENyZWF0ZSB2aWV3cyBhbmQgdGVtcGxhdGVzIHRvIGRpc3BsYXkgdGhlIHZpc3VhbGl6YXRpb25zXG41LiBTZXQgdXAgVVJMcyB0byBhY2Nlc3MgdGhlIGRpZmZlcmVudCB2aXN1YWxpemF0aW9uc1xuXG5MZXQncyBzdGFydCBieSBzZXR0aW5nIHVwIHRoZSBEamFuZ28gcHJvamVjdDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0ZDIxZjlhOC0xOWEyLTQ1ZmMtODlmZi1mMTI4ZGFmZjU4MzUiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFZWnVIc0ZEUTdmSHppZURSYjFqOXNWIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImRqYW5nby1hZG1pbiBzdGFydHByb2plY3QgZGlnaXRhbF9kYXRhX3Byb2plY3QgLlwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDMwfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCdzIGNyZWF0ZSB0aGUgRGphbmdvIHByb2plY3Qgc3RydWN0dXJlOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG4gICAgICAgIDxyZXR1cm4tY29kZT5cbiAgICAgICAgMFxuICAgICAgICA8L3JldHVybi1jb2RlPlxuICAgICAgICA8c3Rkb3V0PlxuICAgICAgICBSZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZGphbmdvIGluIC9vcHQvYW5hY29uZGEzL2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcyAoNC4yLjcpXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogYXNnaXJlZjw0LD49My42LjAgaW4gL29wdC9hbmFjb25kYTMvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzIChmcm9tIGRqYW5nbykgKDMuOC4xKVxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHNxbHBhcnNlPj0wLjMuMSBpbiAvb3B0L2FuYWNvbmRhMy9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMgKGZyb20gZGphbmdvKSAoMC41LjMpXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdHlwaW5nLWV4dGVuc2lvbnM+PTQgaW4gL29wdC9hbmFjb25kYTMvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzIChmcm9tIGFzZ2lyZWY8NCw+PTMuNi4wLT5kamFuZ28pICg0LjEyLjIpXG5cbiAgICAgICAgPC9zdGRvdXQ+XG4gICAgICAgIDxzdGRlcnI+XG4gICAgICAgIFxuICAgICAgICA8L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDEzeVZ1SDRId0hrVEtjOE5hSlhTcWdSIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCdzIGNyZWF0ZSB0aGUgRGphbmdvIHByb2plY3Qgc3RydWN0dXJlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImE1ZDQ3ZmNiLTVhYTktNDkxMy1iYjFjLTM0MDVkOTFkM2Q4YSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMU1BN2MyQXBCN3NMd3NHUFdXcTNiaGYiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwicHl0aG9uIG1hbmFnZS5weSBzdGFydGFwcCBkYXRhX2Rhc2hib2FyZFwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDMwfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCdzIGNyZWF0ZSBhIERqYW5nbyBhcHAgZm9yIG91ciBkYXRhIGFuYWx5c2lzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuPHN0ZG91dD5cblxuPC9zdGRvdXQ+XG48c3RkZXJyPlxuXG48L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFZWnVIc0ZEUTdmSHppZURSYjFqOXNWIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjUsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCdzIGNyZWF0ZSBhIERqYW5nbyBhcHAgZm9yIG91ciBkYXRhIGFuYWx5c2lzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjBjMGMzNmExLTZmNzQtNDM2NS05ZmYyLWYyYmJlNzNhNTkyYyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTRtSlFIdUY3ZEhkRjY4a0pIc25XM0UiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwicmVxdWlyZW1lbnRzLnR4dFwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0J3MgdXBkYXRlIHRoZSByZXF1aXJlbWVudHMudHh0IGZpbGUgdG8gaW5jbHVkZSBEamFuZ286XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMU1BN2MyQXBCN3NMd3NHUFdXcTNiaGYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NiwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiJMZXQncyB1cGRhdGUgdGhlIHJlcXVpcmVtZW50cy50eHQgZmlsZSB0byBpbmNsdWRlIERqYW5nbzpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0MzY5Mzc1OC1lN2UxLTQwOGEtOWYwOS1kMTllZDgwY2Q1ZGEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFYWjhURGZiamdkYnB3cVlQNnhURm5tIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJyZXF1aXJlbWVudHMudHh0XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcInBhbmRhcz49MS4zLjBcXG5udW1weT49MS4yMC4wXFxucGxvdGx5Pj01LjMuMFxcbmRhdGV0aW1lXFxuXCIsIFwibmV3X3N0clwiOiBcInBhbmRhcz49MS4zLjBcXG5udW1weT49MS4yMC4wXFxucGxvdGx5Pj01LjMuMFxcbmRhdGV0aW1lXFxuZGphbmdvPj00LjIuMFxcblwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogMSwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiA0fV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHJlcXVpcmVtZW50cy50eHQ6XG4gICAgIDFcdHBhbmRhcz49MS4zLjBcbiAgICAgMlx0bnVtcHk+PTEuMjAuMFxuICAgICAzXHRwbG90bHk+PTUuMy4wXG4gICAgIDRcdGRhdGV0aW1lXG4gICAgIDVcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogNVxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxNG1KUUh1RjdkSGRGNjhrSkhzblczRSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo2LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIxYjY2ZTAzNi0xZGQ3LTQ0OGItOGZlNS04ZGE3OGVmZGNlNTEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFCY0pEZGtqZUFDeXJQVVFCd0ptV3FZIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcImRpZ2l0YWxfZGF0YV9wcm9qZWN0L3NldHRpbmdzLnB5XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0J3MgcmVnaXN0ZXIgb3VyIGFwcCBpbiB0aGUgRGphbmdvIHNldHRpbmdzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSByZXF1aXJlbWVudHMudHh0LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgIDFcdHBhbmRhcz49MS4zLjBcbiAgICAgMlx0bnVtcHk+PTEuMjAuMFxuICAgICAzXHRwbG90bHk+PTUuMy4wXG4gICAgIDRcdGRhdGV0aW1lXG4gICAgIDVcdGRqYW5nbz49NC4yLjBcbiAgICAgNlx0XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVhaOFREZmJqZ2RicHdxWVA2eFRGbm0ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NiwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0J3MgcmVnaXN0ZXIgb3VyIGFwcCBpbiB0aGUgRGphbmdvIHNldHRpbmdzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjZjNzAyMDY4LWViZDQtNGMyZS04YTY3LWNiZjA1MzAwODRjZSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMU16c1drYmJrV3VrTWEyNHFweFRrcEYiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcImRpZ2l0YWxfZGF0YV9wcm9qZWN0L3NldHRpbmdzLnB5XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIklOU1RBTExFRF9BUFBTID0gW1xcbiAgICAnZGphbmdvLmNvbnRyaWIuYWRtaW4nLFxcbiAgICAnZGphbmdvLmNvbnRyaWIuYXV0aCcsXFxuICAgICdkamFuZ28uY29udHJpYi5jb250ZW50dHlwZXMnLFxcbiAgICAnZGphbmdvLmNvbnRyaWIuc2Vzc2lvbnMnLFxcbiAgICAnZGphbmdvLmNvbnRyaWIubWVzc2FnZXMnLFxcbiAgICAnZGphbmdvLmNvbnRyaWIuc3RhdGljZmlsZXMnLFxcbl1cIiwgXCJuZXdfc3RyXCI6IFwiSU5TVEFMTEVEX0FQUFMgPSBbXFxuICAgICdkamFuZ28uY29udHJpYi5hZG1pbicsXFxuICAgICdkamFuZ28uY29udHJpYi5hdXRoJyxcXG4gICAgJ2RqYW5nby5jb250cmliLmNvbnRlbnR0eXBlcycsXFxuICAgICdkamFuZ28uY29udHJpYi5zZXNzaW9ucycsXFxuICAgICdkamFuZ28uY29udHJpYi5tZXNzYWdlcycsXFxuICAgICdkamFuZ28uY29udHJpYi5zdGF0aWNmaWxlcycsXFxuICAgICdkYXRhX2Rhc2hib2FyZCcsXFxuXVwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogMzMsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogNDB9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gZGlnaXRhbF9kYXRhX3Byb2plY3Qvc2V0dGluZ3MucHk6XG4gICAgIDFcdFwiXCJcIlxuICAgICAyXHREamFuZ28gc2V0dGluZ3MgZm9yIGRpZ2l0YWxfZGF0YV9wcm9qZWN0IHByb2plY3QuXG4gICAgIDNcdFxuICAgICA0XHRHZW5lcmF0ZWQgYnkgJ2RqYW5nby1hZG1pbiBzdGFydHByb2plY3QnIHVzaW5nIERqYW5nbyA0LjIuNy5cbiAgICAgNVx0XG4gICAgIDZcdEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoaXMgZmlsZSwgc2VlXG4gICAgIDdcdGh0dHBzOi8vZG9jcy5kamFuZ29wcm9qZWN0LmNvbS9lbi80LjIvdG9waWNzL3NldHRpbmdzL1xuICAgICA4XHRcbiAgICAgOVx0Rm9yIHRoZSBmdWxsIGxpc3Qgb2Ygc2V0dGluZ3MgYW5kIHRoZWlyIHZhbHVlcywgc2VlXG4gICAgMTBcdGh0dHBzOi8vZG9jcy5kamFuZ29wcm9qZWN0LmNvbS9lbi80LjIvcmVmL3NldHRpbmdzL1xuICAgIDExXHRcIlwiXCJcbiAgICAxMlx0XG4gICAgMTNcdGZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aFxuICAgIDE0XHRcbiAgICAxNVx0IyBCdWlsZCBwYXRocyBpbnNpZGUgdGhlIHByb2plY3QgbGlrZSB0aGlzOiBCQVNFX0RJUiAvICdzdWJkaXInLlxuICAgIDE2XHRCQVNFX0RJUiA9IFBhdGgoX19maWxlX18pLnJlc29sdmUoKS5wYXJlbnQucGFyZW50XG4gICAgMTdcdFxuICAgIDE4XHRcbiAgICAxOVx0IyBRdWljay1zdGFydCBkZXZlbG9wbWVudCBzZXR0aW5ncyAtIHVuc3VpdGFibGUgZm9yIHByb2R1Y3Rpb25cbiAgICAyMFx0IyBTZWUgaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi9ob3d0by9kZXBsb3ltZW50L2NoZWNrbGlzdC9cbiAgICAyMVx0XG4gICAgMjJcdCMgU0VDVVJJVFkgV0FSTklORzoga2VlcCB0aGUgc2VjcmV0IGtleSB1c2VkIGluIHByb2R1Y3Rpb24gc2VjcmV0IVxuICAgIDIzXHRTRUNSRVRfS0VZID0gJ2RqYW5nby1pbnNlY3VyZS0lN0BtbXN3NnF2eTI0Z2tfMy1xKmt2JGVyczNxZWkmaXEldWhrd2Q1aW93Jm94X2F1cidcbiAgICAyNFx0XG4gICAgMjVcdCMgU0VDVVJJVFkgV0FSTklORzogZG9uJ3QgcnVuIHdpdGggZGVidWcgdHVybmVkIG9uIGluIHByb2R1Y3Rpb24hXG4gICAgMjZcdERFQlVHID0gVHJ1ZVxuICAgIDI3XHRcbiAgICAyOFx0QUxMT1dFRF9IT1NUUyA9IFtdXG4gICAgMjlcdFxuICAgIDMwXHRcbiAgICAzMVx0IyBBcHBsaWNhdGlvbiBkZWZpbml0aW9uXG4gICAgMzJcdFxuICAgIDMzXHRJTlNUQUxMRURfQVBQUyA9IFtcbiAgICAzNFx0ICAgICdkamFuZ28uY29udHJpYi5hZG1pbicsXG4gICAgMzVcdCAgICAnZGphbmdvLmNvbnRyaWIuYXV0aCcsXG4gICAgMzZcdCAgICAnZGphbmdvLmNvbnRyaWIuY29udGVudHR5cGVzJyxcbiAgICAzN1x0ICAgICdkamFuZ28uY29udHJpYi5zZXNzaW9ucycsXG4gICAgMzhcdCAgICAnZGphbmdvLmNvbnRyaWIubWVzc2FnZXMnLFxuICAgIDM5XHQgICAgJ2RqYW5nby5jb250cmliLnN0YXRpY2ZpbGVzJyxcbiAgICA0MFx0XVxuICAgIDQxXHRcbiAgICA0Mlx0TUlERExFV0FSRSA9IFtcbiAgICA0M1x0ICAgICdkamFuZ28ubWlkZGxld2FyZS5zZWN1cml0eS5TZWN1cml0eU1pZGRsZXdhcmUnLFxuICAgIDQ0XHQgICAgJ2RqYW5nby5jb250cmliLnNlc3Npb25zLm1pZGRsZXdhcmUuU2Vzc2lvbk1pZGRsZXdhcmUnLFxuICAgIDQ1XHQgICAgJ2RqYW5nby5taWRkbGV3YXJlLmNvbW1vbi5Db21tb25NaWRkbGV3YXJlJyxcbiAgICA0Nlx0ICAgICdkamFuZ28ubWlkZGxld2FyZS5jc3JmLkNzcmZWaWV3TWlkZGxld2FyZScsXG4gICAgNDdcdCAgICAnZGphbmdvLmNvbnRyaWIuYXV0aC5taWRkbGV3YXJlLkF1dGhlbnRpY2F0aW9uTWlkZGxld2FyZScsXG4gICAgNDhcdCAgICAnZGphbmdvLmNvbnRyaWIubWVzc2FnZXMubWlkZGxld2FyZS5NZXNzYWdlTWlkZGxld2FyZScsXG4gICAgNDlcdCAgICAnZGphbmdvLm1pZGRsZXdhcmUuY2xpY2tqYWNraW5nLlhGcmFtZU9wdGlvbnNNaWRkbGV3YXJlJyxcbiAgICA1MFx0XVxuICAgIDUxXHRcbiAgICA1Mlx0Uk9PVF9VUkxDT05GID0gJ2RpZ2l0YWxfZGF0YV9wcm9qZWN0LnVybHMnXG4gICAgNTNcdFxuICAgIDU0XHRURU1QTEFURVMgPSBbXG4gICAgNTVcdCAgICB7XG4gICAgNTZcdCAgICAgICAgJ0JBQ0tFTkQnOiAnZGphbmdvLnRlbXBsYXRlLmJhY2tlbmRzLmRqYW5nby5EamFuZ29UZW1wbGF0ZXMnLFxuICAgIDU3XHQgICAgICAgICdESVJTJzogW10sXG4gICAgNThcdCAgICAgICAgJ0FQUF9ESVJTJzogVHJ1ZSxcbiAgICA1OVx0ICAgICAgICAnT1BUSU9OUyc6IHtcbiAgICA2MFx0ICAgICAgICAgICAgJ2NvbnRleHRfcHJvY2Vzc29ycyc6IFtcbiAgICA2MVx0ICAgICAgICAgICAgICAgICdkamFuZ28udGVtcGxhdGUuY29udGV4dF9wcm9jZXNzb3JzLmRlYnVnJyxcbiAgICA2Mlx0ICAgICAgICAgICAgICAgICdkamFuZ28udGVtcGxhdGUuY29udGV4dF9wcm9jZXNzb3JzLnJlcXVlc3QnLFxuICAgIDYzXHQgICAgICAgICAgICAgICAgJ2RqYW5nby5jb250cmliLmF1dGguY29udGV4dF9wcm9jZXNzb3JzLmF1dGgnLFxuICAgIDY0XHQgICAgICAgICAgICAgICAgJ2RqYW5nby5jb250cmliLm1lc3NhZ2VzLmNvbnRleHRfcHJvY2Vzc29ycy5tZXNzYWdlcycsXG4gICAgNjVcdCAgICAgICAgICAgIF0sXG4gICAgNjZcdCAgICAgICAgfSxcbiAgICA2N1x0ICAgIH0sXG4gICAgNjhcdF1cbiAgICA2OVx0XG4gICAgNzBcdFdTR0lfQVBQTElDQVRJT04gPSAnZGlnaXRhbF9kYXRhX3Byb2plY3Qud3NnaS5hcHBsaWNhdGlvbidcbiAgICA3MVx0XG4gICAgNzJcdFxuICAgIDczXHQjIERhdGFiYXNlXG4gICAgNzRcdCMgaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi9yZWYvc2V0dGluZ3MvI2RhdGFiYXNlc1xuICAgIDc1XHRcbiAgICA3Nlx0REFUQUJBU0VTID0ge1xuICAgIDc3XHQgICAgJ2RlZmF1bHQnOiB7XG4gICAgNzhcdCAgICAgICAgJ0VOR0lORSc6ICdkamFuZ28uZGIuYmFja2VuZHMuc3FsaXRlMycsXG4gICAgNzlcdCAgICAgICAgJ05BTUUnOiBCQVNFX0RJUiAvICdkYi5zcWxpdGUzJyxcbiAgICA4MFx0ICAgIH1cbiAgICA4MVx0fVxuICAgIDgyXHRcbiAgICA4M1x0XG4gICAgODRcdCMgUGFzc3dvcmQgdmFsaWRhdGlvblxuICAgIDg1XHQjIGh0dHBzOi8vZG9jcy5kamFuZ29wcm9qZWN0LmNvbS9lbi80LjIvcmVmL3NldHRpbmdzLyNhdXRoLXBhc3N3b3JkLXZhbGlkYXRvcnNcbiAgICA4Nlx0XG4gICAgODdcdEFVVEhfUEFTU1dPUkRfVkFMSURBVE9SUyA9IFtcbiAgICA4OFx0ICAgIHtcbiAgICA4OVx0ICAgICAgICAnTkFNRSc6ICdkamFuZ28uY29udHJpYi5hdXRoLnBhc3N3b3JkX3ZhbGlkYXRpb24uVXNlckF0dHJpYnV0ZVNpbWlsYXJpdHlWYWxpZGF0b3InLFxuICAgIDkwXHQgICAgfSxcbiAgICA5MVx0ICAgIHtcbiAgICA5Mlx0ICAgICAgICAnTkFNRSc6ICdkamFuZ28uY29udHJpYi5hdXRoLnBhc3N3b3JkX3ZhbGlkYXRpb24uTWluaW11bUxlbmd0aFZhbGlkYXRvcicsXG4gICAgOTNcdCAgICB9LFxuICAgIDk0XHQgICAge1xuICAgIDk1XHQgICAgICAgICdOQU1FJzogJ2RqYW5nby5jb250cmliLmF1dGgucGFzc3dvcmRfdmFsaWRhdGlvbi5Db21tb25QYXNzd29yZFZhbGlkYXRvcicsXG4gICAgOTZcdCAgICB9LFxuICAgIDk3XHQgICAge1xuICAgIDk4XHQgICAgICAgICdOQU1FJzogJ2RqYW5nby5jb250cmliLmF1dGgucGFzc3dvcmRfdmFsaWRhdGlvbi5OdW1lcmljUGFzc3dvcmRWYWxpZGF0b3InLFxuICAgIDk5XHQgICAgfSxcbiAgIDEwMFx0XVxuICAgMTAxXHRcbiAgIDEwMlx0XG4gICAxMDNcdCMgSW50ZXJuYXRpb25hbGl6YXRpb25cbiAgIDEwNFx0IyBodHRwczovL2RvY3MuZGphbmdvcHJvamVjdC5jb20vZW4vNC4yL3RvcGljcy9pMThuL1xuICAgMTA1XHRcbiAgIDEwNlx0TEFOR1VBR0VfQ09ERSA9ICdlbi11cydcbiAgIDEwN1x0XG4gICAxMDhcdFRJTUVfWk9ORSA9ICdVVEMnXG4gICAxMDlcdFxuICAgMTEwXHRVU0VfSTE4TiA9IFRydWVcbiAgIDExMVx0XG4gICAxMTJcdFVTRV9UWiA9IFRydWVcbiAgIDExM1x0XG4gICAxMTRcdFxuICAgMTE1XHQjIFN0YXRpYyBmaWxlcyAoQ1NTLCBKYXZhU2NyaXB0LCBJbWFnZXMpXG4gICAxMTZcdCMgaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi9ob3d0by9zdGF0aWMtZmlsZXMvXG4gICAxMTdcdFxuICAgMTE4XHRTVEFUSUNfVVJMID0gJ3N0YXRpYy8nXG4gICAxMTlcdFxuICAgMTIwXHQjIERlZmF1bHQgcHJpbWFyeSBrZXkgZmllbGQgdHlwZVxuICAgMTIxXHQjIGh0dHBzOi8vZG9jcy5kamFuZ29wcm9qZWN0LmNvbS9lbi80LjIvcmVmL3NldHRpbmdzLyNkZWZhdWx0LWF1dG8tZmllbGRcbiAgIDEyMlx0XG4gICAxMjNcdERFRkFVTFRfQVVUT19GSUVMRCA9ICdkamFuZ28uZGIubW9kZWxzLkJpZ0F1dG9GaWVsZCdcbiAgIDEyNFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxMjRcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUJjSkRka2plQUN5clBVUUJ3Sm1XcVkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NiwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYTAxOWZmNGQtNmE3ZC00YTRlLTg1YWItYTY2OGJhYTIyN2FhIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxSjd3ZFh6eDVaSEZ6Nmo3Q2tYaEhBTSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiZGlnaXRhbF9kYXRhX3Byb2plY3Qvc2V0dGluZ3MucHlcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiVEVNUExBVEVTID0gW1xcbiAgICB7XFxuICAgICAgICAnQkFDS0VORCc6ICdkamFuZ28udGVtcGxhdGUuYmFja2VuZHMuZGphbmdvLkRqYW5nb1RlbXBsYXRlcycsXFxuICAgICAgICAnRElSUyc6IFtdLFxcbiAgICAgICAgJ0FQUF9ESVJTJzogVHJ1ZSxcXG4gICAgICAgICdPUFRJT05TJzoge1xcbiAgICAgICAgICAgICdjb250ZXh0X3Byb2Nlc3NvcnMnOiBbXFxuICAgICAgICAgICAgICAgICdkamFuZ28udGVtcGxhdGUuY29udGV4dF9wcm9jZXNzb3JzLmRlYnVnJyxcXG4gICAgICAgICAgICAgICAgJ2RqYW5nby50ZW1wbGF0ZS5jb250ZXh0X3Byb2Nlc3NvcnMucmVxdWVzdCcsXFxuICAgICAgICAgICAgICAgICdkamFuZ28uY29udHJpYi5hdXRoLmNvbnRleHRfcHJvY2Vzc29ycy5hdXRoJyxcXG4gICAgICAgICAgICAgICAgJ2RqYW5nby5jb250cmliLm1lc3NhZ2VzLmNvbnRleHRfcHJvY2Vzc29ycy5tZXNzYWdlcycsXFxuICAgICAgICAgICAgXSxcXG4gICAgICAgIH0sXFxuICAgIH0sXFxuXVwiLCBcIm5ld19zdHJcIjogXCJURU1QTEFURVMgPSBbXFxuICAgIHtcXG4gICAgICAgICdCQUNLRU5EJzogJ2RqYW5nby50ZW1wbGF0ZS5iYWNrZW5kcy5kamFuZ28uRGphbmdvVGVtcGxhdGVzJyxcXG4gICAgICAgICdESVJTJzogW0JBU0VfRElSIC8gJ3RlbXBsYXRlcyddLFxcbiAgICAgICAgJ0FQUF9ESVJTJzogVHJ1ZSxcXG4gICAgICAgICdPUFRJT05TJzoge1xcbiAgICAgICAgICAgICdjb250ZXh0X3Byb2Nlc3NvcnMnOiBbXFxuICAgICAgICAgICAgICAgICdkamFuZ28udGVtcGxhdGUuY29udGV4dF9wcm9jZXNzb3JzLmRlYnVnJyxcXG4gICAgICAgICAgICAgICAgJ2RqYW5nby50ZW1wbGF0ZS5jb250ZXh0X3Byb2Nlc3NvcnMucmVxdWVzdCcsXFxuICAgICAgICAgICAgICAgICdkamFuZ28uY29udHJpYi5hdXRoLmNvbnRleHRfcHJvY2Vzc29ycy5hdXRoJyxcXG4gICAgICAgICAgICAgICAgJ2RqYW5nby5jb250cmliLm1lc3NhZ2VzLmNvbnRleHRfcHJvY2Vzc29ycy5tZXNzYWdlcycsXFxuICAgICAgICAgICAgXSxcXG4gICAgICAgIH0sXFxuICAgIH0sXFxuXVwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogNTQsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogNjh9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgZGlnaXRhbF9kYXRhX3Byb2plY3Qvc2V0dGluZ3MucHkuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAyOVx0XG4gICAgMzBcdFxuICAgIDMxXHQjIEFwcGxpY2F0aW9uIGRlZmluaXRpb25cbiAgICAzMlx0XG4gICAgMzNcdElOU1RBTExFRF9BUFBTID0gW1xuICAgIDM0XHQgICAgJ2RqYW5nby5jb250cmliLmFkbWluJyxcbiAgICAzNVx0ICAgICdkamFuZ28uY29udHJpYi5hdXRoJyxcbiAgICAzNlx0ICAgICdkamFuZ28uY29udHJpYi5jb250ZW50dHlwZXMnLFxuICAgIDM3XHQgICAgJ2RqYW5nby5jb250cmliLnNlc3Npb25zJyxcbiAgICAzOFx0ICAgICdkamFuZ28uY29udHJpYi5tZXNzYWdlcycsXG4gICAgMzlcdCAgICAnZGphbmdvLmNvbnRyaWIuc3RhdGljZmlsZXMnLFxuICAgIDQwXHQgICAgJ2RhdGFfZGFzaGJvYXJkJyxcbiAgICA0MVx0XVxuICAgIDQyXHRcbiAgICA0M1x0TUlERExFV0FSRSA9IFtcbiAgICA0NFx0ICAgICdkamFuZ28ubWlkZGxld2FyZS5zZWN1cml0eS5TZWN1cml0eU1pZGRsZXdhcmUnLFxuICAgIDQ1XHQgICAgJ2RqYW5nby5jb250cmliLnNlc3Npb25zLm1pZGRsZXdhcmUuU2Vzc2lvbk1pZGRsZXdhcmUnLFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFNenNXa2Jia1d1a01hMjRxcHhUa3BGIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjYsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjcyYjM3YmQyLTUxN2MtNDI1Mi1iZTkwLWIyMjQ2YjNhMmU5ZiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTJBMlFhN2dMUmk2TUpkblh4M0pRQnAiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcImRpZ2l0YWxfZGF0YV9wcm9qZWN0L3NldHRpbmdzLnB5XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIlNUQVRJQ19VUkwgPSAnc3RhdGljLydcIiwgXCJuZXdfc3RyXCI6IFwiU1RBVElDX1VSTCA9ICdzdGF0aWMvJ1xcblxcblNUQVRJQ0ZJTEVTX0RJUlMgPSBbXFxuICAgIEJBU0VfRElSIC8gJ3N0YXRpYycsXFxuXVwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogMTE4LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDExOH1dfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBkaWdpdGFsX2RhdGFfcHJvamVjdC9zZXR0aW5ncy5weS5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDUxXHRdXG4gICAgNTJcdFxuICAgIDUzXHRST09UX1VSTENPTkYgPSAnZGlnaXRhbF9kYXRhX3Byb2plY3QudXJscydcbiAgICA1NFx0XG4gICAgNTVcdFRFTVBMQVRFUyA9IFtcbiAgICA1Nlx0ICAgIHtcbiAgICA1N1x0ICAgICAgICAnQkFDS0VORCc6ICdkamFuZ28udGVtcGxhdGUuYmFja2VuZHMuZGphbmdvLkRqYW5nb1RlbXBsYXRlcycsXG4gICAgNThcdCAgICAgICAgJ0RJUlMnOiBbQkFTRV9ESVIgLyAndGVtcGxhdGVzJ10sXG4gICAgNTlcdCAgICAgICAgJ0FQUF9ESVJTJzogVHJ1ZSxcbiAgICA2MFx0ICAgICAgICAnT1BUSU9OUyc6IHtcbiAgICA2MVx0ICAgICAgICAgICAgJ2NvbnRleHRfcHJvY2Vzc29ycyc6IFtcbiAgICA2Mlx0ICAgICAgICAgICAgICAgICdkamFuZ28udGVtcGxhdGUuY29udGV4dF9wcm9jZXNzb3JzLmRlYnVnJyxcbiAgICA2M1x0ICAgICAgICAgICAgICAgICdkamFuZ28udGVtcGxhdGUuY29udGV4dF9wcm9jZXNzb3JzLnJlcXVlc3QnLFxuICAgIDY0XHQgICAgICAgICAgICAgICAgJ2RqYW5nby5jb250cmliLmF1dGguY29udGV4dF9wcm9jZXNzb3JzLmF1dGgnLFxuICAgIDY1XHQgICAgICAgICAgICAgICAgJ2RqYW5nby5jb250cmliLm1lc3NhZ2VzLmNvbnRleHRfcHJvY2Vzc29ycy5tZXNzYWdlcycsXG4gICAgNjZcdCAgICAgICAgICAgIF0sXG4gICAgNjdcdCAgICAgICAgfSxcbiAgICA2OFx0ICAgIH0sXG4gICAgNjlcdF1cbiAgICA3MFx0XG4gICAgNzFcdFdTR0lfQVBQTElDQVRJT04gPSAnZGlnaXRhbF9kYXRhX3Byb2plY3Qud3NnaS5hcHBsaWNhdGlvbidcbiAgICA3Mlx0XG4gICAgNzNcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFKN3dkWHp4NVpIRno2ajdDa1hoSEFNIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjYsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjIxYjc4OGFhLTcyMTItNDA2My05NWFjLTNhODU3ZTE0ZTY1ZSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUhvNGVYNGVjNXpGdHBQNTZ6bWpzY0oiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwibWtkaXIgLXAgdGVtcGxhdGVzL2RhdGFfZGFzaGJvYXJkIHN0YXRpYy9jc3Mgc3RhdGljL2pzXCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMzB9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0J3MgY3JlYXRlIHRoZSBuZWNlc3NhcnkgZGlyZWN0b3JpZXMgZm9yIHRlbXBsYXRlcyBhbmQgc3RhdGljIGZpbGVzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBkaWdpdGFsX2RhdGFfcHJvamVjdC9zZXR0aW5ncy5weS5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTE1XHRcbiAgIDExNlx0IyBTdGF0aWMgZmlsZXMgKENTUywgSmF2YVNjcmlwdCwgSW1hZ2VzKVxuICAgMTE3XHQjIGh0dHBzOi8vZG9jcy5kamFuZ29wcm9qZWN0LmNvbS9lbi80LjIvaG93dG8vc3RhdGljLWZpbGVzL1xuICAgMTE4XHRcbiAgIDExOVx0U1RBVElDX1VSTCA9ICdzdGF0aWMvJ1xuICAgMTIwXHRcbiAgIDEyMVx0U1RBVElDRklMRVNfRElSUyA9IFtcbiAgIDEyMlx0ICAgIEJBU0VfRElSIC8gJ3N0YXRpYycsXG4gICAxMjNcdF1cbiAgIDEyNFx0XG4gICAxMjVcdCMgRGVmYXVsdCBwcmltYXJ5IGtleSBmaWVsZCB0eXBlXG4gICAxMjZcdCMgaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi9yZWYvc2V0dGluZ3MvI2RlZmF1bHQtYXV0by1maWVsZFxuICAgMTI3XHRcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxMkEyUWE3Z0xSaTZNSmRuWHgzSlFCcCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo2LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQncyBjcmVhdGUgdGhlIG5lY2Vzc2FyeSBkaXJlY3RvcmllcyBmb3IgdGVtcGxhdGVzIGFuZCBzdGF0aWMgZmlsZXM6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMTBiMjNhODgtY2E0My00ZDZkLWI4NGItYWVmMTA4NzI3OGUzIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxRTdkSnNVUUgxUDl6TGMxZk50UnVVaCIsInRvb2xfbmFtZSI6InNhdmUtZmlsZSIsImlucHV0X2pzb24iOiJ7XCJmaWxlX3BhdGhcIjogXCJkYXRhX2Rhc2hib2FyZC9kYXRhX2FuYWx5c2lzLnB5XCIsIFwiZmlsZV9jb250ZW50XCI6IFwiaW1wb3J0IHBhbmRhcyBhcyBwZFxcbmltcG9ydCBudW1weSBhcyBucFxcbmltcG9ydCBwbG90bHkuZXhwcmVzcyBhcyBweFxcbmltcG9ydCBwbG90bHkuZ3JhcGhfb2JqZWN0cyBhcyBnb1xcbmZyb20gcGxvdGx5LnN1YnBsb3RzIGltcG9ydCBtYWtlX3N1YnBsb3RzXFxuaW1wb3J0IGRhdGV0aW1lIGFzIGR0XFxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YVxcbmltcG9ydCB3YXJuaW5nc1xcbmltcG9ydCBqc29uXFxuXFxuIyBTdXBwcmVzcyB3YXJuaW5nc1xcbndhcm5pbmdzLmZpbHRlcndhcm5pbmdzKCdpZ25vcmUnKVxcblxcbiMgTG9hZCBkYXRhc2V0c1xcbmRlZiBsb2FkX2RhdGEoKTpcXG4gICAgXFxcIlxcXCJcXFwiTG9hZCBhbGwgZGF0YXNldHMgZnJvbSB0aGUgZGF0YSBkaXJlY3RvcnlcXFwiXFxcIlxcXCJcXG4gICAgXFxuICAgICMgR29vZ2xlIEFuYWx5dGljcyBkYXRhXFxuICAgIGdhX2RhdGEgPSBwZC5yZWFkX2NzdignZGF0YS9nb29nbGVfYW5hbHl0aWNzX2RhdGEuY3N2JylcXG4gICAgZ2FfZGF0YVsnZGF0ZSddID0gcGQudG9fZGF0ZXRpbWUoZ2FfZGF0YVsnZGF0ZSddKVxcbiAgICBcXG4gICAgIyBDdXN0b21lciBkYXRhXFxuICAgIGN1c3RvbWVyX2RhdGEgPSBwZC5yZWFkX2NzdignZGF0YS9jdXN0b21lcl9kYXRhLmNzdicpXFxuICAgIGN1c3RvbWVyX2RhdGFbJ3NpZ251cF9kYXRlJ10gPSBwZC50b19kYXRldGltZShjdXN0b21lcl9kYXRhWydzaWdudXBfZGF0ZSddKVxcbiAgICBjdXN0b21lcl9kYXRhWydsYXN0X3B1cmNoYXNlX2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGN1c3RvbWVyX2RhdGFbJ2xhc3RfcHVyY2hhc2VfZGF0ZSddKVxcbiAgICBcXG4gICAgIyBTb2NpYWwgbWVkaWEgYWRzIGRhdGFcXG4gICAgZmJfYWRzID0gcGQucmVhZF9jc3YoJ2RhdGEvZmFjZWJvb2tfYWRzX2RhdGEuY3N2JylcXG4gICAgZmJfYWRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZShmYl9hZHNbJ2RhdGUnXSlcXG4gICAgXFxuICAgIGlnX2FkcyA9IHBkLnJlYWRfY3N2KCdkYXRhL2luc3RhZ3JhbV9hZHNfZGF0YS5jc3YnKVxcbiAgICBpZ19hZHNbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGlnX2Fkc1snZGF0ZSddKVxcbiAgICBcXG4gICAgIyBHb29nbGUgQWRzIGRhdGFcXG4gICAgZ29vZ2xlX2FkcyA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9hZHNfZGF0YS5jc3YnKVxcbiAgICBnb29nbGVfYWRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZShnb29nbGVfYWRzWydkYXRlJ10pXFxuICAgIFxcbiAgICAjIEN1c3RvbWVyIHRvdWNocG9pbnRzXFxuICAgIHRvdWNocG9pbnRzID0gcGQucmVhZF9jc3YoJ2RhdGEvY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2JylcXG4gICAgdG91Y2hwb2ludHNbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKHRvdWNocG9pbnRzWydkYXRlJ10pXFxuICAgIFxcbiAgICAjIEdvb2dsZSBTZWFyY2ggQ29uc29sZSBkYXRhXFxuICAgIHNlYXJjaF9jb25zb2xlID0gcGQucmVhZF9jc3YoJ2RhdGEvZ29vZ2xlX3NlYXJjaF9jb25zb2xlX2RhdGEuY3N2JylcXG4gICAgc2VhcmNoX2NvbnNvbGVbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKHNlYXJjaF9jb25zb2xlWydkYXRlJ10pXFxuICAgIFxcbiAgICByZXR1cm4ge1xcbiAgICAgICAgJ2dhX2RhdGEnOiBnYV9kYXRhLFxcbiAgICAgICAgJ2N1c3RvbWVyX2RhdGEnOiBjdXN0b21lcl9kYXRhLFxcbiAgICAgICAgJ2ZiX2Fkcyc6IGZiX2FkcyxcXG4gICAgICAgICdpZ19hZHMnOiBpZ19hZHMsXFxuICAgICAgICAnZ29vZ2xlX2Fkcyc6IGdvb2dsZV9hZHMsXFxuICAgICAgICAndG91Y2hwb2ludHMnOiB0b3VjaHBvaW50cyxcXG4gICAgICAgICdzZWFyY2hfY29uc29sZSc6IHNlYXJjaF9jb25zb2xlXFxuICAgIH1cXG5cXG5kZWYgZ2V0X2dvb2dsZV9hbmFseXRpY3Nfc3RhdHMoZ2FfZGF0YSk6XFxuICAgIFxcXCJcXFwiXFxcIkdldCBiYXNpYyBHb29nbGUgQW5hbHl0aWNzIHN0YXRpc3RpY3NcXFwiXFxcIlxcXCJcXG4gICAgc3RhdHMgPSB7XFxuICAgICAgICAndG90YWxfc2Vzc2lvbnMnOiBnYV9kYXRhWydzZXNzaW9ucyddLnN1bSgpLFxcbiAgICAgICAgJ3RvdGFsX25ld191c2Vycyc6IGdhX2RhdGFbJ25ld191c2VycyddLnN1bSgpLFxcbiAgICAgICAgJ3RvdGFsX3RyYW5zYWN0aW9ucyc6IGdhX2RhdGFbJ3RyYW5zYWN0aW9ucyddLnN1bSgpLFxcbiAgICAgICAgJ3RvdGFsX3JldmVudWUnOiBnYV9kYXRhWydyZXZlbnVlJ10uc3VtKCksXFxuICAgICAgICAnYXZnX2NvbnZlcnNpb25fcmF0ZSc6IGdhX2RhdGFbJ2NvbnZlcnNpb25fcmF0ZSddLm1lYW4oKSAqIDEwMCwgICMgYXMgcGVyY2VudGFnZVxcbiAgICB9XFxuICAgIHJldHVybiBzdGF0c1xcblxcbmRlZiBnZXRfc2Vzc2lvbnNfYnlfc291cmNlX2NoYXJ0KGdhX2RhdGEpOlxcbiAgICBcXFwiXFxcIlxcXCJDcmVhdGUgYSBiYXIgY2hhcnQgb2Ygc2Vzc2lvbnMgYnkgc291cmNlXFxcIlxcXCJcXFwiXFxuICAgIHNlc3Npb25zX2J5X3NvdXJjZSA9IGdhX2RhdGEuZ3JvdXBieSgnc291cmNlJylbJ3Nlc3Npb25zJ10uc3VtKCkucmVzZXRfaW5kZXgoKVxcbiAgICBzZXNzaW9uc19ieV9zb3VyY2UgPSBzZXNzaW9uc19ieV9zb3VyY2Uuc29ydF92YWx1ZXMoJ3Nlc3Npb25zJywgYXNjZW5kaW5nPUZhbHNlKVxcbiAgICBcXG4gICAgZmlnID0gcHguYmFyKFxcbiAgICAgICAgc2Vzc2lvbnNfYnlfc291cmNlLCBcXG4gICAgICAgIHg9J3NvdXJjZScsIFxcbiAgICAgICAgeT0nc2Vzc2lvbnMnLFxcbiAgICAgICAgdGl0bGU9J1Nlc3Npb25zIGJ5IFNvdXJjZScsXFxuICAgICAgICBsYWJlbHM9eydzb3VyY2UnOiAnU291cmNlJywgJ3Nlc3Npb25zJzogJ1RvdGFsIFNlc3Npb25zJ30sXFxuICAgICAgICBjb2xvcj0nc2Vzc2lvbnMnLFxcbiAgICAgICAgY29sb3JfY29udGludW91c19zY2FsZT0nVmlyaWRpcydcXG4gICAgKVxcbiAgICBcXG4gICAgcmV0dXJuIGZpZy50b19odG1sKGZ1bGxfaHRtbD1GYWxzZSwgaW5jbHVkZV9wbG90bHlqcz0nY2RuJylcXG5cXG5kZWYgZ2V0X3Nlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lX2NoYXJ0KGdhX2RhdGEpOlxcbiAgICBcXFwiXFxcIlxcXCJDcmVhdGUgYSBsaW5lIGNoYXJ0IG9mIHNlc3Npb25zIGFuZCB0cmFuc2FjdGlvbnMgb3ZlciB0aW1lXFxcIlxcXCJcXFwiXFxuICAgIGRhaWx5X21ldHJpY3MgPSBnYV9kYXRhLmdyb3VwYnkoJ2RhdGUnKS5hZ2coe1xcbiAgICAgICAgJ3Nlc3Npb25zJzogJ3N1bScsXFxuICAgICAgICAndHJhbnNhY3Rpb25zJzogJ3N1bScsXFxuICAgICAgICAncmV2ZW51ZSc6ICdzdW0nXFxuICAgIH0pLnJlc2V0X2luZGV4KClcXG4gICAgXFxuICAgIGZpZyA9IG1ha2Vfc3VicGxvdHMoc3BlY3M9W1t7XFxcInNlY29uZGFyeV95XFxcIjogVHJ1ZX1dXSlcXG4gICAgXFxuICAgIGZpZy5hZGRfdHJhY2UoXFxuICAgICAgICBnby5TY2F0dGVyKFxcbiAgICAgICAgICAgIHg9ZGFpbHlfbWV0cmljc1snZGF0ZSddLCBcXG4gICAgICAgICAgICB5PWRhaWx5X21ldHJpY3NbJ3Nlc3Npb25zJ10sXFxuICAgICAgICAgICAgbmFtZT0nU2Vzc2lvbnMnLFxcbiAgICAgICAgICAgIGxpbmU9ZGljdChjb2xvcj0nYmx1ZScpXFxuICAgICAgICApLFxcbiAgICAgICAgc2Vjb25kYXJ5X3k9RmFsc2VcXG4gICAgKVxcbiAgICBcXG4gICAgZmlnLmFkZF90cmFjZShcXG4gICAgICAgIGdvLlNjYXR0ZXIoXFxuICAgICAgICAgICAgeD1kYWlseV9tZXRyaWNzWydkYXRlJ10sIFxcbiAgICAgICAgICAgIHk9ZGFpbHlfbWV0cmljc1sndHJhbnNhY3Rpb25zJ10sXFxuICAgICAgICAgICAgbmFtZT0nVHJhbnNhY3Rpb25zJyxcXG4gICAgICAgICAgICBsaW5lPWRpY3QoY29sb3I9J2dyZWVuJylcXG4gICAgICAgICksXFxuICAgICAgICBzZWNvbmRhcnlfeT1UcnVlXFxuICAgIClcXG4gICAgXFxuICAgIGZpZy51cGRhdGVfbGF5b3V0KFxcbiAgICAgICAgdGl0bGU9J1Nlc3Npb25zIGFuZCBUcmFuc2FjdGlvbnMgT3ZlciBUaW1lJyxcXG4gICAgICAgIHhheGlzX3RpdGxlPSdEYXRlJyxcXG4gICAgICAgIGxlZ2VuZD1kaWN0KHg9MC4wMSwgeT0wLjk5LCBiZ2NvbG9yPSdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCknKVxcbiAgICApXFxuICAgIFxcbiAgICBmaWcudXBkYXRlX3lheGVzKHRpdGxlX3RleHQ9XFxcIlNlc3Npb25zXFxcIiwgc2Vjb25kYXJ5X3k9RmFsc2UpXFxuICAgIGZpZy51cGRhdGVfeWF4ZXModGl0bGVfdGV4dD1cXFwiVHJhbnNhY3Rpb25zXFxcIiwgc2Vjb25kYXJ5X3k9VHJ1ZSlcXG4gICAgXFxuICAgIHJldHVybiBmaWcudG9faHRtbChmdWxsX2h0bWw9RmFsc2UsIGluY2x1ZGVfcGxvdGx5anM9J2NkbicpXFxuXFxuZGVmIGdldF9zZXNzaW9uc19ieV9kZXZpY2VfY2hhcnQoZ2FfZGF0YSk6XFxuICAgIFxcXCJcXFwiXFxcIkNyZWF0ZSBhIHBpZSBjaGFydCBvZiBzZXNzaW9ucyBieSBkZXZpY2VcXFwiXFxcIlxcXCJcXG4gICAgZGV2aWNlX21ldHJpY3MgPSBnYV9kYXRhLmdyb3VwYnkoJ2RldmljZV9jYXRlZ29yeScpLmFnZyh7XFxuICAgICAgICAnc2Vzc2lvbnMnOiAnc3VtJyxcXG4gICAgICAgICd0cmFuc2FjdGlvbnMnOiAnc3VtJyxcXG4gICAgICAgICdjb252ZXJzaW9uX3JhdGUnOiAnbWVhbidcXG4gICAgfSkucmVzZXRfaW5kZXgoKVxcbiAgICBcXG4gICAgZmlnID0gcHgucGllKFxcbiAgICAgICAgZGV2aWNlX21ldHJpY3MsIFxcbiAgICAgICAgdmFsdWVzPSdzZXNzaW9ucycsIFxcbiAgICAgICAgbmFtZXM9J2RldmljZV9jYXRlZ29yeScsXFxuICAgICAgICB0aXRsZT0nU2Vzc2lvbnMgYnkgRGV2aWNlIENhdGVnb3J5JyxcXG4gICAgICAgIGNvbG9yX2Rpc2NyZXRlX3NlcXVlbmNlPXB4LmNvbG9ycy5zZXF1ZW50aWFsLlBsYXNtYVxcbiAgICApXFxuICAgIFxcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxcblxcbmRlZiBnZXRfY3VzdG9tZXJfZGVtb2dyYXBoaWNzKGN1c3RvbWVyX2RhdGEpOlxcbiAgICBcXFwiXFxcIlxcXCJHZXQgY3VzdG9tZXIgZGVtb2dyYXBoaWMgaW5mb3JtYXRpb25cXFwiXFxcIlxcXCJcXG4gICAgZGVtb2dyYXBoaWNzID0ge1xcbiAgICAgICAgJ3RvdGFsX2N1c3RvbWVycyc6IGxlbihjdXN0b21lcl9kYXRhKSxcXG4gICAgICAgICdnZW5kZXJfZGlzdHJpYnV0aW9uJzogY3VzdG9tZXJfZGF0YVsnZ2VuZGVyJ10udmFsdWVfY291bnRzKG5vcm1hbGl6ZT1UcnVlKS50b19kaWN0KCksXFxuICAgICAgICAnYXZnX2FnZSc6IGN1c3RvbWVyX2RhdGFbJ2FnZSddLm1lYW4oKSxcXG4gICAgICAgICdhdmdfdG90YWxfc3BlbmQnOiBjdXN0b21lcl9kYXRhWyd0b3RhbF9zcGVuZCddLm1lYW4oKSxcXG4gICAgfVxcbiAgICByZXR1cm4gZGVtb2dyYXBoaWNzXFxuXFxuZGVmIGdldF9jdXN0b21lcl9zZWdtZW50c19jaGFydChjdXN0b21lcl9kYXRhKTpcXG4gICAgXFxcIlxcXCJcXFwiQ3JlYXRlIGEgYmFyIGNoYXJ0IG9mIGN1c3RvbWVyIHNlZ21lbnRzXFxcIlxcXCJcXFwiXFxuICAgIHNlZ21lbnRfY291bnRzID0gY3VzdG9tZXJfZGF0YVsnY3VzdG9tZXJfc2VnbWVudCddLnZhbHVlX2NvdW50cygpXFxuICAgIFxcbiAgICBmaWcgPSBweC5iYXIoXFxuICAgICAgICB4PXNlZ21lbnRfY291bnRzLmluZGV4LCBcXG4gICAgICAgIHk9c2VnbWVudF9jb3VudHMudmFsdWVzLFxcbiAgICAgICAgdGl0bGU9J0N1c3RvbWVyIFNlZ21lbnRzJyxcXG4gICAgICAgIGxhYmVscz17J3gnOiAnU2VnbWVudCcsICd5JzogJ051bWJlciBvZiBDdXN0b21lcnMnfSxcXG4gICAgICAgIGNvbG9yPXNlZ21lbnRfY291bnRzLnZhbHVlcyxcXG4gICAgICAgIGNvbG9yX2NvbnRpbnVvdXNfc2NhbGU9J1ZpcmlkaXMnXFxuICAgIClcXG4gICAgXFxuICAgIHJldHVybiBmaWcudG9faHRtbChmdWxsX2h0bWw9RmFsc2UsIGluY2x1ZGVfcGxvdGx5anM9J2NkbicpXFxuXFxuZGVmIGdldF9hZ2VfZGlzdHJpYnV0aW9uX2NoYXJ0KGN1c3RvbWVyX2RhdGEpOlxcbiAgICBcXFwiXFxcIlxcXCJDcmVhdGUgYSBoaXN0b2dyYW0gb2YgY3VzdG9tZXIgYWdlc1xcXCJcXFwiXFxcIlxcbiAgICBmaWcgPSBweC5oaXN0b2dyYW0oXFxuICAgICAgICBjdXN0b21lcl9kYXRhLCBcXG4gICAgICAgIHg9J2FnZScsXFxuICAgICAgICBuYmlucz0yMCxcXG4gICAgICAgIHRpdGxlPSdDdXN0b21lciBBZ2UgRGlzdHJpYnV0aW9uJyxcXG4gICAgICAgIGxhYmVscz17J2FnZSc6ICdBZ2UnLCAnY291bnQnOiAnTnVtYmVyIG9mIEN1c3RvbWVycyd9LFxcbiAgICAgICAgY29sb3JfZGlzY3JldGVfc2VxdWVuY2U9WydwdXJwbGUnXVxcbiAgICApXFxuICAgIFxcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxcblxcbmRlZiBnZXRfbG95YWx0eV90aWVyX2NoYXJ0KGN1c3RvbWVyX2RhdGEpOlxcbiAgICBcXFwiXFxcIlxcXCJDcmVhdGUgYSBncm91cGVkIGJhciBjaGFydCBvZiBsb3lhbHR5IHRpZXJzXFxcIlxcXCJcXFwiXFxuICAgIGxveWFsdHlfc3BlbmQgPSBjdXN0b21lcl9kYXRhLmdyb3VwYnkoJ2xveWFsdHlfdGllcicpLmFnZyh7XFxuICAgICAgICAndG90YWxfc3BlbmQnOiAnbWVhbicsXFxuICAgICAgICAndG90YWxfb3JkZXJzJzogJ21lYW4nXFxuICAgIH0pLnJlc2V0X2luZGV4KClcXG4gICAgXFxuICAgIGZpZyA9IHB4LmJhcihcXG4gICAgICAgIGxveWFsdHlfc3BlbmQsIFxcbiAgICAgICAgeD0nbG95YWx0eV90aWVyJywgXFxuICAgICAgICB5PVsndG90YWxfc3BlbmQnLCAndG90YWxfb3JkZXJzJ10sXFxuICAgICAgICBiYXJtb2RlPSdncm91cCcsXFxuICAgICAgICB0aXRsZT0nQXZlcmFnZSBTcGVuZCBhbmQgT3JkZXJzIGJ5IExveWFsdHkgVGllcicsXFxuICAgICAgICBsYWJlbHM9e1xcbiAgICAgICAgICAgICdsb3lhbHR5X3RpZXInOiAnTG95YWx0eSBUaWVyJywgXFxuICAgICAgICAgICAgJ3ZhbHVlJzogJ1ZhbHVlJyxcXG4gICAgICAgICAgICAndmFyaWFibGUnOiAnTWV0cmljJ1xcbiAgICAgICAgfVxcbiAgICApXFxuICAgIFxcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxcblxcbmRlZiBnZXRfcGxhdGZvcm1fcGVyZm9ybWFuY2UoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpOlxcbiAgICBcXFwiXFxcIlxcXCJHZXQgYWQgcGVyZm9ybWFuY2UgbWV0cmljcyBhY3Jvc3MgcGxhdGZvcm1zXFxcIlxcXCJcXFwiXFxuICAgICMgQ29tYmluZSBhZCBkYXRhXFxuICAgIGZiX2Fkc19zdW1tYXJ5ID0gZmJfYWRzLmdyb3VwYnkoJ2RhdGUnKS5hZ2coe1xcbiAgICAgICAgJ2ltcHJlc3Npb25zJzogJ3N1bScsXFxuICAgICAgICAnY2xpY2tzJzogJ3N1bScsXFxuICAgICAgICAnc3BlbmQnOiAnc3VtJyxcXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxcbiAgICAgICAgJ2NvbnZlcnNpb25fdmFsdWUnOiAnc3VtJ1xcbiAgICB9KS5yZXNldF9pbmRleCgpXFxuICAgIGZiX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0ZhY2Vib29rJ1xcbiAgICBcXG4gICAgaWdfYWRzX3N1bW1hcnkgPSBpZ19hZHMuZ3JvdXBieSgnZGF0ZScpLmFnZyh7XFxuICAgICAgICAnaW1wcmVzc2lvbnMnOiAnc3VtJyxcXG4gICAgICAgICdjbGlja3MnOiAnc3VtJyxcXG4gICAgICAgICdzcGVuZCc6ICdzdW0nLFxcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXFxuICAgICAgICAnY29udmVyc2lvbl92YWx1ZSc6ICdzdW0nXFxuICAgIH0pLnJlc2V0X2luZGV4KClcXG4gICAgaWdfYWRzX3N1bW1hcnlbJ3BsYXRmb3JtJ10gPSAnSW5zdGFncmFtJ1xcbiAgICBcXG4gICAgZ29vZ2xlX2Fkc19zdW1tYXJ5ID0gZ29vZ2xlX2Fkcy5ncm91cGJ5KCdkYXRlJykuYWdnKHtcXG4gICAgICAgICdpbXByZXNzaW9ucyc6ICdzdW0nLFxcbiAgICAgICAgJ2NsaWNrcyc6ICdzdW0nLFxcbiAgICAgICAgJ2Nvc3QnOiAnc3VtJyxcXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxcbiAgICAgICAgJ2NvbnZlcnNpb25fdmFsdWUnOiAnc3VtJ1xcbiAgICB9KS5yZXNldF9pbmRleCgpXFxuICAgIGdvb2dsZV9hZHNfc3VtbWFyeSA9IGdvb2dsZV9hZHNfc3VtbWFyeS5yZW5hbWUoY29sdW1ucz17J2Nvc3QnOiAnc3BlbmQnfSlcXG4gICAgZ29vZ2xlX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0dvb2dsZSBBZHMnXFxuICAgIFxcbiAgICAjIENvbWJpbmUgYWxsIHBsYXRmb3Jtc1xcbiAgICBhbGxfYWRzID0gcGQuY29uY2F0KFtcXG4gICAgICAgIGZiX2Fkc19zdW1tYXJ5LCBcXG4gICAgICAgIGlnX2Fkc19zdW1tYXJ5LCBcXG4gICAgICAgIGdvb2dsZV9hZHNfc3VtbWFyeVxcbiAgICBdLCBpZ25vcmVfaW5kZXg9VHJ1ZSlcXG4gICAgXFxuICAgICMgQ2FsY3VsYXRlIG1ldHJpY3NcXG4gICAgYWxsX2Fkc1snY3RyJ10gPSBhbGxfYWRzWydjbGlja3MnXSAvIGFsbF9hZHNbJ2ltcHJlc3Npb25zJ11cXG4gICAgYWxsX2Fkc1snY3BjJ10gPSBhbGxfYWRzWydzcGVuZCddIC8gYWxsX2Fkc1snY2xpY2tzJ11cXG4gICAgYWxsX2Fkc1sncm9hcyddID0gYWxsX2Fkc1snY29udmVyc2lvbl92YWx1ZSddIC8gYWxsX2Fkc1snc3BlbmQnXVxcbiAgICBcXG4gICAgIyBQbGF0Zm9ybSBwZXJmb3JtYW5jZSBjb21wYXJpc29uXFxuICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlID0gYWxsX2Fkcy5ncm91cGJ5KCdwbGF0Zm9ybScpLmFnZyh7XFxuICAgICAgICAnaW1wcmVzc2lvbnMnOiAnc3VtJyxcXG4gICAgICAgICdjbGlja3MnOiAnc3VtJyxcXG4gICAgICAgICdzcGVuZCc6ICdzdW0nLFxcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXFxuICAgICAgICAnY29udmVyc2lvbl92YWx1ZSc6ICdzdW0nLFxcbiAgICAgICAgJ2N0cic6ICdtZWFuJyxcXG4gICAgICAgICdjcGMnOiAnbWVhbicsXFxuICAgICAgICAncm9hcyc6ICdtZWFuJ1xcbiAgICB9KS5yZXNldF9pbmRleCgpXFxuICAgIFxcbiAgICByZXR1cm4gcGxhdGZvcm1fcGVyZm9ybWFuY2VcXG5cXG5kZWYgZ2V0X3BsYXRmb3JtX2NvbnZlcnNpb25zX2NoYXJ0KGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKTpcXG4gICAgXFxcIlxcXCJcXFwiQ3JlYXRlIGEgYmFyIGNoYXJ0IGNvbXBhcmluZyBwbGF0Zm9ybSBjb252ZXJzaW9uc1xcXCJcXFwiXFxcIlxcbiAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSA9IGdldF9wbGF0Zm9ybV9wZXJmb3JtYW5jZShmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2FkcylcXG4gICAgXFxuICAgIGZpZyA9IHB4LmJhcihcXG4gICAgICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlLCBcXG4gICAgICAgIHg9J3BsYXRmb3JtJywgXFxuICAgICAgICB5PSdjb252ZXJzaW9ucycsXFxuICAgICAgICBjb2xvcj0ncGxhdGZvcm0nLFxcbiAgICAgICAgdGl0bGU9J0NvbnZlcnNpb25zIGJ5IFBsYXRmb3JtJyxcXG4gICAgICAgIGxhYmVscz17J3BsYXRmb3JtJzogJ1BsYXRmb3JtJywgJ2NvbnZlcnNpb25zJzogJ1RvdGFsIENvbnZlcnNpb25zJ31cXG4gICAgKVxcbiAgICBcXG4gICAgcmV0dXJuIGZpZy50b19odG1sKGZ1bGxfaHRtbD1GYWxzZSwgaW5jbHVkZV9wbG90bHlqcz0nY2RuJylcXG5cXG5kZWYgZ2V0X3BsYXRmb3JtX3JvYXNfY2hhcnQoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpOlxcbiAgICBcXFwiXFxcIlxcXCJDcmVhdGUgYSBiYXIgY2hhcnQgY29tcGFyaW5nIHBsYXRmb3JtIFJPQVNcXFwiXFxcIlxcXCJcXG4gICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UgPSBnZXRfcGxhdGZvcm1fcGVyZm9ybWFuY2UoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpXFxuICAgIFxcbiAgICBmaWcgPSBweC5iYXIoXFxuICAgICAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSwgXFxuICAgICAgICB4PSdwbGF0Zm9ybScsIFxcbiAgICAgICAgeT0ncm9hcycsXFxuICAgICAgICBjb2xvcj0ncGxhdGZvcm0nLFxcbiAgICAgICAgdGl0bGU9J1JldHVybiBvbiBBZCBTcGVuZCAoUk9BUykgYnkgUGxhdGZvcm0nLFxcbiAgICAgICAgbGFiZWxzPXsncGxhdGZvcm0nOiAnUGxhdGZvcm0nLCAncm9hcyc6ICdST0FTJ31cXG4gICAgKVxcbiAgICBcXG4gICAgcmV0dXJuIGZpZy50b19odG1sKGZ1bGxfaHRtbD1GYWxzZSwgaW5jbHVkZV9wbG90bHlqcz0nY2RuJylcXG5cXG5kZWYgZ2V0X2RhaWx5X2NvbnZlcnNpb25zX2NoYXJ0KGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKTpcXG4gICAgXFxcIlxcXCJcXFwiQ3JlYXRlIGEgbGluZSBjaGFydCBvZiBkYWlseSBjb252ZXJzaW9ucyBieSBwbGF0Zm9ybVxcXCJcXFwiXFxcIlxcbiAgICAjIENvbWJpbmUgYWQgZGF0YVxcbiAgICBmYl9hZHNfc3VtbWFyeSA9IGZiX2Fkcy5ncm91cGJ5KCdkYXRlJykuYWdnKHtcXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxcbiAgICB9KS5yZXNldF9pbmRleCgpXFxuICAgIGZiX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0ZhY2Vib29rJ1xcbiAgICBcXG4gICAgaWdfYWRzX3N1bW1hcnkgPSBpZ19hZHMuZ3JvdXBieSgnZGF0ZScpLmFnZyh7XFxuICAgICAgICAnY29udmVyc2lvbnMnOiAnc3VtJyxcXG4gICAgfSkucmVzZXRfaW5kZXgoKVxcbiAgICBpZ19hZHNfc3VtbWFyeVsncGxhdGZvcm0nXSA9ICdJbnN0YWdyYW0nXFxuICAgIFxcbiAgICBnb29nbGVfYWRzX3N1bW1hcnkgPSBnb29nbGVfYWRzLmdyb3VwYnkoJ2RhdGUnKS5hZ2coe1xcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXFxuICAgIH0pLnJlc2V0X2luZGV4KClcXG4gICAgZ29vZ2xlX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0dvb2dsZSBBZHMnXFxuICAgIFxcbiAgICAjIENvbWJpbmUgYWxsIHBsYXRmb3Jtc1xcbiAgICBhbGxfYWRzID0gcGQuY29uY2F0KFtcXG4gICAgICAgIGZiX2Fkc19zdW1tYXJ5LCBcXG4gICAgICAgIGlnX2Fkc19zdW1tYXJ5LCBcXG4gICAgICAgIGdvb2dsZV9hZHNfc3VtbWFyeVxcbiAgICBdLCBpZ25vcmVfaW5kZXg9VHJ1ZSlcXG4gICAgXFxuICAgIGZpZyA9IHB4LmxpbmUoXFxuICAgICAgICBhbGxfYWRzLCBcXG4gICAgICAgIHg9J2RhdGUnLCBcXG4gICAgICAgIHk9J2NvbnZlcnNpb25zJyxcXG4gICAgICAgIGNvbG9yPSdwbGF0Zm9ybScsXFxuICAgICAgICB0aXRsZT0nRGFpbHkgQ29udmVyc2lvbnMgYnkgUGxhdGZvcm0nLFxcbiAgICAgICAgbGFiZWxzPXsnZGF0ZSc6ICdEYXRlJywgJ2NvbnZlcnNpb25zJzogJ0NvbnZlcnNpb25zJywgJ3BsYXRmb3JtJzogJ1BsYXRmb3JtJ31cXG4gICAgKVxcbiAgICBcXG4gICAgcmV0dXJuIGZpZy50b19odG1sKGZ1bGxfaHRtbD1GYWxzZSwgaW5jbHVkZV9wbG90bHlqcz0nY2RuJylcIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik5vdyBsZXQncyBjcmVhdGUgdGhlIGRhdGEgYW5hbHlzaXMgbW9kdWxlIGZvciBvdXIgRGphbmdvIGFwcC4gVGhpcyB3aWxsIGJlIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiBvdXIgb3JpZ2luYWwgZGF0YV9hbmFseXNpcy5weSBzY3JpcHQ6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUhvNGVYNGVjNXpGdHBQNTZ6bWpzY0oifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0J3MgY3JlYXRlIHRoZSBkYXRhIGFuYWx5c2lzIG1vZHVsZSBmb3Igb3VyIERqYW5nbyBhcHAuIFRoaXMgd2lsbCBiZSBhIG1vZGlmaWVkIHZlcnNpb24gb2Ygb3VyIG9yaWdpbmFsIGRhdGFfYW5hbHlzaXMucHkgc2NyaXB0OlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjdmOTRlZTE2LTNkNGQtNGNkMS05MGI2LTBmOGIzNzNjMDYzYyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUd0eTVROVJCTmpvR1NEcHNaS3RMZzIiLCJ0b29sX25hbWUiOiJzYXZlLWZpbGUiLCJpbnB1dF9qc29uIjoie1wiZmlsZV9wYXRoXCI6IFwiZGF0YV9kYXNoYm9hcmQvdmlld3MucHlcIiwgXCJmaWxlX2NvbnRlbnRcIjogXCJmcm9tIGRqYW5nby5zaG9ydGN1dHMgaW1wb3J0IHJlbmRlclxcbmZyb20gZGphbmdvLmh0dHAgaW1wb3J0IEh0dHBSZXNwb25zZVxcbmZyb20gLiBpbXBvcnQgZGF0YV9hbmFseXNpc1xcblxcbiMgQ3JlYXRlIHlvdXIgdmlld3MgaGVyZS5cXG5kZWYgaW5kZXgocmVxdWVzdCk6XFxuICAgIFxcXCJcXFwiXFxcIkhvbWUgcGFnZSB2aWV3XFxcIlxcXCJcXFwiXFxuICAgIHJldHVybiByZW5kZXIocmVxdWVzdCwgJ2RhdGFfZGFzaGJvYXJkL2luZGV4Lmh0bWwnKVxcblxcbmRlZiBnb29nbGVfYW5hbHl0aWNzKHJlcXVlc3QpOlxcbiAgICBcXFwiXFxcIlxcXCJHb29nbGUgQW5hbHl0aWNzIGRhc2hib2FyZCB2aWV3XFxcIlxcXCJcXFwiXFxuICAgICMgTG9hZCBkYXRhXFxuICAgIGRhdGFzZXRzID0gZGF0YV9hbmFseXNpcy5sb2FkX2RhdGEoKVxcbiAgICBnYV9kYXRhID0gZGF0YXNldHNbJ2dhX2RhdGEnXVxcbiAgICBcXG4gICAgIyBHZXQgc3RhdGlzdGljcyBhbmQgY2hhcnRzXFxuICAgIHN0YXRzID0gZGF0YV9hbmFseXNpcy5nZXRfZ29vZ2xlX2FuYWx5dGljc19zdGF0cyhnYV9kYXRhKVxcbiAgICBzZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9zZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQoZ2FfZGF0YSlcXG4gICAgc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWVfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9zZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZV9jaGFydChnYV9kYXRhKVxcbiAgICBzZXNzaW9uc19ieV9kZXZpY2VfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9zZXNzaW9uc19ieV9kZXZpY2VfY2hhcnQoZ2FfZGF0YSlcXG4gICAgXFxuICAgIGNvbnRleHQgPSB7XFxuICAgICAgICAnc3RhdHMnOiBzdGF0cyxcXG4gICAgICAgICdzZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQnOiBzZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQsXFxuICAgICAgICAnc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWVfY2hhcnQnOiBzZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZV9jaGFydCxcXG4gICAgICAgICdzZXNzaW9uc19ieV9kZXZpY2VfY2hhcnQnOiBzZXNzaW9uc19ieV9kZXZpY2VfY2hhcnQsXFxuICAgIH1cXG4gICAgXFxuICAgIHJldHVybiByZW5kZXIocmVxdWVzdCwgJ2RhdGFfZGFzaGJvYXJkL2dvb2dsZV9hbmFseXRpY3MuaHRtbCcsIGNvbnRleHQpXFxuXFxuZGVmIGN1c3RvbWVyX2FuYWx5c2lzKHJlcXVlc3QpOlxcbiAgICBcXFwiXFxcIlxcXCJDdXN0b21lciBhbmFseXNpcyBkYXNoYm9hcmQgdmlld1xcXCJcXFwiXFxcIlxcbiAgICAjIExvYWQgZGF0YVxcbiAgICBkYXRhc2V0cyA9IGRhdGFfYW5hbHlzaXMubG9hZF9kYXRhKClcXG4gICAgY3VzdG9tZXJfZGF0YSA9IGRhdGFzZXRzWydjdXN0b21lcl9kYXRhJ11cXG4gICAgXFxuICAgICMgR2V0IHN0YXRpc3RpY3MgYW5kIGNoYXJ0c1xcbiAgICBkZW1vZ3JhcGhpY3MgPSBkYXRhX2FuYWx5c2lzLmdldF9jdXN0b21lcl9kZW1vZ3JhcGhpY3MoY3VzdG9tZXJfZGF0YSlcXG4gICAgY3VzdG9tZXJfc2VnbWVudHNfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9jdXN0b21lcl9zZWdtZW50c19jaGFydChjdXN0b21lcl9kYXRhKVxcbiAgICBhZ2VfZGlzdHJpYnV0aW9uX2NoYXJ0ID0gZGF0YV9hbmFseXNpcy5nZXRfYWdlX2Rpc3RyaWJ1dGlvbl9jaGFydChjdXN0b21lcl9kYXRhKVxcbiAgICBsb3lhbHR5X3RpZXJfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9sb3lhbHR5X3RpZXJfY2hhcnQoY3VzdG9tZXJfZGF0YSlcXG4gICAgXFxuICAgIGNvbnRleHQgPSB7XFxuICAgICAgICAnZGVtb2dyYXBoaWNzJzogZGVtb2dyYXBoaWNzLFxcbiAgICAgICAgJ2N1c3RvbWVyX3NlZ21lbnRzX2NoYXJ0JzogY3VzdG9tZXJfc2VnbWVudHNfY2hhcnQsXFxuICAgICAgICAnYWdlX2Rpc3RyaWJ1dGlvbl9jaGFydCc6IGFnZV9kaXN0cmlidXRpb25fY2hhcnQsXFxuICAgICAgICAnbG95YWx0eV90aWVyX2NoYXJ0JzogbG95YWx0eV90aWVyX2NoYXJ0LFxcbiAgICB9XFxuICAgIFxcbiAgICByZXR1cm4gcmVuZGVyKHJlcXVlc3QsICdkYXRhX2Rhc2hib2FyZC9jdXN0b21lcl9hbmFseXNpcy5odG1sJywgY29udGV4dClcXG5cXG5kZWYgYWRfcGVyZm9ybWFuY2UocmVxdWVzdCk6XFxuICAgIFxcXCJcXFwiXFxcIkFkIHBlcmZvcm1hbmNlIGRhc2hib2FyZCB2aWV3XFxcIlxcXCJcXFwiXFxuICAgICMgTG9hZCBkYXRhXFxuICAgIGRhdGFzZXRzID0gZGF0YV9hbmFseXNpcy5sb2FkX2RhdGEoKVxcbiAgICBmYl9hZHMgPSBkYXRhc2V0c1snZmJfYWRzJ11cXG4gICAgaWdfYWRzID0gZGF0YXNldHNbJ2lnX2FkcyddXFxuICAgIGdvb2dsZV9hZHMgPSBkYXRhc2V0c1snZ29vZ2xlX2FkcyddXFxuICAgIFxcbiAgICAjIEdldCBzdGF0aXN0aWNzIGFuZCBjaGFydHNcXG4gICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UgPSBkYXRhX2FuYWx5c2lzLmdldF9wbGF0Zm9ybV9wZXJmb3JtYW5jZShmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2FkcylcXG4gICAgcGxhdGZvcm1fY29udmVyc2lvbnNfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9wbGF0Zm9ybV9jb252ZXJzaW9uc19jaGFydChmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2FkcylcXG4gICAgcGxhdGZvcm1fcm9hc19jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3BsYXRmb3JtX3JvYXNfY2hhcnQoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpXFxuICAgIGRhaWx5X2NvbnZlcnNpb25zX2NoYXJ0ID0gZGF0YV9hbmFseXNpcy5nZXRfZGFpbHlfY29udmVyc2lvbnNfY2hhcnQoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpXFxuICAgIFxcbiAgICBjb250ZXh0ID0ge1xcbiAgICAgICAgJ3BsYXRmb3JtX3BlcmZvcm1hbmNlJzogcGxhdGZvcm1fcGVyZm9ybWFuY2UudG9fZGljdCgncmVjb3JkcycpLFxcbiAgICAgICAgJ3BsYXRmb3JtX2NvbnZlcnNpb25zX2NoYXJ0JzogcGxhdGZvcm1fY29udmVyc2lvbnNfY2hhcnQsXFxuICAgICAgICAncGxhdGZvcm1fcm9hc19jaGFydCc6IHBsYXRmb3JtX3JvYXNfY2hhcnQsXFxuICAgICAgICAnZGFpbHlfY29udmVyc2lvbnNfY2hhcnQnOiBkYWlseV9jb252ZXJzaW9uc19jaGFydCxcXG4gICAgfVxcbiAgICBcXG4gICAgcmV0dXJuIHJlbmRlcihyZXF1ZXN0LCAnZGF0YV9kYXNoYm9hcmQvYWRfcGVyZm9ybWFuY2UuaHRtbCcsIGNvbnRleHQpXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0J3MgY3JlYXRlIHRoZSB2aWV3cyBmb3Igb3VyIERqYW5nbyBhcHA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFFN2RKc1VRSDFQOXpMYzFmTnRSdVVoIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjcsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCdzIGNyZWF0ZSB0aGUgdmlld3MgZm9yIG91ciBEamFuZ28gYXBwOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImYyMTY3ZGFjLTE3NjAtNDliMi1iMGQ5LWY1ZGFjYTQ3OGJhMSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVlFZlJNc2tleTc3VENnSlNTeVZ4bjUiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwiZGF0YV9kYXNoYm9hcmQvdmlld3MucHlcIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCdzIGNoZWNrIHRoZSBleGlzdGluZyB2aWV3cy5weSBmaWxlIGFuZCB0aGVuIHVwZGF0ZSBpdDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkZpbGUgYWxyZWFkeSBleGlzdHM6IC9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YV9kYXNoYm9hcmQvdmlld3MucHkiLCJpc19lcnJvciI6dHJ1ZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUd0eTVROVJCTmpvR1NEcHNaS3RMZzIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiJMZXQncyBjaGVjayB0aGUgZXhpc3Rpbmcgdmlld3MucHkgZmlsZSBhbmQgdGhlbiB1cGRhdGUgaXQ6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNDJhNThkMzYtYmNjNi00NGZkLTliYzgtMDIyNWYzNGMxYTFiIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQ2VlN1EyRWlzN2pWZkoyVlBSWHhwZiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiZGF0YV9kYXNoYm9hcmQvdmlld3MucHlcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiZnJvbSBkamFuZ28uc2hvcnRjdXRzIGltcG9ydCByZW5kZXJcXG5cXG4jIENyZWF0ZSB5b3VyIHZpZXdzIGhlcmUuXFxuXCIsIFwibmV3X3N0clwiOiBcImZyb20gZGphbmdvLnNob3J0Y3V0cyBpbXBvcnQgcmVuZGVyXFxuZnJvbSBkamFuZ28uaHR0cCBpbXBvcnQgSHR0cFJlc3BvbnNlXFxuZnJvbSAuIGltcG9ydCBkYXRhX2FuYWx5c2lzXFxuXFxuIyBDcmVhdGUgeW91ciB2aWV3cyBoZXJlLlxcbmRlZiBpbmRleChyZXF1ZXN0KTpcXG4gICAgXFxcIlxcXCJcXFwiSG9tZSBwYWdlIHZpZXdcXFwiXFxcIlxcXCJcXG4gICAgcmV0dXJuIHJlbmRlcihyZXF1ZXN0LCAnZGF0YV9kYXNoYm9hcmQvaW5kZXguaHRtbCcpXFxuXFxuZGVmIGdvb2dsZV9hbmFseXRpY3MocmVxdWVzdCk6XFxuICAgIFxcXCJcXFwiXFxcIkdvb2dsZSBBbmFseXRpY3MgZGFzaGJvYXJkIHZpZXdcXFwiXFxcIlxcXCJcXG4gICAgIyBMb2FkIGRhdGFcXG4gICAgZGF0YXNldHMgPSBkYXRhX2FuYWx5c2lzLmxvYWRfZGF0YSgpXFxuICAgIGdhX2RhdGEgPSBkYXRhc2V0c1snZ2FfZGF0YSddXFxuICAgIFxcbiAgICAjIEdldCBzdGF0aXN0aWNzIGFuZCBjaGFydHNcXG4gICAgc3RhdHMgPSBkYXRhX2FuYWx5c2lzLmdldF9nb29nbGVfYW5hbHl0aWNzX3N0YXRzKGdhX2RhdGEpXFxuICAgIHNlc3Npb25zX2J5X3NvdXJjZV9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3Nlc3Npb25zX2J5X3NvdXJjZV9jaGFydChnYV9kYXRhKVxcbiAgICBzZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZV9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3Nlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lX2NoYXJ0KGdhX2RhdGEpXFxuICAgIHNlc3Npb25zX2J5X2RldmljZV9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3Nlc3Npb25zX2J5X2RldmljZV9jaGFydChnYV9kYXRhKVxcbiAgICBcXG4gICAgY29udGV4dCA9IHtcXG4gICAgICAgICdzdGF0cyc6IHN0YXRzLFxcbiAgICAgICAgJ3Nlc3Npb25zX2J5X3NvdXJjZV9jaGFydCc6IHNlc3Npb25zX2J5X3NvdXJjZV9jaGFydCxcXG4gICAgICAgICdzZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZV9jaGFydCc6IHNlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lX2NoYXJ0LFxcbiAgICAgICAgJ3Nlc3Npb25zX2J5X2RldmljZV9jaGFydCc6IHNlc3Npb25zX2J5X2RldmljZV9jaGFydCxcXG4gICAgfVxcbiAgICBcXG4gICAgcmV0dXJuIHJlbmRlcihyZXF1ZXN0LCAnZGF0YV9kYXNoYm9hcmQvZ29vZ2xlX2FuYWx5dGljcy5odG1sJywgY29udGV4dClcXG5cXG5kZWYgY3VzdG9tZXJfYW5hbHlzaXMocmVxdWVzdCk6XFxuICAgIFxcXCJcXFwiXFxcIkN1c3RvbWVyIGFuYWx5c2lzIGRhc2hib2FyZCB2aWV3XFxcIlxcXCJcXFwiXFxuICAgICMgTG9hZCBkYXRhXFxuICAgIGRhdGFzZXRzID0gZGF0YV9hbmFseXNpcy5sb2FkX2RhdGEoKVxcbiAgICBjdXN0b21lcl9kYXRhID0gZGF0YXNldHNbJ2N1c3RvbWVyX2RhdGEnXVxcbiAgICBcXG4gICAgIyBHZXQgc3RhdGlzdGljcyBhbmQgY2hhcnRzXFxuICAgIGRlbW9ncmFwaGljcyA9IGRhdGFfYW5hbHlzaXMuZ2V0X2N1c3RvbWVyX2RlbW9ncmFwaGljcyhjdXN0b21lcl9kYXRhKVxcbiAgICBjdXN0b21lcl9zZWdtZW50c19jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X2N1c3RvbWVyX3NlZ21lbnRzX2NoYXJ0KGN1c3RvbWVyX2RhdGEpXFxuICAgIGFnZV9kaXN0cmlidXRpb25fY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9hZ2VfZGlzdHJpYnV0aW9uX2NoYXJ0KGN1c3RvbWVyX2RhdGEpXFxuICAgIGxveWFsdHlfdGllcl9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X2xveWFsdHlfdGllcl9jaGFydChjdXN0b21lcl9kYXRhKVxcbiAgICBcXG4gICAgY29udGV4dCA9IHtcXG4gICAgICAgICdkZW1vZ3JhcGhpY3MnOiBkZW1vZ3JhcGhpY3MsXFxuICAgICAgICAnY3VzdG9tZXJfc2VnbWVudHNfY2hhcnQnOiBjdXN0b21lcl9zZWdtZW50c19jaGFydCxcXG4gICAgICAgICdhZ2VfZGlzdHJpYnV0aW9uX2NoYXJ0JzogYWdlX2Rpc3RyaWJ1dGlvbl9jaGFydCxcXG4gICAgICAgICdsb3lhbHR5X3RpZXJfY2hhcnQnOiBsb3lhbHR5X3RpZXJfY2hhcnQsXFxuICAgIH1cXG4gICAgXFxuICAgIHJldHVybiByZW5kZXIocmVxdWVzdCwgJ2RhdGFfZGFzaGJvYXJkL2N1c3RvbWVyX2FuYWx5c2lzLmh0bWwnLCBjb250ZXh0KVxcblxcbmRlZiBhZF9wZXJmb3JtYW5jZShyZXF1ZXN0KTpcXG4gICAgXFxcIlxcXCJcXFwiQWQgcGVyZm9ybWFuY2UgZGFzaGJvYXJkIHZpZXdcXFwiXFxcIlxcXCJcXG4gICAgIyBMb2FkIGRhdGFcXG4gICAgZGF0YXNldHMgPSBkYXRhX2FuYWx5c2lzLmxvYWRfZGF0YSgpXFxuICAgIGZiX2FkcyA9IGRhdGFzZXRzWydmYl9hZHMnXVxcbiAgICBpZ19hZHMgPSBkYXRhc2V0c1snaWdfYWRzJ11cXG4gICAgZ29vZ2xlX2FkcyA9IGRhdGFzZXRzWydnb29nbGVfYWRzJ11cXG4gICAgXFxuICAgICMgR2V0IHN0YXRpc3RpY3MgYW5kIGNoYXJ0c1xcbiAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSA9IGRhdGFfYW5hbHlzaXMuZ2V0X3BsYXRmb3JtX3BlcmZvcm1hbmNlKGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKVxcbiAgICBwbGF0Zm9ybV9jb252ZXJzaW9uc19jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3BsYXRmb3JtX2NvbnZlcnNpb25zX2NoYXJ0KGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKVxcbiAgICBwbGF0Zm9ybV9yb2FzX2NoYXJ0ID0gZGF0YV9hbmFseXNpcy5nZXRfcGxhdGZvcm1fcm9hc19jaGFydChmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2FkcylcXG4gICAgZGFpbHlfY29udmVyc2lvbnNfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9kYWlseV9jb252ZXJzaW9uc19jaGFydChmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2FkcylcXG4gICAgXFxuICAgIGNvbnRleHQgPSB7XFxuICAgICAgICAncGxhdGZvcm1fcGVyZm9ybWFuY2UnOiBwbGF0Zm9ybV9wZXJmb3JtYW5jZS50b19kaWN0KCdyZWNvcmRzJyksXFxuICAgICAgICAncGxhdGZvcm1fY29udmVyc2lvbnNfY2hhcnQnOiBwbGF0Zm9ybV9jb252ZXJzaW9uc19jaGFydCxcXG4gICAgICAgICdwbGF0Zm9ybV9yb2FzX2NoYXJ0JzogcGxhdGZvcm1fcm9hc19jaGFydCxcXG4gICAgICAgICdkYWlseV9jb252ZXJzaW9uc19jaGFydCc6IGRhaWx5X2NvbnZlcnNpb25zX2NoYXJ0LFxcbiAgICB9XFxuICAgIFxcbiAgICByZXR1cm4gcmVuZGVyKHJlcXVlc3QsICdkYXRhX2Rhc2hib2FyZC9hZF9wZXJmb3JtYW5jZS5odG1sJywgY29udGV4dClcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDEsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogM31dfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBkYXRhX2Rhc2hib2FyZC92aWV3cy5weTpcbiAgICAgMVx0ZnJvbSBkamFuZ28uc2hvcnRjdXRzIGltcG9ydCByZW5kZXJcbiAgICAgMlx0XG4gICAgIDNcdCMgQ3JlYXRlIHlvdXIgdmlld3MgaGVyZS5cbiAgICAgNFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiA0XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFZRWZSTXNrZXk3N1RDZ0pTU3lWeG41In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjcsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjViMTI4MzQxLWJhYjctNGUyNy05YzE3LTg0NGQ4Y2YxMDMyZCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVVQTThSZWI3WmRIRUpCNDdUUEJEZEciLCJ0b29sX25hbWUiOiJzYXZlLWZpbGUiLCJpbnB1dF9qc29uIjoie1wiZmlsZV9wYXRoXCI6IFwiZGF0YV9kYXNoYm9hcmQvdXJscy5weVwiLCBcImZpbGVfY29udGVudFwiOiBcImZyb20gZGphbmdvLnVybHMgaW1wb3J0IHBhdGhcXG5mcm9tIC4gaW1wb3J0IHZpZXdzXFxuXFxuYXBwX25hbWUgPSAnZGF0YV9kYXNoYm9hcmQnXFxuXFxudXJscGF0dGVybnMgPSBbXFxuICAgIHBhdGgoJycsIHZpZXdzLmluZGV4LCBuYW1lPSdpbmRleCcpLFxcbiAgICBwYXRoKCdnb29nbGUtYW5hbHl0aWNzLycsIHZpZXdzLmdvb2dsZV9hbmFseXRpY3MsIG5hbWU9J2dvb2dsZV9hbmFseXRpY3MnKSxcXG4gICAgcGF0aCgnY3VzdG9tZXItYW5hbHlzaXMvJywgdmlld3MuY3VzdG9tZXJfYW5hbHlzaXMsIG5hbWU9J2N1c3RvbWVyX2FuYWx5c2lzJyksXFxuICAgIHBhdGgoJ2FkLXBlcmZvcm1hbmNlLycsIHZpZXdzLmFkX3BlcmZvcm1hbmNlLCBuYW1lPSdhZF9wZXJmb3JtYW5jZScpLFxcbl1cIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik5vdyBsZXQncyBjcmVhdGUgdGhlIFVSTHMgZm9yIG91ciBhcHA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGRhdGFfZGFzaGJvYXJkL3ZpZXdzLnB5LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgIDFcdGZyb20gZGphbmdvLnNob3J0Y3V0cyBpbXBvcnQgcmVuZGVyXG4gICAgIDJcdGZyb20gZGphbmdvLmh0dHAgaW1wb3J0IEh0dHBSZXNwb25zZVxuICAgICAzXHRmcm9tIC4gaW1wb3J0IGRhdGFfYW5hbHlzaXNcbiAgICAgNFx0XG4gICAgIDVcdCMgQ3JlYXRlIHlvdXIgdmlld3MgaGVyZS5cbiAgICAgNlx0ZGVmIGluZGV4KHJlcXVlc3QpOlxuICAgICA3XHQgICAgXCJcIlwiSG9tZSBwYWdlIHZpZXdcIlwiXCJcbiAgICAgOFx0ICAgIHJldHVybiByZW5kZXIocmVxdWVzdCwgJ2RhdGFfZGFzaGJvYXJkL2luZGV4Lmh0bWwnKVxuICAgICA5XHRcbiAgICAxMFx0ZGVmIGdvb2dsZV9hbmFseXRpY3MocmVxdWVzdCk6XG4gICAgMTFcdCAgICBcIlwiXCJHb29nbGUgQW5hbHl0aWNzIGRhc2hib2FyZCB2aWV3XCJcIlwiXG4gICAgMTJcdCAgICAjIExvYWQgZGF0YVxuICAgIDEzXHQgICAgZGF0YXNldHMgPSBkYXRhX2FuYWx5c2lzLmxvYWRfZGF0YSgpXG4gICAgMTRcdCAgICBnYV9kYXRhID0gZGF0YXNldHNbJ2dhX2RhdGEnXVxuICAgIDE1XHRcbiAgICAxNlx0ICAgICMgR2V0IHN0YXRpc3RpY3MgYW5kIGNoYXJ0c1xuICAgIDE3XHQgICAgc3RhdHMgPSBkYXRhX2FuYWx5c2lzLmdldF9nb29nbGVfYW5hbHl0aWNzX3N0YXRzKGdhX2RhdGEpXG4gICAgMThcdCAgICBzZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9zZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQoZ2FfZGF0YSlcbiAgICAxOVx0ICAgIHNlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lX2NoYXJ0ID0gZGF0YV9hbmFseXNpcy5nZXRfc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWVfY2hhcnQoZ2FfZGF0YSlcbiAgICAyMFx0ICAgIHNlc3Npb25zX2J5X2RldmljZV9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3Nlc3Npb25zX2J5X2RldmljZV9jaGFydChnYV9kYXRhKVxuICAgIDIxXHRcbiAgICAyMlx0ICAgIGNvbnRleHQgPSB7XG4gICAgMjNcdCAgICAgICAgJ3N0YXRzJzogc3RhdHMsXG4gICAgMjRcdCAgICAgICAgJ3Nlc3Npb25zX2J5X3NvdXJjZV9jaGFydCc6IHNlc3Npb25zX2J5X3NvdXJjZV9jaGFydCxcbiAgICAyNVx0ICAgICAgICAnc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWVfY2hhcnQnOiBzZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZV9jaGFydCxcbiAgICAyNlx0ICAgICAgICAnc2Vzc2lvbnNfYnlfZGV2aWNlX2NoYXJ0Jzogc2Vzc2lvbnNfYnlfZGV2aWNlX2NoYXJ0LFxuICAgIDI3XHQgICAgfVxuICAgIDI4XHRcbiAgICAyOVx0ICAgIHJldHVybiByZW5kZXIocmVxdWVzdCwgJ2RhdGFfZGFzaGJvYXJkL2dvb2dsZV9hbmFseXRpY3MuaHRtbCcsIGNvbnRleHQpXG4gICAgMzBcdFxuICAgIDMxXHRkZWYgY3VzdG9tZXJfYW5hbHlzaXMocmVxdWVzdCk6XG4gICAgMzJcdCAgICBcIlwiXCJDdXN0b21lciBhbmFseXNpcyBkYXNoYm9hcmQgdmlld1wiXCJcIlxuICAgIDMzXHQgICAgIyBMb2FkIGRhdGFcbiAgICAzNFx0ICAgIGRhdGFzZXRzID0gZGF0YV9hbmFseXNpcy5sb2FkX2RhdGEoKVxuICAgIDM1XHQgICAgY3VzdG9tZXJfZGF0YSA9IGRhdGFzZXRzWydjdXN0b21lcl9kYXRhJ11cbiAgICAzNlx0XG4gICAgMzdcdCAgICAjIEdldCBzdGF0aXN0aWNzIGFuZCBjaGFydHNcbiAgICAzOFx0ICAgIGRlbW9ncmFwaGljcyA9IGRhdGFfYW5hbHlzaXMuZ2V0X2N1c3RvbWVyX2RlbW9ncmFwaGljcyhjdXN0b21lcl9kYXRhKVxuICAgIDM5XHQgICAgY3VzdG9tZXJfc2VnbWVudHNfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9jdXN0b21lcl9zZWdtZW50c19jaGFydChjdXN0b21lcl9kYXRhKVxuICAgIDQwXHQgICAgYWdlX2Rpc3RyaWJ1dGlvbl9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X2FnZV9kaXN0cmlidXRpb25fY2hhcnQoY3VzdG9tZXJfZGF0YSlcbiAgICA0MVx0ICAgIGxveWFsdHlfdGllcl9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X2xveWFsdHlfdGllcl9jaGFydChjdXN0b21lcl9kYXRhKVxuICAgIDQyXHRcbiAgICA0M1x0ICAgIGNvbnRleHQgPSB7XG4gICAgNDRcdCAgICAgICAgJ2RlbW9ncmFwaGljcyc6IGRlbW9ncmFwaGljcyxcbiAgICA0NVx0ICAgICAgICAnY3VzdG9tZXJfc2VnbWVudHNfY2hhcnQnOiBjdXN0b21lcl9zZWdtZW50c19jaGFydCxcbiAgICA0Nlx0ICAgICAgICAnYWdlX2Rpc3RyaWJ1dGlvbl9jaGFydCc6IGFnZV9kaXN0cmlidXRpb25fY2hhcnQsXG4gICAgNDdcdCAgICAgICAgJ2xveWFsdHlfdGllcl9jaGFydCc6IGxveWFsdHlfdGllcl9jaGFydCxcbiAgICA0OFx0ICAgIH1cbiAgICA0OVx0XG4gICAgNTBcdCAgICByZXR1cm4gcmVuZGVyKHJlcXVlc3QsICdkYXRhX2Rhc2hib2FyZC9jdXN0b21lcl9hbmFseXNpcy5odG1sJywgY29udGV4dClcbiAgICA1MVx0XG4gICAgNTJcdGRlZiBhZF9wZXJmb3JtYW5jZShyZXF1ZXN0KTpcbiAgICA1M1x0ICAgIFwiXCJcIkFkIHBlcmZvcm1hbmNlIGRhc2hib2FyZCB2aWV3XCJcIlwiXG4gICAgNTRcdCAgICAjIExvYWQgZGF0YVxuICAgIDU1XHQgICAgZGF0YXNldHMgPSBkYXRhX2FuYWx5c2lzLmxvYWRfZGF0YSgpXG4gICAgNTZcdCAgICBmYl9hZHMgPSBkYXRhc2V0c1snZmJfYWRzJ11cbiAgICA1N1x0ICAgIGlnX2FkcyA9IGRhdGFzZXRzWydpZ19hZHMnXVxuICAgIDU4XHQgICAgZ29vZ2xlX2FkcyA9IGRhdGFzZXRzWydnb29nbGVfYWRzJ11cbiAgICA1OVx0XG4gICAgNjBcdCAgICAjIEdldCBzdGF0aXN0aWNzIGFuZCBjaGFydHNcbiAgICA2MVx0ICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlID0gZGF0YV9hbmFseXNpcy5nZXRfcGxhdGZvcm1fcGVyZm9ybWFuY2UoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpXG4gICAgNjJcdCAgICBwbGF0Zm9ybV9jb252ZXJzaW9uc19jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3BsYXRmb3JtX2NvbnZlcnNpb25zX2NoYXJ0KGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKVxuICAgIDYzXHQgICAgcGxhdGZvcm1fcm9hc19jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3BsYXRmb3JtX3JvYXNfY2hhcnQoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpXG4gICAgNjRcdCAgICBkYWlseV9jb252ZXJzaW9uc19jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X2RhaWx5X2NvbnZlcnNpb25zX2NoYXJ0KGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKVxuICAgIDY1XHRcbiAgICA2Nlx0ICAgIGNvbnRleHQgPSB7XG4gICAgNjdcdCAgICAgICAgJ3BsYXRmb3JtX3BlcmZvcm1hbmNlJzogcGxhdGZvcm1fcGVyZm9ybWFuY2UudG9fZGljdCgncmVjb3JkcycpLFxuICAgIDY4XHQgICAgICAgICdwbGF0Zm9ybV9jb252ZXJzaW9uc19jaGFydCc6IHBsYXRmb3JtX2NvbnZlcnNpb25zX2NoYXJ0LFxuICAgIDY5XHQgICAgICAgICdwbGF0Zm9ybV9yb2FzX2NoYXJ0JzogcGxhdGZvcm1fcm9hc19jaGFydCxcbiAgICA3MFx0ICAgICAgICAnZGFpbHlfY29udmVyc2lvbnNfY2hhcnQnOiBkYWlseV9jb252ZXJzaW9uc19jaGFydCxcbiAgICA3MVx0ICAgIH1cbiAgICA3Mlx0XG4gICAgNzNcdCAgICByZXR1cm4gcmVuZGVyKHJlcXVlc3QsICdkYXRhX2Rhc2hib2FyZC9hZF9wZXJmb3JtYW5jZS5odG1sJywgY29udGV4dClcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQ2VlN1EyRWlzN2pWZkoyVlBSWHhwZiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo3LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQncyBjcmVhdGUgdGhlIFVSTHMgZm9yIG91ciBhcHA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNzg4NWNjOTYtN2JjNi00M2EzLTgyZDItMGFkYzY3MDAzMTBiIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxRzZMWFlKeVd1ekNodkNvSmtoTTFUWiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJkaWdpdGFsX2RhdGFfcHJvamVjdC91cmxzLnB5XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0J3MgdXBkYXRlIHRoZSBwcm9qZWN0J3MgbWFpbiBVUkxzIGZpbGU6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFVUE04UmViN1pkSEVKQjQ3VFBCRGRHIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjcsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCdzIHVwZGF0ZSB0aGUgcHJvamVjdCdzIG1haW4gVVJMcyBmaWxlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjFiNTAyYzMwLWYzOTctNDc3Mi04ZjliLWIxYTk3OTA5Y2ZjYyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUZIWkg2dnpkNjdUTjE4UDdGZjVlZk4iLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcImRpZ2l0YWxfZGF0YV9wcm9qZWN0L3VybHMucHlcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiZnJvbSBkamFuZ28uY29udHJpYiBpbXBvcnQgYWRtaW5cXG5mcm9tIGRqYW5nby51cmxzIGltcG9ydCBwYXRoXFxuXFxudXJscGF0dGVybnMgPSBbXFxuICAgIHBhdGgoJ2FkbWluLycsIGFkbWluLnNpdGUudXJscyksXFxuXVwiLCBcIm5ld19zdHJcIjogXCJmcm9tIGRqYW5nby5jb250cmliIGltcG9ydCBhZG1pblxcbmZyb20gZGphbmdvLnVybHMgaW1wb3J0IHBhdGgsIGluY2x1ZGVcXG5cXG51cmxwYXR0ZXJucyA9IFtcXG4gICAgcGF0aCgnYWRtaW4vJywgYWRtaW4uc2l0ZS51cmxzKSxcXG4gICAgcGF0aCgnJywgaW5jbHVkZSgnZGF0YV9kYXNoYm9hcmQudXJscycpKSxcXG5dXCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiAxNywgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAyMn1dfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBkaWdpdGFsX2RhdGFfcHJvamVjdC91cmxzLnB5OlxuICAgICAxXHRcIlwiXCJcbiAgICAgMlx0VVJMIGNvbmZpZ3VyYXRpb24gZm9yIGRpZ2l0YWxfZGF0YV9wcm9qZWN0IHByb2plY3QuXG4gICAgIDNcdFxuICAgICA0XHRUaGUgYHVybHBhdHRlcm5zYCBsaXN0IHJvdXRlcyBVUkxzIHRvIHZpZXdzLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2Ugc2VlOlxuICAgICA1XHQgICAgaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi90b3BpY3MvaHR0cC91cmxzL1xuICAgICA2XHRFeGFtcGxlczpcbiAgICAgN1x0RnVuY3Rpb24gdmlld3NcbiAgICAgOFx0ICAgIDEuIEFkZCBhbiBpbXBvcnQ6ICBmcm9tIG15X2FwcCBpbXBvcnQgdmlld3NcbiAgICAgOVx0ICAgIDIuIEFkZCBhIFVSTCB0byB1cmxwYXR0ZXJuczogIHBhdGgoJycsIHZpZXdzLmhvbWUsIG5hbWU9J2hvbWUnKVxuICAgIDEwXHRDbGFzcy1iYXNlZCB2aWV3c1xuICAgIDExXHQgICAgMS4gQWRkIGFuIGltcG9ydDogIGZyb20gb3RoZXJfYXBwLnZpZXdzIGltcG9ydCBIb21lXG4gICAgMTJcdCAgICAyLiBBZGQgYSBVUkwgdG8gdXJscGF0dGVybnM6ICBwYXRoKCcnLCBIb21lLmFzX3ZpZXcoKSwgbmFtZT0naG9tZScpXG4gICAgMTNcdEluY2x1ZGluZyBhbm90aGVyIFVSTGNvbmZcbiAgICAxNFx0ICAgIDEuIEltcG9ydCB0aGUgaW5jbHVkZSgpIGZ1bmN0aW9uOiBmcm9tIGRqYW5nby51cmxzIGltcG9ydCBpbmNsdWRlLCBwYXRoXG4gICAgMTVcdCAgICAyLiBBZGQgYSBVUkwgdG8gdXJscGF0dGVybnM6ICBwYXRoKCdibG9nLycsIGluY2x1ZGUoJ2Jsb2cudXJscycpKVxuICAgIDE2XHRcIlwiXCJcbiAgICAxN1x0ZnJvbSBkamFuZ28uY29udHJpYiBpbXBvcnQgYWRtaW5cbiAgICAxOFx0ZnJvbSBkamFuZ28udXJscyBpbXBvcnQgcGF0aFxuICAgIDE5XHRcbiAgICAyMFx0dXJscGF0dGVybnMgPSBbXG4gICAgMjFcdCAgICBwYXRoKCdhZG1pbi8nLCBhZG1pbi5zaXRlLnVybHMpLFxuICAgIDIyXHRdXG4gICAgMjNcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMjNcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUc2TFhZSnlXdXpDaHZDb0praE0xVFoifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMTBlYWYwNDYtMDI5OC00NjdmLWEwYTItMTY4Y2U5ZmMyMzVkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxSEt6ZnpIUEpnTFl1MjlUUHR1N3VwSiIsInRvb2xfbmFtZSI6InNhdmUtZmlsZSIsImlucHV0X2pzb24iOiJ7XCJmaWxlX3BhdGhcIjogXCJ0ZW1wbGF0ZXMvZGF0YV9kYXNoYm9hcmQvYmFzZS5odG1sXCIsIFwiZmlsZV9jb250ZW50XCI6IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWwgbGFuZz1cXFwiZW5cXFwiPlxcbjxoZWFkPlxcbiAgICA8bWV0YSBjaGFyc2V0PVxcXCJVVEYtOFxcXCI+XFxuICAgIDxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXFxcIj5cXG4gICAgPHRpdGxlPnslIGJsb2NrIHRpdGxlICV9RGlnaXRhbCBEYXRhIEFuYWx5c2lzeyUgZW5kYmxvY2sgJX08L3RpdGxlPlxcbiAgICBcXG4gICAgPCEtLSBCb290c3RyYXAgQ1NTIC0tPlxcbiAgICA8bGluayBocmVmPVxcXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA1LjMuMC1hbHBoYTEvZGlzdC9jc3MvYm9vdHN0cmFwLm1pbi5jc3NcXFwiIHJlbD1cXFwic3R5bGVzaGVldFxcXCI+XFxuICAgIFxcbiAgICA8IS0tIEN1c3RvbSBDU1MgLS0+XFxuICAgIDxzdHlsZT5cXG4gICAgICAgIC5zaWRlYmFyIHtcXG4gICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgICAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgICAgIGJvdHRvbTogMDtcXG4gICAgICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgICAgIHotaW5kZXg6IDEwMDtcXG4gICAgICAgICAgICBwYWRkaW5nOiA0OHB4IDAgMDtcXG4gICAgICAgICAgICBib3gtc2hhZG93OiBpbnNldCAtMXB4IDAgMCByZ2JhKDAsIDAsIDAsIC4xKTtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbiAgICAgICAgfVxcbiAgICAgICAgXFxuICAgICAgICAuc2lkZWJhci1zdGlja3kge1xcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgICAgICB0b3A6IDA7XFxuICAgICAgICAgICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNDhweCk7XFxuICAgICAgICAgICAgcGFkZGluZy10b3A6IC41cmVtO1xcbiAgICAgICAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gICAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgICAgICAgfVxcbiAgICAgICAgXFxuICAgICAgICAubmF2LWxpbmsge1xcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgICAgICAgICAgY29sb3I6ICMzMzM7XFxuICAgICAgICB9XFxuICAgICAgICBcXG4gICAgICAgIC5uYXYtbGluay5hY3RpdmUge1xcbiAgICAgICAgICAgIGNvbG9yOiAjMDA3YmZmO1xcbiAgICAgICAgfVxcbiAgICAgICAgXFxuICAgICAgICBtYWluIHtcXG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMzBweDtcXG4gICAgICAgIH1cXG4gICAgICAgIFxcbiAgICAgICAgLmRhc2hib2FyZC1oZWFkZXIge1xcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XFxuICAgICAgICB9XFxuICAgICAgICBcXG4gICAgICAgIC5zdGF0cy1jYXJkIHtcXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbiAgICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzO1xcbiAgICAgICAgfVxcbiAgICAgICAgXFxuICAgICAgICAuc3RhdHMtY2FyZDpob3ZlciB7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01cHgpO1xcbiAgICAgICAgfVxcbiAgICAgICAgXFxuICAgICAgICAuY2hhcnQtY29udGFpbmVyIHtcXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgICAgICAgICBib3gtc2hhZG93OiAwIDRweCA2cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDE1cHg7XFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgICAgICB9XFxuICAgIDwvc3R5bGU+XFxuICAgIFxcbiAgICB7JSBibG9jayBleHRyYV9jc3MgJX17JSBlbmRibG9jayAlfVxcbjwvaGVhZD5cXG48Ym9keT5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLWZsdWlkXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgICAgICAgICAgPCEtLSBTaWRlYmFyIC0tPlxcbiAgICAgICAgICAgIDxuYXYgaWQ9XFxcInNpZGViYXJcXFwiIGNsYXNzPVxcXCJjb2wtbWQtMyBjb2wtbGctMiBkLW1kLWJsb2NrIHNpZGViYXIgY29sbGFwc2VcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwb3NpdGlvbi1zdGlja3kgc2lkZWJhci1zdGlja3lcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPVxcXCJzaWRlYmFyLWhlYWRpbmcgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlciBweC0zIG10LTQgbWItMSB0ZXh0LW11dGVkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5EaWdpdGFsIERhdGEgQW5hbHlzaXM8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8L2g2PlxcbiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXCJuYXYgZmxleC1jb2x1bW5cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwibmF2LWl0ZW1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwibmF2LWxpbmsgeyUgaWYgcmVxdWVzdC5wYXRoID09ICcvJyAlfWFjdGl2ZXslIGVuZGlmICV9XFxcIiBocmVmPVxcXCJ7JSB1cmwgJ2RhdGFfZGFzaGJvYXJkOmluZGV4JyAlfVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEYXNoYm9hcmQgSG9tZVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcIm5hdi1pdGVtXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcIm5hdi1saW5rIHslIGlmICdnb29nbGUtYW5hbHl0aWNzJyBpbiByZXF1ZXN0LnBhdGggJX1hY3RpdmV7JSBlbmRpZiAlfVxcXCIgaHJlZj1cXFwieyUgdXJsICdkYXRhX2Rhc2hib2FyZDpnb29nbGVfYW5hbHl0aWNzJyAlfVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHb29nbGUgQW5hbHl0aWNzXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwibmF2LWl0ZW1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwibmF2LWxpbmsgeyUgaWYgJ2N1c3RvbWVyLWFuYWx5c2lzJyBpbiByZXF1ZXN0LnBhdGggJX1hY3RpdmV7JSBlbmRpZiAlfVxcXCIgaHJlZj1cXFwieyUgdXJsICdkYXRhX2Rhc2hib2FyZDpjdXN0b21lcl9hbmFseXNpcycgJX1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VzdG9tZXIgQW5hbHlzaXNcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJuYXYtaXRlbVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJuYXYtbGluayB7JSBpZiAnYWQtcGVyZm9ybWFuY2UnIGluIHJlcXVlc3QucGF0aCAlfWFjdGl2ZXslIGVuZGlmICV9XFxcIiBocmVmPVxcXCJ7JSB1cmwgJ2RhdGFfZGFzaGJvYXJkOmFkX3BlcmZvcm1hbmNlJyAlfVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZCBQZXJmb3JtYW5jZVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvbmF2PlxcbiAgICAgICAgICAgIFxcbiAgICAgICAgICAgIDwhLS0gTWFpbiBjb250ZW50IC0tPlxcbiAgICAgICAgICAgIDxtYWluIGNsYXNzPVxcXCJjb2wtbWQtOSBtcy1zbS1hdXRvIGNvbC1sZy0xMCBweC1tZC00XFxcIj5cXG4gICAgICAgICAgICAgICAgeyUgYmxvY2sgY29udGVudCAlfXslIGVuZGJsb2NrICV9XFxuICAgICAgICAgICAgPC9tYWluPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICBcXG4gICAgPCEtLSBCb290c3RyYXAgSlMgLS0+XFxuICAgIDxzY3JpcHQgc3JjPVxcXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA1LjMuMC1hbHBoYTEvZGlzdC9qcy9ib290c3RyYXAuYnVuZGxlLm1pbi5qc1xcXCI+PC9zY3JpcHQ+XFxuICAgIFxcbiAgICA8IS0tIFBsb3RseS5qcyAtLT5cXG4gICAgPHNjcmlwdCBzcmM9XFxcImh0dHBzOi8vY2RuLnBsb3QubHkvcGxvdGx5LWxhdGVzdC5taW4uanNcXFwiPjwvc2NyaXB0PlxcbiAgICBcXG4gICAgeyUgYmxvY2sgZXh0cmFfanMgJX17JSBlbmRibG9jayAlfVxcbjwvYm9keT5cXG48L2h0bWw+XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0J3MgY3JlYXRlIHRoZSB0ZW1wbGF0ZXMgZm9yIG91ciBhcHA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGRpZ2l0YWxfZGF0YV9wcm9qZWN0L3VybHMucHkuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAxM1x0SW5jbHVkaW5nIGFub3RoZXIgVVJMY29uZlxuICAgIDE0XHQgICAgMS4gSW1wb3J0IHRoZSBpbmNsdWRlKCkgZnVuY3Rpb246IGZyb20gZGphbmdvLnVybHMgaW1wb3J0IGluY2x1ZGUsIHBhdGhcbiAgICAxNVx0ICAgIDIuIEFkZCBhIFVSTCB0byB1cmxwYXR0ZXJuczogIHBhdGgoJ2Jsb2cvJywgaW5jbHVkZSgnYmxvZy51cmxzJykpXG4gICAgMTZcdFwiXCJcIlxuICAgIDE3XHRmcm9tIGRqYW5nby5jb250cmliIGltcG9ydCBhZG1pblxuICAgIDE4XHRmcm9tIGRqYW5nby51cmxzIGltcG9ydCBwYXRoLCBpbmNsdWRlXG4gICAgMTlcdFxuICAgIDIwXHR1cmxwYXR0ZXJucyA9IFtcbiAgICAyMVx0ICAgIHBhdGgoJ2FkbWluLycsIGFkbWluLnNpdGUudXJscyksXG4gICAgMjJcdCAgICBwYXRoKCcnLCBpbmNsdWRlKCdkYXRhX2Rhc2hib2FyZC51cmxzJykpLFxuICAgIDIzXHRdXG4gICAgMjRcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFGSFpINnZ6ZDY3VE4xOFA3RmY1ZWZOIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjcsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCdzIGNyZWF0ZSB0aGUgdGVtcGxhdGVzIGZvciBvdXIgYXBwOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjQ3MjkwODQyLTIwMjAtNGY0Yy05Njc4LWYwNjUwN2MzOTU5MiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUFHeDJVZnZTcE5GSDV3dnJmR2JCY2IiLCJ0b29sX25hbWUiOiJzYXZlLWZpbGUiLCJpbnB1dF9qc29uIjoie1wiZmlsZV9wYXRoXCI6IFwidGVtcGxhdGVzL2RhdGFfZGFzaGJvYXJkL2luZGV4Lmh0bWxcIiwgXCJmaWxlX2NvbnRlbnRcIjogXCJ7JSBleHRlbmRzICdkYXRhX2Rhc2hib2FyZC9iYXNlLmh0bWwnICV9XFxuXFxueyUgYmxvY2sgdGl0bGUgJX1EaWdpdGFsIERhdGEgQW5hbHlzaXMgRGFzaGJvYXJkeyUgZW5kYmxvY2sgJX1cXG5cXG57JSBibG9jayBjb250ZW50ICV9XFxuPGRpdiBjbGFzcz1cXFwiZGFzaGJvYXJkLWhlYWRlclxcXCI+XFxuICAgIDxoMT5EaWdpdGFsIERhdGEgQW5hbHlzaXMgRGFzaGJvYXJkPC9oMT5cXG4gICAgPHAgY2xhc3M9XFxcImxlYWRcXFwiPldlbGNvbWUgdG8gdGhlIERpZ2l0YWwgRGF0YSBBbmFseXNpcyBEYXNoYm9hcmQuIFRoaXMgZGFzaGJvYXJkIHByb3ZpZGVzIGluc2lnaHRzIGludG8geW91ciBkaWdpdGFsIG1hcmtldGluZyBwZXJmb3JtYW5jZSwgY3VzdG9tZXIgYmVoYXZpb3IsIGFuZCB3ZWJzaXRlIGFuYWx5dGljcy48L3A+XFxuPC9kaXY+XFxuXFxuPGRpdiBjbGFzcz1cXFwicm93XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2FyZCBzdGF0cy1jYXJkXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkLWJvZHlcXFwiPlxcbiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9XFxcImNhcmQtdGl0bGVcXFwiPkdvb2dsZSBBbmFseXRpY3M8L2g1PlxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwiY2FyZC10ZXh0XFxcIj5BbmFseXplIHdlYnNpdGUgdHJhZmZpYywgdXNlciBiZWhhdmlvciwgYW5kIGNvbnZlcnNpb24gbWV0cmljcy48L3A+XFxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcInslIHVybCAnZGF0YV9kYXNoYm9hcmQ6Z29vZ2xlX2FuYWx5dGljcycgJX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPlZpZXcgQW5hbHl0aWNzPC9hPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICBcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2FyZCBzdGF0cy1jYXJkXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkLWJvZHlcXFwiPlxcbiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9XFxcImNhcmQtdGl0bGVcXFwiPkN1c3RvbWVyIEFuYWx5c2lzPC9oNT5cXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcImNhcmQtdGV4dFxcXCI+VW5kZXJzdGFuZCBjdXN0b21lciBkZW1vZ3JhcGhpY3MsIHNlZ21lbnRzLCBhbmQgcHVyY2hhc2luZyBiZWhhdmlvci48L3A+XFxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcInslIHVybCAnZGF0YV9kYXNoYm9hcmQ6Y3VzdG9tZXJfYW5hbHlzaXMnICV9XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj5WaWV3IEN1c3RvbWVyIERhdGE8L2E+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIFxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkIHN0YXRzLWNhcmRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtYm9keVxcXCI+XFxuICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cXFwiY2FyZC10aXRsZVxcXCI+QWQgUGVyZm9ybWFuY2U8L2g1PlxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwiY2FyZC10ZXh0XFxcIj5Db21wYXJlIHBlcmZvcm1hbmNlIGFjcm9zcyBhZHZlcnRpc2luZyBwbGF0Zm9ybXMgYW5kIGNhbXBhaWducy48L3A+XFxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcInslIHVybCAnZGF0YV9kYXNoYm9hcmQ6YWRfcGVyZm9ybWFuY2UnICV9XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj5WaWV3IEFkIFBlcmZvcm1hbmNlPC9hPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcbjxkaXYgY2xhc3M9XFxcInJvdyBtdC00XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLTEyXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtYm9keVxcXCI+XFxuICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cXFwiY2FyZC10aXRsZVxcXCI+QWJvdXQgVGhpcyBEYXNoYm9hcmQ8L2g1PlxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwiY2FyZC10ZXh0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFRoaXMgZGFzaGJvYXJkIHByb3ZpZGVzIGEgY29tcHJlaGVuc2l2ZSB2aWV3IG9mIHlvdXIgZGlnaXRhbCBtYXJrZXRpbmcgYW5kIGN1c3RvbWVyIGRhdGEuIEl0IGluY2x1ZGVzOlxcbiAgICAgICAgICAgICAgICA8L3A+XFxuICAgICAgICAgICAgICAgIDx1bD5cXG4gICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPkdvb2dsZSBBbmFseXRpY3MgRGF0YTo8L3N0cm9uZz4gU2Vzc2lvbnMsIGNvbnZlcnNpb25zLCByZXZlbnVlLCBhbmQgdXNlciBiZWhhdmlvciBtZXRyaWNzPC9saT5cXG4gICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPkN1c3RvbWVyIERhdGE6PC9zdHJvbmc+IERlbW9ncmFwaGljcywgc2VnbWVudHMsIGxveWFsdHkgdGllcnMsIGFuZCBwdXJjaGFzaW5nIHBhdHRlcm5zPC9saT5cXG4gICAgICAgICAgICAgICAgICAgIDxsaT48c3Ryb25nPkFkIFBlcmZvcm1hbmNlOjwvc3Ryb25nPiBNZXRyaWNzIGZyb20gRmFjZWJvb2ssIEluc3RhZ3JhbSwgYW5kIEdvb2dsZSBBZHMgcGxhdGZvcm1zPC9saT5cXG4gICAgICAgICAgICAgICAgPC91bD5cXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcImNhcmQtdGV4dFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBBbGwgdmlzdWFsaXphdGlvbnMgYXJlIGludGVyYWN0aXZlLiBZb3UgY2FuIGhvdmVyIG92ZXIgZGF0YSBwb2ludHMgZm9yIG1vcmUgaW5mb3JtYXRpb24sIHpvb20gaW4vb3V0LCBhbmQgZG93bmxvYWQgY2hhcnRzIGFzIGltYWdlcy5cXG4gICAgICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcbnslIGVuZGJsb2NrICV9XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFIS3pmekhQSmdMWXUyOVRQdHU3dXBKIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjcsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjlkZTNiZjAzLTAzNzktNDAwOC1iYTFiLTdlYmU4ZWVkNWY4NSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUp2Z1daYlhrTE1pWDF6VjZaeU5KblQiLCJ0b29sX25hbWUiOiJzYXZlLWZpbGUiLCJpbnB1dF9qc29uIjoie1wiZmlsZV9wYXRoXCI6IFwidGVtcGxhdGVzL2RhdGFfZGFzaGJvYXJkL2dvb2dsZV9hbmFseXRpY3MuaHRtbFwiLCBcImZpbGVfY29udGVudFwiOiBcInslIGV4dGVuZHMgJ2RhdGFfZGFzaGJvYXJkL2Jhc2UuaHRtbCcgJX1cXG5cXG57JSBibG9jayB0aXRsZSAlfUdvb2dsZSBBbmFseXRpY3MgRGFzaGJvYXJkeyUgZW5kYmxvY2sgJX1cXG5cXG57JSBibG9jayBjb250ZW50ICV9XFxuPGRpdiBjbGFzcz1cXFwiZGFzaGJvYXJkLWhlYWRlclxcXCI+XFxuICAgIDxoMT5Hb29nbGUgQW5hbHl0aWNzIERhc2hib2FyZDwvaDE+XFxuICAgIDxwIGNsYXNzPVxcXCJsZWFkXFxcIj5BbmFseXplIHdlYnNpdGUgdHJhZmZpYywgdXNlciBiZWhhdmlvciwgYW5kIGNvbnZlcnNpb24gbWV0cmljcy48L3A+XFxuPC9kaXY+XFxuXFxuPCEtLSBTdGF0cyBDYXJkcyAtLT5cXG48ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkIHN0YXRzLWNhcmQgYmctbGlnaHRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtYm9keSB0ZXh0LWNlbnRlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cXFwiY2FyZC10aXRsZVxcXCI+VG90YWwgU2Vzc2lvbnM8L2g1PlxcbiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XFxcImNhcmQtdGV4dFxcXCI+e3sgc3RhdHMudG90YWxfc2Vzc2lvbnN8ZmxvYXRmb3JtYXQ6MCB9fTwvaDI+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIFxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkIHN0YXRzLWNhcmQgYmctbGlnaHRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtYm9keSB0ZXh0LWNlbnRlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cXFwiY2FyZC10aXRsZVxcXCI+VG90YWwgVHJhbnNhY3Rpb25zPC9oNT5cXG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVxcXCJjYXJkLXRleHRcXFwiPnt7IHN0YXRzLnRvdGFsX3RyYW5zYWN0aW9uc3xmbG9hdGZvcm1hdDowIH19PC9oMj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC00XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQgc3RhdHMtY2FyZCBiZy1saWdodFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2FyZC1ib2R5IHRleHQtY2VudGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgPGg1IGNsYXNzPVxcXCJjYXJkLXRpdGxlXFxcIj5Ub3RhbCBSZXZlbnVlPC9oNT5cXG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVxcXCJjYXJkLXRleHRcXFwiPiR7eyBzdGF0cy50b3RhbF9yZXZlbnVlfGZsb2F0Zm9ybWF0OjIgfX08L2gyPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcbjxkaXYgY2xhc3M9XFxcInJvdyBtdC0zXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTZcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2FyZCBzdGF0cy1jYXJkIGJnLWxpZ2h0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkLWJvZHkgdGV4dC1jZW50ZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9XFxcImNhcmQtdGl0bGVcXFwiPk5ldyBVc2VyczwvaDU+XFxuICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cXFwiY2FyZC10ZXh0XFxcIj57eyBzdGF0cy50b3RhbF9uZXdfdXNlcnN8ZmxvYXRmb3JtYXQ6MCB9fTwvaDI+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIFxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkIHN0YXRzLWNhcmQgYmctbGlnaHRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtYm9keSB0ZXh0LWNlbnRlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cXFwiY2FyZC10aXRsZVxcXCI+QXZlcmFnZSBDb252ZXJzaW9uIFJhdGU8L2g1PlxcbiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XFxcImNhcmQtdGV4dFxcXCI+e3sgc3RhdHMuYXZnX2NvbnZlcnNpb25fcmF0ZXxmbG9hdGZvcm1hdDoyIH19JTwvaDI+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXFxuPCEtLSBDaGFydHMgLS0+XFxuPGRpdiBjbGFzcz1cXFwicm93IG10LTRcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjaGFydC1jb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgIDxoND5TZXNzaW9ucyBieSBTb3VyY2U8L2g0PlxcbiAgICAgICAgICAgIHt7IHNlc3Npb25zX2J5X3NvdXJjZV9jaGFydHxzYWZlIH19XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIFxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjaGFydC1jb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgIDxoND5TZXNzaW9ucyBieSBEZXZpY2U8L2g0PlxcbiAgICAgICAgICAgIHt7IHNlc3Npb25zX2J5X2RldmljZV9jaGFydHxzYWZlIH19XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXFxuPGRpdiBjbGFzcz1cXFwicm93IG10LTRcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtMTJcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2hhcnQtY29udGFpbmVyXFxcIj5cXG4gICAgICAgICAgICA8aDQ+U2Vzc2lvbnMgYW5kIFRyYW5zYWN0aW9ucyBPdmVyIFRpbWU8L2g0PlxcbiAgICAgICAgICAgIHt7IHNlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lX2NoYXJ0fHNhZmUgfX1cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG57JSBlbmRibG9jayAlfVwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBzYXZlZCBzdWNjZXNzZnVsbHkuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQUd4MlVmdlNwTkZINXd2cmZHYkJjYiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo3LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0NWI1MDdiYy01OWUxLTQ3OWUtOGUwNS01MTdmOTQzYWY2ZGQiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE1NHFRNlF0NGk4UXY4dWp5TlpIVG9QIiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImZpbGVfcGF0aFwiOiBcInRlbXBsYXRlcy9kYXRhX2Rhc2hib2FyZC9jdXN0b21lcl9hbmFseXNpcy5odG1sXCIsIFwiZmlsZV9jb250ZW50XCI6IFwieyUgZXh0ZW5kcyAnZGF0YV9kYXNoYm9hcmQvYmFzZS5odG1sJyAlfVxcblxcbnslIGJsb2NrIHRpdGxlICV9Q3VzdG9tZXIgQW5hbHlzaXMgRGFzaGJvYXJkeyUgZW5kYmxvY2sgJX1cXG5cXG57JSBibG9jayBjb250ZW50ICV9XFxuPGRpdiBjbGFzcz1cXFwiZGFzaGJvYXJkLWhlYWRlclxcXCI+XFxuICAgIDxoMT5DdXN0b21lciBBbmFseXNpcyBEYXNoYm9hcmQ8L2gxPlxcbiAgICA8cCBjbGFzcz1cXFwibGVhZFxcXCI+VW5kZXJzdGFuZCBjdXN0b21lciBkZW1vZ3JhcGhpY3MsIHNlZ21lbnRzLCBhbmQgcHVyY2hhc2luZyBiZWhhdmlvci48L3A+XFxuPC9kaXY+XFxuXFxuPCEtLSBTdGF0cyBDYXJkcyAtLT5cXG48ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtM1xcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkIHN0YXRzLWNhcmQgYmctbGlnaHRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtYm9keSB0ZXh0LWNlbnRlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cXFwiY2FyZC10aXRsZVxcXCI+VG90YWwgQ3VzdG9tZXJzPC9oNT5cXG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVxcXCJjYXJkLXRleHRcXFwiPnt7IGRlbW9ncmFwaGljcy50b3RhbF9jdXN0b21lcnMgfX08L2gyPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICBcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTNcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2FyZCBzdGF0cy1jYXJkIGJnLWxpZ2h0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkLWJvZHkgdGV4dC1jZW50ZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9XFxcImNhcmQtdGl0bGVcXFwiPkF2ZXJhZ2UgQWdlPC9oNT5cXG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVxcXCJjYXJkLXRleHRcXFwiPnt7IGRlbW9ncmFwaGljcy5hdmdfYWdlfGZsb2F0Zm9ybWF0OjEgfX08L2gyPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICBcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTNcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2FyZCBzdGF0cy1jYXJkIGJnLWxpZ2h0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkLWJvZHkgdGV4dC1jZW50ZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9XFxcImNhcmQtdGl0bGVcXFwiPkF2ZXJhZ2UgU3BlbmQ8L2g1PlxcbiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XFxcImNhcmQtdGV4dFxcXCI+JHt7IGRlbW9ncmFwaGljcy5hdmdfdG90YWxfc3BlbmR8ZmxvYXRmb3JtYXQ6MiB9fTwvaDI+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIFxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtM1xcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkIHN0YXRzLWNhcmQgYmctbGlnaHRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtYm9keSB0ZXh0LWNlbnRlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cXFwiY2FyZC10aXRsZVxcXCI+R2VuZGVyIFJhdGlvPC9oNT5cXG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVxcXCJjYXJkLXRleHRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgTToge3sgZGVtb2dyYXBoaWNzLmdlbmRlcl9kaXN0cmlidXRpb24uTXxmbG9hdGZvcm1hdDoxIH19XFxuICAgICAgICAgICAgICAgICAgICBGOiB7eyBkZW1vZ3JhcGhpY3MuZ2VuZGVyX2Rpc3RyaWJ1dGlvbi5GfGZsb2F0Zm9ybWF0OjEgfX1cXG4gICAgICAgICAgICAgICAgPC9oMj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cXG48IS0tIENoYXJ0cyAtLT5cXG48ZGl2IGNsYXNzPVxcXCJyb3cgbXQtNFxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNoYXJ0LWNvbnRhaW5lclxcXCI+XFxuICAgICAgICAgICAgPGg0PkN1c3RvbWVyIFNlZ21lbnRzPC9oND5cXG4gICAgICAgICAgICB7eyBjdXN0b21lcl9zZWdtZW50c19jaGFydHxzYWZlIH19XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIFxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjaGFydC1jb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgIDxoND5BZ2UgRGlzdHJpYnV0aW9uPC9oND5cXG4gICAgICAgICAgICB7eyBhZ2VfZGlzdHJpYnV0aW9uX2NoYXJ0fHNhZmUgfX1cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cXG48ZGl2IGNsYXNzPVxcXCJyb3cgbXQtNFxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC0xMlxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjaGFydC1jb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgIDxoND5Mb3lhbHR5IFRpZXIgQW5hbHlzaXM8L2g0PlxcbiAgICAgICAgICAgIHt7IGxveWFsdHlfdGllcl9jaGFydHxzYWZlIH19XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxueyUgZW5kYmxvY2sgJX1cIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkZpbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUp2Z1daYlhrTE1pWDF6VjZaeU5KblQifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMTI5YWNkMjEtMzMzOS00N2MxLWEwMDktZTFhZWRiYjM4MTllIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxRUtKOTRIQzY2Qjk3QkE3VmlnUHhMaCIsInRvb2xfbmFtZSI6InNhdmUtZmlsZSIsImlucHV0X2pzb24iOiJ7XCJmaWxlX3BhdGhcIjogXCJ0ZW1wbGF0ZXMvZGF0YV9kYXNoYm9hcmQvYWRfcGVyZm9ybWFuY2UuaHRtbFwiLCBcImZpbGVfY29udGVudFwiOiBcInslIGV4dGVuZHMgJ2RhdGFfZGFzaGJvYXJkL2Jhc2UuaHRtbCcgJX1cXG5cXG57JSBibG9jayB0aXRsZSAlfUFkIFBlcmZvcm1hbmNlIERhc2hib2FyZHslIGVuZGJsb2NrICV9XFxuXFxueyUgYmxvY2sgY29udGVudCAlfVxcbjxkaXYgY2xhc3M9XFxcImRhc2hib2FyZC1oZWFkZXJcXFwiPlxcbiAgICA8aDE+QWQgUGVyZm9ybWFuY2UgRGFzaGJvYXJkPC9oMT5cXG4gICAgPHAgY2xhc3M9XFxcImxlYWRcXFwiPkNvbXBhcmUgcGVyZm9ybWFuY2UgYWNyb3NzIGFkdmVydGlzaW5nIHBsYXRmb3JtcyBhbmQgY2FtcGFpZ25zLjwvcD5cXG48L2Rpdj5cXG5cXG48IS0tIFBsYXRmb3JtIFBlcmZvcm1hbmNlIFRhYmxlIC0tPlxcbjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC0xMlxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJkIG1iLTRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtaGVhZGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgPGg0PlBsYXRmb3JtIFBlcmZvcm1hbmNlIENvbXBhcmlzb248L2g0PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtYm9keVxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInRhYmxlLXJlc3BvbnNpdmVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWhvdmVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5QbGF0Zm9ybTwvdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+SW1wcmVzc2lvbnM8L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNsaWNrczwvdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29udmVyc2lvbnM8L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNwZW5kPC90aD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db252ZXJzaW9uIFZhbHVlPC90aD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5DVFI8L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNQQzwvdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Uk9BUzwvdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGZvciBwbGF0Zm9ybSBpbiBwbGF0Zm9ybV9wZXJmb3JtYW5jZSAlfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcGxhdGZvcm0ucGxhdGZvcm0gfX08L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHBsYXRmb3JtLmltcHJlc3Npb25zfGZsb2F0Zm9ybWF0OjAgfX08L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHBsYXRmb3JtLmNsaWNrc3xmbG9hdGZvcm1hdDowIH19PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBwbGF0Zm9ybS5jb252ZXJzaW9uc3xmbG9hdGZvcm1hdDowIH19PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4ke3sgcGxhdGZvcm0uc3BlbmR8ZmxvYXRmb3JtYXQ6MiB9fTwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JHt7IHBsYXRmb3JtLmNvbnZlcnNpb25fdmFsdWV8ZmxvYXRmb3JtYXQ6MiB9fTwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcGxhdGZvcm0uY3RyfGZsb2F0Zm9ybWF0OjQgfX08L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiR7eyBwbGF0Zm9ybS5jcGN8ZmxvYXRmb3JtYXQ6MiB9fTwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcGxhdGZvcm0ucm9hc3xmbG9hdGZvcm1hdDoyIH19PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kZm9yICV9XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cXG4gICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcbjwhLS0gQ2hhcnRzIC0tPlxcbjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNoYXJ0LWNvbnRhaW5lclxcXCI+XFxuICAgICAgICAgICAgPGg0PkNvbnZlcnNpb25zIGJ5IFBsYXRmb3JtPC9oND5cXG4gICAgICAgICAgICB7eyBwbGF0Zm9ybV9jb252ZXJzaW9uc19jaGFydHxzYWZlIH19XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIFxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNlxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjaGFydC1jb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgIDxoND5SZXR1cm4gb24gQWQgU3BlbmQgKFJPQVMpIGJ5IFBsYXRmb3JtPC9oND5cXG4gICAgICAgICAgICB7eyBwbGF0Zm9ybV9yb2FzX2NoYXJ0fHNhZmUgfX1cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cXG48ZGl2IGNsYXNzPVxcXCJyb3cgbXQtNFxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC0xMlxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjaGFydC1jb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgIDxoND5EYWlseSBDb252ZXJzaW9ucyBieSBQbGF0Zm9ybTwvaDQ+XFxuICAgICAgICAgICAge3sgZGFpbHlfY29udmVyc2lvbnNfY2hhcnR8c2FmZSB9fVxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcbnslIGVuZGJsb2NrICV9XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE1NHFRNlF0NGk4UXY4dWp5TlpIVG9QIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjcsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjRmMjQ1ZGIyLThmNzItNGRjZS1iNDk3LTA0Y2QzMzI4NmNkMiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUh3TkNEeW16MXlzZkRRRjhMdkVoSjkiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwibWtkaXIgLXAgc3RhdGljL2Nzc1wiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDMwfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCdzIGNyZWF0ZSBhIENTUyBmaWxlIGZvciBvdXIgYXBwOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBzYXZlZCBzdWNjZXNzZnVsbHkuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxRUtKOTRIQzY2Qjk3QkE3VmlnUHhMaCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo3LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQncyBjcmVhdGUgYSBDU1MgZmlsZSBmb3Igb3VyIGFwcDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhZWJiYTFjYS1kMWZmLTRlMmQtYTg2NS1mNTE0YzEzYmRmMTAiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFIdzZ6Z2tZcWU3YlloSDJKS3dkSnJEIiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImZpbGVfcGF0aFwiOiBcInN0YXRpYy9jc3MvZGFzaGJvYXJkLmNzc1wiLCBcImZpbGVfY29udGVudFwiOiBcIi8qIERhc2hib2FyZCBTdHlsZXMgKi9cXG5ib2R5IHtcXG4gICAgZm9udC1mYW1pbHk6ICdTZWdvZSBVSScsIFRhaG9tYSwgR2VuZXZhLCBWZXJkYW5hLCBzYW5zLXNlcmlmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbn1cXG5cXG4uc2lkZWJhciB7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgdG9wOiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHotaW5kZXg6IDEwMDtcXG4gICAgcGFkZGluZzogNDhweCAwIDA7XFxuICAgIGJveC1zaGFkb3c6IGluc2V0IC0xcHggMCAwIHJnYmEoMCwgMCwgMCwgLjEpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbn1cXG5cXG4uc2lkZWJhci1zdGlja3kge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHRvcDogMDtcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNDhweCk7XFxuICAgIHBhZGRpbmctdG9wOiAuNXJlbTtcXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xcbn1cXG5cXG4ubmF2LWxpbmsge1xcbiAgICBmb250LXdlaWdodDogNTAwO1xcbiAgICBjb2xvcjogIzMzMztcXG4gICAgcGFkZGluZzogMC41cmVtIDFyZW07XFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzO1xcbn1cXG5cXG4ubmF2LWxpbms6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcbn1cXG5cXG4ubmF2LWxpbmsuYWN0aXZlIHtcXG4gICAgY29sb3I6ICMwMDdiZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxuICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgIzAwN2JmZjtcXG59XFxuXFxubWFpbiB7XFxuICAgIHBhZGRpbmctdG9wOiAzMHB4O1xcbn1cXG5cXG4uZGFzaGJvYXJkLWhlYWRlciB7XFxuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGVlMmU2O1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcXG59XFxuXFxuLnN0YXRzLWNhcmQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcztcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgYm94LXNoYWRvdzogMCA0cHggNnB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcXG59XFxuXFxuLnN0YXRzLWNhcmQ6aG92ZXIge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTVweCk7XFxuICAgIGJveC1zaGFkb3c6IDAgNnB4IDEycHggcmdiYSgwLCAwLCAwLCAwLjE1KTtcXG59XFxuXFxuLmNoYXJ0LWNvbnRhaW5lciB7XFxuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIGJveC1zaGFkb3c6IDAgNHB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcztcXG59XFxuXFxuLmNoYXJ0LWNvbnRhaW5lcjpob3ZlciB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNXB4KTtcXG4gICAgYm94LXNoYWRvdzogMCA2cHggMTJweCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xcbn1cXG5cXG4uY2hhcnQtY29udGFpbmVyIGg0IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcXG4gICAgY29sb3I6ICM0OTUwNTc7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllY2VmO1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLyogVGFibGUgc3R5bGVzICovXFxuLnRhYmxlLXJlc3BvbnNpdmUge1xcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4udGFibGUge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xcbn1cXG5cXG4udGFibGUgdGhlYWQgdGgge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2RlZTJlNjtcXG59XFxuXFxuLmNhcmQtaGVhZGVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZWUyZTY7XFxufVxcblxcbi8qIEJ1dHRvbiBzdHlsZXMgKi9cXG4uYnRuLXByaW1hcnkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgICBib3JkZXItY29sb3I6ICMwMDdiZmY7XFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzO1xcbn1cXG5cXG4uYnRuLXByaW1hcnk6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2OWQ5O1xcbiAgICBib3JkZXItY29sb3I6ICMwMDYyY2M7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMnB4KTtcXG59XFxuXFxuLyogUmVzcG9uc2l2ZSBhZGp1c3RtZW50cyAqL1xcbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgICAuc2lkZWJhciB7XFxuICAgICAgICBwb3NpdGlvbjogc3RhdGljO1xcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xcbiAgICAgICAgcGFkZGluZy10b3A6IDA7XFxuICAgIH1cXG4gICAgXFxuICAgIC5zaWRlYmFyLXN0aWNreSB7XFxuICAgICAgICBoZWlnaHQ6IGF1dG87XFxuICAgIH1cXG4gICAgXFxuICAgIG1haW4ge1xcbiAgICAgICAgcGFkZGluZy10b3A6IDE1cHg7XFxuICAgIH1cXG59XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUh3TkNEeW16MXlzZkRRRjhMdkVoSjkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6OCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMmU4NDFjYjUtNzZlMi00NjJkLTk4OTMtOGY5NGNkNjE5ODJhIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVkFxd3dhajhxa2l0WE5pZUxiUXpjVCIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJweXRob24gbWFuYWdlLnB5IG1pZ3JhdGVcIiwgXCJ3YWl0XCI6IHRydWUsIFwibWF4X3dhaXRfc2Vjb25kc1wiOiA2MH0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik5vdyBsZXQncyBydW4gdGhlIERqYW5nbyBzZXJ2ZXIgdG8gdGVzdCBvdXIgYXBwbGljYXRpb246XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFIdzZ6Z2tZcWU3YlloSDJKS3dkSnJEIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjgsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCdzIHJ1biB0aGUgRGphbmdvIHNlcnZlciB0byB0ZXN0IG91ciBhcHBsaWNhdGlvbjpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI5Y2E0NjA2OC0yNWZmLTRiNjUtYjc4Mi00NDQ3ODc1MzU2YmIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFETkJ5QlBvUFN1aGM2dTZ3d1ZnOTNqIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInB5dGhvbiBtYW5hZ2UucHkgcnVuc2VydmVyXCIsIFwid2FpdFwiOiBmYWxzZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDMwfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0J3Mgc3RhcnQgdGhlIERqYW5nbyBkZXZlbG9wbWVudCBzZXJ2ZXIgdG8gc2VlIG91ciB3ZWItYmFzZWQgZGF0YSBhbmFseXNpcyBkYXNoYm9hcmQ6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAwXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIFx1MDAxYlszNjsxbU9wZXJhdGlvbnMgdG8gcGVyZm9ybTpcdTAwMWJbMG1cblx1MDAxYlsxbSAgQXBwbHkgYWxsIG1pZ3JhdGlvbnM6IFx1MDAxYlswbWFkbWluLCBhdXRoLCBjb250ZW50dHlwZXMsIHNlc3Npb25zXG5cdTAwMWJbMzY7MW1SdW5uaW5nIG1pZ3JhdGlvbnM6XHUwMDFiWzBtXG4gIEFwcGx5aW5nIGNvbnRlbnR0eXBlcy4wMDAxX2luaXRpYWwuLi5cdTAwMWJbMzI7MW0gT0tcdTAwMWJbMG1cbiAgQXBwbHlpbmcgYXV0aC4wMDAxX2luaXRpYWwuLi5cdTAwMWJbMzI7MW0gT0tcdTAwMWJbMG1cbiAgQXBwbHlpbmcgYWRtaW4uMDAwMV9pbml0aWFsLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGFkbWluLjAwMDJfbG9nZW50cnlfcmVtb3ZlX2F1dG9fYWRkLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGFkbWluLjAwMDNfbG9nZW50cnlfYWRkX2FjdGlvbl9mbGFnX2Nob2ljZXMuLi5cdTAwMWJbMzI7MW0gT0tcdTAwMWJbMG1cbiAgQXBwbHlpbmcgY29udGVudHR5cGVzLjAwMDJfcmVtb3ZlX2NvbnRlbnRfdHlwZV9uYW1lLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGF1dGguMDAwMl9hbHRlcl9wZXJtaXNzaW9uX25hbWVfbWF4X2xlbmd0aC4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhdXRoLjAwMDNfYWx0ZXJfdXNlcl9lbWFpbF9tYXhfbGVuZ3RoLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGF1dGguMDAwNF9hbHRlcl91c2VyX3VzZXJuYW1lX29wdHMuLi5cdTAwMWJbMzI7MW0gT0tcdTAwMWJbMG1cbiAgQXBwbHlpbmcgYXV0aC4wMDA1X2FsdGVyX3VzZXJfbGFzdF9sb2dpbl9udWxsLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGF1dGguMDAwNl9yZXF1aXJlX2NvbnRlbnR0eXBlc18wMDAyLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGF1dGguMDAwN19hbHRlcl92YWxpZGF0b3JzX2FkZF9lcnJvcl9tZXNzYWdlcy4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhdXRoLjAwMDhfYWx0ZXJfdXNlcl91c2VybmFtZV9tYXhfbGVuZ3RoLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGF1dGguMDAwOV9hbHRlcl91c2VyX2xhc3RfbmFtZV9tYXhfbGVuZ3RoLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGF1dGguMDAxMF9hbHRlcl9ncm91cF9uYW1lX21heF9sZW5ndGguLi5cdTAwMWJbMzI7MW0gT0tcdTAwMWJbMG1cbiAgQXBwbHlpbmcgYXV0aC4wMDExX3VwZGF0ZV9wcm94eV9wZXJtaXNzaW9ucy4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhdXRoLjAwMTJfYWx0ZXJfdXNlcl9maXJzdF9uYW1lX21heF9sZW5ndGguLi5cdTAwMWJbMzI7MW0gT0tcdTAwMWJbMG1cbiAgQXBwbHlpbmcgc2Vzc2lvbnMuMDAwMV9pbml0aWFsLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG5cbiAgICAgICAgPC9zdGRvdXQ+XG4gICAgICAgIDxzdGRlcnI+XG4gICAgICAgIFxuICAgICAgICA8L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFWQXF3d2FqOHFraXRYTmllTGJRemNUIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjksImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTGV0J3Mgc3RhcnQgdGhlIERqYW5nbyBkZXZlbG9wbWVudCBzZXJ2ZXIgdG8gc2VlIG91ciB3ZWItYmFzZWQgZGF0YSBhbmFseXNpcyBkYXNoYm9hcmQ6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZWFjMmE4NDctNTc3OC00M2NhLWI1ZDItNmU3ZDA5Y2JiMDM3IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiR3JlYXQhIEkndmUgc3VjY2Vzc2Z1bGx5IGNvbnZlcnRlZCB5b3VyIGRhdGEgYW5hbHlzaXMgcHJvamVjdCBpbnRvIGEgd2ViLWJhc2VkIERqYW5nbyBhcHBsaWNhdGlvbi4gVGhlIGRldmVsb3BtZW50IHNlcnZlciBpcyBub3cgcnVubmluZywgYW5kIHlvdSBjYW4gYWNjZXNzIHlvdXIgZGF0YSBkYXNoYm9hcmQgYnkgb3BlbmluZyBhIHdlYiBicm93c2VyIGFuZCBuYXZpZ2F0aW5nIHRvOlxuXG5gYGBcbmh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9cbmBgYFxuXG5IZXJlJ3Mgd2hhdCBJJ3ZlIGNyZWF0ZWQgZm9yIHlvdTpcblxuIyMgRGphbmdvIERhdGEgQW5hbHlzaXMgRGFzaGJvYXJkXG5cbjEuICoqV2ViLUJhc2VkIEludGVyZmFjZSoqOiBBbGwgeW91ciBkYXRhIHZpc3VhbGl6YXRpb25zIGFyZSBub3cgYWNjZXNzaWJsZSB0aHJvdWdoIGEgY2xlYW4sIG1vZGVybiB3ZWIgaW50ZXJmYWNlIHdpdGg6XG4gICAtIEEgcmVzcG9uc2l2ZSBzaWRlYmFyIG5hdmlnYXRpb25cbiAgIC0gSW50ZXJhY3RpdmUgUGxvdGx5IGNoYXJ0cyBlbWJlZGRlZCBkaXJlY3RseSBpbiB0aGUgd2ViIHBhZ2VzXG4gICAtIEJvb3RzdHJhcCBzdHlsaW5nIGZvciBhIHByb2Zlc3Npb25hbCBsb29rIGFuZCBmZWVsXG5cbjIuICoqTXVsdGlwbGUgRGFzaGJvYXJkIFBhZ2VzKio6XG4gICAtICoqSG9tZSBEYXNoYm9hcmQqKjogT3ZlcnZpZXcgb2YgYWxsIGF2YWlsYWJsZSBhbmFseXRpY3Mgc2VjdGlvbnNcbiAgIC0gKipHb29nbGUgQW5hbHl0aWNzIERhc2hib2FyZCoqOiBXZWJzaXRlIHRyYWZmaWMsIGNvbnZlcnNpb25zLCBhbmQgcmV2ZW51ZSBtZXRyaWNzXG4gICAtICoqQ3VzdG9tZXIgQW5hbHlzaXMgRGFzaGJvYXJkKio6IERlbW9ncmFwaGljcywgc2VnbWVudHMsIGFuZCBsb3lhbHR5IGFuYWx5c2lzXG4gICAtICoqQWQgUGVyZm9ybWFuY2UgRGFzaGJvYXJkKio6IENvbXBhcmlzb24gb2YgYWQgcGxhdGZvcm1zIChGYWNlYm9vaywgSW5zdGFncmFtLCBHb29nbGUgQWRzKVxuXG4zLiAqKkludGVyYWN0aXZlIEZlYXR1cmVzKio6XG4gICAtIEFsbCBjaGFydHMgYXJlIGZ1bGx5IGludGVyYWN0aXZlIC0geW91IGNhbiBob3ZlciBvdmVyIGRhdGEgcG9pbnRzLCB6b29tIGluL291dCwgYW5kIGRvd25sb2FkIGFzIGltYWdlc1xuICAgLSBSZXNwb25zaXZlIGRlc2lnbiB0aGF0IHdvcmtzIG9uIGRlc2t0b3AgYW5kIG1vYmlsZSBkZXZpY2VzXG4gICAtIENsZWFuIG5hdmlnYXRpb24gYmV0d2VlbiBkaWZmZXJlbnQgYW5hbHlzaXMgc2VjdGlvbnNcblxuIyMgSG93IHRvIFVzZVxuXG4xLiBUaGUgc2VydmVyIGlzIGFscmVhZHkgcnVubmluZyBhdCBodHRwOi8vMTI3LjAuMC4xOjgwMDAvXG4yLiBOYXZpZ2F0ZSBiZXR3ZWVuIGRpZmZlcmVudCBkYXNoYm9hcmRzIHVzaW5nIHRoZSBzaWRlYmFyIG1lbnVcbjMuIEludGVyYWN0IHdpdGggdGhlIGNoYXJ0cyBieSBob3ZlcmluZywgY2xpY2tpbmcsIG9yIHVzaW5nIHRoZSB0b29sYmFyIG9wdGlvbnMgaW4gZWFjaCBjaGFydFxuNC4gVmlldyBkZXRhaWxlZCBzdGF0aXN0aWNzIGluIHRoZSBjYXJkcyBhdCB0aGUgdG9wIG9mIGVhY2ggZGFzaGJvYXJkXG5cbiMjIFByb2plY3QgU3RydWN0dXJlXG5cbi0gRGphbmdvIHByb2plY3Qgd2l0aCBhIGRlZGljYXRlZCBkYXRhX2Rhc2hib2FyZCBhcHBcbi0gVGVtcGxhdGVzIGZvciBlYWNoIGRhc2hib2FyZCB2aWV3XG4tIENTUyBzdHlsaW5nIGZvciBhIHByb2Zlc3Npb25hbCBhcHBlYXJhbmNlXG4tIERhdGEgYW5hbHlzaXMgbW9kdWxlIHRoYXQgcHJvY2Vzc2VzIHlvdXIgQ1NWIGRhdGEgYW5kIGdlbmVyYXRlcyB2aXN1YWxpemF0aW9uc1xuXG5UbyBzdG9wIHRoZSBzZXJ2ZXIgd2hlbiB5b3UncmUgZG9uZSwgcHJlc3MgQ3RybCtDIGluIHRoZSB0ZXJtaW5hbCB3aGVyZSBpdCdzIHJ1bm5pbmcuXG5cbldvdWxkIHlvdSBsaWtlIG1lIHRvIGV4cGxhaW4gYW55IHNwZWNpZmljIHBhcnQgb2YgdGhlIGltcGxlbWVudGF0aW9uIGluIG1vcmUgZGV0YWlsP1xuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiUHJvY2VzcyBsYXVuY2hlZCB3aXRoIFBJRCAxMCIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUROQnlCUG9QU3VoYzZ1Nnd3Vmc5M2oifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTAsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiR3JlYXQhIEkndmUgc3VjY2Vzc2Z1bGx5IGNvbnZlcnRlZCB5b3VyIGRhdGEgYW5hbHlzaXMgcHJvamVjdCBpbnRvIGEgd2ViLWJhc2VkIERqYW5nbyBhcHBsaWNhdGlvbi4gVGhlIGRldmVsb3BtZW50IHNlcnZlciBpcyBub3cgcnVubmluZywgYW5kIHlvdSBjYW4gYWNjZXNzIHlvdXIgZGF0YSBkYXNoYm9hcmQgYnkgb3BlbmluZyBhIHdlYiBicm93c2VyIGFuZCBuYXZpZ2F0aW5nIHRvOlxuXG5gYGBcbmh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9cbmBgYFxuXG5IZXJlJ3Mgd2hhdCBJJ3ZlIGNyZWF0ZWQgZm9yIHlvdTpcblxuIyMgRGphbmdvIERhdGEgQW5hbHlzaXMgRGFzaGJvYXJkXG5cbjEuICoqV2ViLUJhc2VkIEludGVyZmFjZSoqOiBBbGwgeW91ciBkYXRhIHZpc3VhbGl6YXRpb25zIGFyZSBub3cgYWNjZXNzaWJsZSB0aHJvdWdoIGEgY2xlYW4sIG1vZGVybiB3ZWIgaW50ZXJmYWNlIHdpdGg6XG4gICAtIEEgcmVzcG9uc2l2ZSBzaWRlYmFyIG5hdmlnYXRpb25cbiAgIC0gSW50ZXJhY3RpdmUgUGxvdGx5IGNoYXJ0cyBlbWJlZGRlZCBkaXJlY3RseSBpbiB0aGUgd2ViIHBhZ2VzXG4gICAtIEJvb3RzdHJhcCBzdHlsaW5nIGZvciBhIHByb2Zlc3Npb25hbCBsb29rIGFuZCBmZWVsXG5cbjIuICoqTXVsdGlwbGUgRGFzaGJvYXJkIFBhZ2VzKio6XG4gICAtICoqSG9tZSBEYXNoYm9hcmQqKjogT3ZlcnZpZXcgb2YgYWxsIGF2YWlsYWJsZSBhbmFseXRpY3Mgc2VjdGlvbnNcbiAgIC0gKipHb29nbGUgQW5hbHl0aWNzIERhc2hib2FyZCoqOiBXZWJzaXRlIHRyYWZmaWMsIGNvbnZlcnNpb25zLCBhbmQgcmV2ZW51ZSBtZXRyaWNzXG4gICAtICoqQ3VzdG9tZXIgQW5hbHlzaXMgRGFzaGJvYXJkKio6IERlbW9ncmFwaGljcywgc2VnbWVudHMsIGFuZCBsb3lhbHR5IGFuYWx5c2lzXG4gICAtICoqQWQgUGVyZm9ybWFuY2UgRGFzaGJvYXJkKio6IENvbXBhcmlzb24gb2YgYWQgcGxhdGZvcm1zIChGYWNlYm9vaywgSW5zdGFncmFtLCBHb29nbGUgQWRzKVxuXG4zLiAqKkludGVyYWN0aXZlIEZlYXR1cmVzKio6XG4gICAtIEFsbCBjaGFydHMgYXJlIGZ1bGx5IGludGVyYWN0aXZlIC0geW91IGNhbiBob3ZlciBvdmVyIGRhdGEgcG9pbnRzLCB6b29tIGluL291dCwgYW5kIGRvd25sb2FkIGFzIGltYWdlc1xuICAgLSBSZXNwb25zaXZlIGRlc2lnbiB0aGF0IHdvcmtzIG9uIGRlc2t0b3AgYW5kIG1vYmlsZSBkZXZpY2VzXG4gICAtIENsZWFuIG5hdmlnYXRpb24gYmV0d2VlbiBkaWZmZXJlbnQgYW5hbHlzaXMgc2VjdGlvbnNcblxuIyMgSG93IHRvIFVzZVxuXG4xLiBUaGUgc2VydmVyIGlzIGFscmVhZHkgcnVubmluZyBhdCBodHRwOi8vMTI3LjAuMC4xOjgwMDAvXG4yLiBOYXZpZ2F0ZSBiZXR3ZWVuIGRpZmZlcmVudCBkYXNoYm9hcmRzIHVzaW5nIHRoZSBzaWRlYmFyIG1lbnVcbjMuIEludGVyYWN0IHdpdGggdGhlIGNoYXJ0cyBieSBob3ZlcmluZywgY2xpY2tpbmcsIG9yIHVzaW5nIHRoZSB0b29sYmFyIG9wdGlvbnMgaW4gZWFjaCBjaGFydFxuNC4gVmlldyBkZXRhaWxlZCBzdGF0aXN0aWNzIGluIHRoZSBjYXJkcyBhdCB0aGUgdG9wIG9mIGVhY2ggZGFzaGJvYXJkXG5cbiMjIFByb2plY3QgU3RydWN0dXJlXG5cbi0gRGphbmdvIHByb2plY3Qgd2l0aCBhIGRlZGljYXRlZCBkYXRhX2Rhc2hib2FyZCBhcHBcbi0gVGVtcGxhdGVzIGZvciBlYWNoIGRhc2hib2FyZCB2aWV3XG4tIENTUyBzdHlsaW5nIGZvciBhIHByb2Zlc3Npb25hbCBhcHBlYXJhbmNlXG4tIERhdGEgYW5hbHlzaXMgbW9kdWxlIHRoYXQgcHJvY2Vzc2VzIHlvdXIgQ1NWIGRhdGEgYW5kIGdlbmVyYXRlcyB2aXN1YWxpemF0aW9uc1xuXG5UbyBzdG9wIHRoZSBzZXJ2ZXIgd2hlbiB5b3UncmUgZG9uZSwgcHJlc3MgQ3RybCtDIGluIHRoZSB0ZXJtaW5hbCB3aGVyZSBpdCdzIHJ1bm5pbmcuXG5cbldvdWxkIHlvdSBsaWtlIG1lIHRvIGV4cGxhaW4gYW55IHNwZWNpZmljIHBhcnQgb2YgdGhlIGltcGxlbWVudGF0aW9uIGluIG1vcmUgZGV0YWlsP1xuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiMmU1NTc0NWUtNWNlMi00YzFkLWE4ZDgtM2VmMTg0OGJlYTIyIiwidXVpZCI6ImU4NGQyNTlhLWMyYTEtNGUxYS1hMTU2LTYzZjA5MTk2NTYzYSIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MTc0NTEzNTE1NTQ0NCwidG9UaW1lc3RhbXAiOjE3NDUxMzU2ODEzNzIsInNlZW5fc3RhdGUiOiJzZWVuIn0seyJyZXF1ZXN0X2lkIjoiNmVlN2YxNWYtNThjOC00NjI2LTk0NmYtZmM0N2E1MjFlZjdkIiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI1NjM5MGY2YS00ZDQ4LTQzYjYtYTJjNS0wMDdkYTRmMzAzZGMiLCJyZXF1ZXN0X21lc3NhZ2UiOiJQYWdlIG5vdCBmb3VuZCAoNDA0KVxuUmVxdWVzdCBNZXRob2Q6XHRHRVRcblJlcXVlc3QgVVJMOlx0aHR0cDovLzEyNy4wLjAuMTo4MDAwL2Rhc2hib2FyZC9cblVzaW5nIHRoZSBVUkxjb25mIGRlZmluZWQgaW4gZGlnaXRhbF9kYXRhX3Byb2plY3QudXJscywgRGphbmdvIHRyaWVkIHRoZXNlIFVSTCBwYXR0ZXJucywgaW4gdGhpcyBvcmRlcjpcblxuYWRtaW4vXG5bbmFtZT0naW5kZXgnXVxuZ29vZ2xlLWFuYWx5dGljcy8gW25hbWU9J2dvb2dsZV9hbmFseXRpY3MnXVxuY3VzdG9tZXItYW5hbHlzaXMvIFtuYW1lPSdjdXN0b21lcl9hbmFseXNpcyddXG5hZC1wZXJmb3JtYW5jZS8gW25hbWU9J2FkX3BlcmZvcm1hbmNlJ11cblRoZSBjdXJyZW50IHBhdGgsIGRhc2hib2FyZC8sIGRpZG7igJl0IG1hdGNoIGFueSBvZiB0aGVzZS4iLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoiUGFnZSBub3QgZm91bmQgKDQwNCkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlJlcXVlc3QgTWV0aG9kOlx0R0VUIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJSZXF1ZXN0IFVSTDpcdGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9kYXNoYm9hcmQvIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJVc2luZyB0aGUgVVJMY29uZiBkZWZpbmVkIGluIGRpZ2l0YWxfZGF0YV9wcm9qZWN0LnVybHMsIERqYW5nbyB0cmllZCB0aGVzZSBVUkwgcGF0dGVybnMsIGluIHRoaXMgb3JkZXI6In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJhZG1pbi8ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IltuYW1lPSdpbmRleCddIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJnb29nbGUtYW5hbHl0aWNzLyBbbmFtZT0nZ29vZ2xlX2FuYWx5dGljcyddIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJjdXN0b21lci1hbmFseXNpcy8gW25hbWU9J2N1c3RvbWVyX2FuYWx5c2lzJ10ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImFkLXBlcmZvcm1hbmNlLyBbbmFtZT0nYWRfcGVyZm9ybWFuY2UnXSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiVGhlIGN1cnJlbnQgcGF0aCwgZGFzaGJvYXJkLywgZGlkbuKAmXQgbWF0Y2ggYW55IG9mIHRoZXNlLiJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBzZWUgdGhlIGlzc3VlLiBUaGUgVVJMIHN0cnVjdHVyZSBpcyBzbGlnaHRseSBkaWZmZXJlbnQgdGhhbiB3aGF0IHlvdSdyZSB0cnlpbmcgdG8gYWNjZXNzLiBMZXQgbWUgZXhwbGFpbiB0aGUgY29ycmVjdCBVUkxzIHRvIHVzZTpcblxuIyMgQ29ycmVjdCBVUkxzIGZvciBZb3VyIERqYW5nbyBEYXNoYm9hcmRcblxuQmFzZWQgb24gdGhlIFVSTCBwYXR0ZXJucyB3ZSBzZXQgdXAsIGhlcmUgYXJlIHRoZSBjb3JyZWN0IFVSTHMgdG8gYWNjZXNzIHlvdXIgZGFzaGJvYXJkczpcblxuMS4gKipNYWluIERhc2hib2FyZCAoSG9tZSkqKjogXG4gICBgYGBcbiAgIGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9cbiAgIGBgYFxuXG4yLiAqKkdvb2dsZSBBbmFseXRpY3MgRGFzaGJvYXJkKio6XG4gICBgYGBcbiAgIGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9nb29nbGUtYW5hbHl0aWNzL1xuICAgYGBgXG5cbjMuICoqQ3VzdG9tZXIgQW5hbHlzaXMgRGFzaGJvYXJkKio6XG4gICBgYGBcbiAgIGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9jdXN0b21lci1hbmFseXNpcy9cbiAgIGBgYFxuXG40LiAqKkFkIFBlcmZvcm1hbmNlIERhc2hib2FyZCoqOlxuICAgYGBgXG4gICBodHRwOi8vMTI3LjAuMC4xOjgwMDAvYWQtcGVyZm9ybWFuY2UvXG4gICBgYGBcblxuVGhlIGVycm9yIHlvdSdyZSBzZWVpbmcgaXMgYmVjYXVzZSB5b3UncmUgdHJ5aW5nIHRvIGFjY2VzcyBgaHR0cDovLzEyNy4wLjAuMTo4MDAwL2Rhc2hib2FyZC9gLCBidXQgdGhlcmUncyBubyBVUkwgcGF0dGVybiBkZWZpbmVkIGZvciB0aGF0IHBhdGguXG5cblRyeSBhY2Nlc3NpbmcgdGhlIG1haW4gZGFzaGJvYXJkIGF0IGBodHRwOi8vMTI3LjAuMC4xOjgwMDAvYCBmaXJzdCwgYW5kIHRoZW4geW91IGNhbiBuYXZpZ2F0ZSB0byB0aGUgb3RoZXIgZGFzaGJvYXJkcyB1c2luZyBlaXRoZXIgdGhlIHNpZGViYXIgbmF2aWdhdGlvbiBvciB0aGUgZGlyZWN0IFVSTHMgbGlzdGVkIGFib3ZlLlxuXG5JZiB5b3UnZCBwcmVmZXIgdG8gaGF2ZSBhIGAvZGFzaGJvYXJkL2AgcHJlZml4IGZvciBhbGwgeW91ciBVUkxzLCBJIGNhbiBtb2RpZnkgdGhlIFVSTCBjb25maWd1cmF0aW9uIHRvIGFjY29tbW9kYXRlIHRoYXQuIFdvdWxkIHlvdSBsaWtlIG1lIHRvIG1ha2UgdGhhdCBjaGFuZ2U/XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6IlBhZ2Ugbm90IGZvdW5kICg0MDQpXG5SZXF1ZXN0IE1ldGhvZDpcdEdFVFxuUmVxdWVzdCBVUkw6XHRodHRwOi8vMTI3LjAuMC4xOjgwMDAvZGFzaGJvYXJkL1xuVXNpbmcgdGhlIFVSTGNvbmYgZGVmaW5lZCBpbiBkaWdpdGFsX2RhdGFfcHJvamVjdC51cmxzLCBEamFuZ28gdHJpZWQgdGhlc2UgVVJMIHBhdHRlcm5zLCBpbiB0aGlzIG9yZGVyOlxuXG5hZG1pbi9cbltuYW1lPSdpbmRleCddXG5nb29nbGUtYW5hbHl0aWNzLyBbbmFtZT0nZ29vZ2xlX2FuYWx5dGljcyddXG5jdXN0b21lci1hbmFseXNpcy8gW25hbWU9J2N1c3RvbWVyX2FuYWx5c2lzJ11cbmFkLXBlcmZvcm1hbmNlLyBbbmFtZT0nYWRfcGVyZm9ybWFuY2UnXVxuVGhlIGN1cnJlbnQgcGF0aCwgZGFzaGJvYXJkLywgZGlkbuKAmXQgbWF0Y2ggYW55IG9mIHRoZXNlLiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxMCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiJJIHNlZSB0aGUgaXNzdWUuIFRoZSBVUkwgc3RydWN0dXJlIGlzIHNsaWdodGx5IGRpZmZlcmVudCB0aGFuIHdoYXQgeW91J3JlIHRyeWluZyB0byBhY2Nlc3MuIExldCBtZSBleHBsYWluIHRoZSBjb3JyZWN0IFVSTHMgdG8gdXNlOlxuXG4jIyBDb3JyZWN0IFVSTHMgZm9yIFlvdXIgRGphbmdvIERhc2hib2FyZFxuXG5CYXNlZCBvbiB0aGUgVVJMIHBhdHRlcm5zIHdlIHNldCB1cCwgaGVyZSBhcmUgdGhlIGNvcnJlY3QgVVJMcyB0byBhY2Nlc3MgeW91ciBkYXNoYm9hcmRzOlxuXG4xLiAqKk1haW4gRGFzaGJvYXJkIChIb21lKSoqOiBcbiAgIGBgYFxuICAgaHR0cDovLzEyNy4wLjAuMTo4MDAwL1xuICAgYGBgXG5cbjIuICoqR29vZ2xlIEFuYWx5dGljcyBEYXNoYm9hcmQqKjpcbiAgIGBgYFxuICAgaHR0cDovLzEyNy4wLjAuMTo4MDAwL2dvb2dsZS1hbmFseXRpY3MvXG4gICBgYGBcblxuMy4gKipDdXN0b21lciBBbmFseXNpcyBEYXNoYm9hcmQqKjpcbiAgIGBgYFxuICAgaHR0cDovLzEyNy4wLjAuMTo4MDAwL2N1c3RvbWVyLWFuYWx5c2lzL1xuICAgYGBgXG5cbjQuICoqQWQgUGVyZm9ybWFuY2UgRGFzaGJvYXJkKio6XG4gICBgYGBcbiAgIGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9hZC1wZXJmb3JtYW5jZS9cbiAgIGBgYFxuXG5UaGUgZXJyb3IgeW91J3JlIHNlZWluZyBpcyBiZWNhdXNlIHlvdSdyZSB0cnlpbmcgdG8gYWNjZXNzIGBodHRwOi8vMTI3LjAuMC4xOjgwMDAvZGFzaGJvYXJkL2AsIGJ1dCB0aGVyZSdzIG5vIFVSTCBwYXR0ZXJuIGRlZmluZWQgZm9yIHRoYXQgcGF0aC5cblxuVHJ5IGFjY2Vzc2luZyB0aGUgbWFpbiBkYXNoYm9hcmQgYXQgYGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9gIGZpcnN0LCBhbmQgdGhlbiB5b3UgY2FuIG5hdmlnYXRlIHRvIHRoZSBvdGhlciBkYXNoYm9hcmRzIHVzaW5nIGVpdGhlciB0aGUgc2lkZWJhciBuYXZpZ2F0aW9uIG9yIHRoZSBkaXJlY3QgVVJMcyBsaXN0ZWQgYWJvdmUuXG5cbklmIHlvdSdkIHByZWZlciB0byBoYXZlIGEgYC9kYXNoYm9hcmQvYCBwcmVmaXggZm9yIGFsbCB5b3VyIFVSTHMsIEkgY2FuIG1vZGlmeSB0aGUgVVJMIGNvbmZpZ3VyYXRpb24gdG8gYWNjb21tb2RhdGUgdGhhdC4gV291bGQgeW91IGxpa2UgbWUgdG8gbWFrZSB0aGF0IGNoYW5nZT9cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsicmVxdWVzdF9pZCI6Ijg3NTBhNzRiLWVlMjgtNDg4My05ZDhhLTVhZDUwNWUwZWVlNCIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiY2FkODNjNTMtOTUwZS00YjI2LWIyNjUtNjY3YWNjNGE3YWI4IiwicmVxdWVzdF9tZXNzYWdlIjoiUGFnZSBub3QgZm91bmQgKDQwNClcblJlcXVlc3QgTWV0aG9kOlx0R0VUXG5SZXF1ZXN0IFVSTDpcdGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9kYXNoYm9hcmQvXG5Vc2luZyB0aGUgVVJMY29uZiBkZWZpbmVkIGluIGRpZ2l0YWxfZGF0YV9wcm9qZWN0LnVybHMsIERqYW5nbyB0cmllZCB0aGVzZSBVUkwgcGF0dGVybnMsIGluIHRoaXMgb3JkZXI6XG5cbmFkbWluL1xuW25hbWU9J2luZGV4J11cbmdvb2dsZS1hbmFseXRpY3MvIFtuYW1lPSdnb29nbGVfYW5hbHl0aWNzJ11cbmN1c3RvbWVyLWFuYWx5c2lzLyBbbmFtZT0nY3VzdG9tZXJfYW5hbHlzaXMnXVxuYWQtcGVyZm9ybWFuY2UvIFtuYW1lPSdhZF9wZXJmb3JtYW5jZSddXG5UaGUgY3VycmVudCBwYXRoLCBkYXNoYm9hcmQvLCBkaWRu4oCZdCBtYXRjaCBhbnkgb2YgdGhlc2UuIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlBhZ2Ugbm90IGZvdW5kICg0MDQpIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJSZXF1ZXN0IE1ldGhvZDpcdEdFVCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiUmVxdWVzdCBVUkw6XHRodHRwOi8vMTI3LjAuMC4xOjgwMDAvZGFzaGJvYXJkLyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiVXNpbmcgdGhlIFVSTGNvbmYgZGVmaW5lZCBpbiBkaWdpdGFsX2RhdGFfcHJvamVjdC51cmxzLCBEamFuZ28gdHJpZWQgdGhlc2UgVVJMIHBhdHRlcm5zLCBpbiB0aGlzIG9yZGVyOiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiYWRtaW4vIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJbbmFtZT0naW5kZXgnXSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiZ29vZ2xlLWFuYWx5dGljcy8gW25hbWU9J2dvb2dsZV9hbmFseXRpY3MnXSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiY3VzdG9tZXItYW5hbHlzaXMvIFtuYW1lPSdjdXN0b21lcl9hbmFseXNpcyddIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJhZC1wZXJmb3JtYW5jZS8gW25hbWU9J2FkX3BlcmZvcm1hbmNlJ10ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlRoZSBjdXJyZW50IHBhdGgsIGRhc2hib2FyZC8sIGRpZG7igJl0IG1hdGNoIGFueSBvZiB0aGVzZS4ifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVFSb0hmNG5VZEFHZEpaQXBtanlydDciLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwiZGlnaXRhbF9kYXRhX3Byb2plY3QvdXJscy5weVwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSB1bmRlcnN0YW5kIHRoZSBpc3N1ZSBub3cuIExldCBtZSBmaXggdGhlIFVSTCBjb25maWd1cmF0aW9uIHRvIGluY2x1ZGUgYSBgL2Rhc2hib2FyZC9gIHByZWZpeCBmb3IgYWxsIHlvdXIgVVJMcy4gVGhpcyB3aWxsIG1ha2UgdGhlIFVSTCBzdHJ1Y3R1cmUgbWF0Y2ggd2hhdCB5b3UncmUgdHJ5aW5nIHRvIGFjY2Vzcy5cblxuTGV0J3MgdXBkYXRlIHRoZSBVUkwgY29uZmlndXJhdGlvbjpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiUGFnZSBub3QgZm91bmQgKDQwNClcblJlcXVlc3QgTWV0aG9kOlx0R0VUXG5SZXF1ZXN0IFVSTDpcdGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9kYXNoYm9hcmQvXG5Vc2luZyB0aGUgVVJMY29uZiBkZWZpbmVkIGluIGRpZ2l0YWxfZGF0YV9wcm9qZWN0LnVybHMsIERqYW5nbyB0cmllZCB0aGVzZSBVUkwgcGF0dGVybnMsIGluIHRoaXMgb3JkZXI6XG5cbmFkbWluL1xuW25hbWU9J2luZGV4J11cbmdvb2dsZS1hbmFseXRpY3MvIFtuYW1lPSdnb29nbGVfYW5hbHl0aWNzJ11cbmN1c3RvbWVyLWFuYWx5c2lzLyBbbmFtZT0nY3VzdG9tZXJfYW5hbHlzaXMnXVxuYWQtcGVyZm9ybWFuY2UvIFtuYW1lPSdhZF9wZXJmb3JtYW5jZSddXG5UaGUgY3VycmVudCBwYXRoLCBkYXNoYm9hcmQvLCBkaWRu4oCZdCBtYXRjaCBhbnkgb2YgdGhlc2UuIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjEwLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6IkkgdW5kZXJzdGFuZCB0aGUgaXNzdWUgbm93LiBMZXQgbWUgZml4IHRoZSBVUkwgY29uZmlndXJhdGlvbiB0byBpbmNsdWRlIGEgYC9kYXNoYm9hcmQvYCBwcmVmaXggZm9yIGFsbCB5b3VyIFVSTHMuIFRoaXMgd2lsbCBtYWtlIHRoZSBVUkwgc3RydWN0dXJlIG1hdGNoIHdoYXQgeW91J3JlIHRyeWluZyB0byBhY2Nlc3MuXG5cbkxldCdzIHVwZGF0ZSB0aGUgVVJMIGNvbmZpZ3VyYXRpb246XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZWQzZTkzODQtMDkwMi00ZmRkLWE4ODAtMDFiYjBjZjliMzNmIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTFJhMzRTdlhRenFNVXVQN2lNMkNYOSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiZGlnaXRhbF9kYXRhX3Byb2plY3QvdXJscy5weVwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIgICAgcGF0aCgnJywgaW5jbHVkZSgnZGF0YV9kYXNoYm9hcmQudXJscycpKSxcIiwgXCJuZXdfc3RyXCI6IFwiICAgIHBhdGgoJ2Rhc2hib2FyZC8nLCBpbmNsdWRlKCdkYXRhX2Rhc2hib2FyZC51cmxzJykpLFxcbiAgICBwYXRoKCcnLCBpbmNsdWRlKCdkYXRhX2Rhc2hib2FyZC51cmxzJykpLCAgIyBLZWVwIHRoaXMgZm9yIHRoZSByb290IFVSTFwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogMjIsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMjJ9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gZGlnaXRhbF9kYXRhX3Byb2plY3QvdXJscy5weTpcbiAgICAgMVx0XCJcIlwiXG4gICAgIDJcdFVSTCBjb25maWd1cmF0aW9uIGZvciBkaWdpdGFsX2RhdGFfcHJvamVjdCBwcm9qZWN0LlxuICAgICAzXHRcbiAgICAgNFx0VGhlIGB1cmxwYXR0ZXJuc2AgbGlzdCByb3V0ZXMgVVJMcyB0byB2aWV3cy4gRm9yIG1vcmUgaW5mb3JtYXRpb24gcGxlYXNlIHNlZTpcbiAgICAgNVx0ICAgIGh0dHBzOi8vZG9jcy5kamFuZ29wcm9qZWN0LmNvbS9lbi80LjIvdG9waWNzL2h0dHAvdXJscy9cbiAgICAgNlx0RXhhbXBsZXM6XG4gICAgIDdcdEZ1bmN0aW9uIHZpZXdzXG4gICAgIDhcdCAgICAxLiBBZGQgYW4gaW1wb3J0OiAgZnJvbSBteV9hcHAgaW1wb3J0IHZpZXdzXG4gICAgIDlcdCAgICAyLiBBZGQgYSBVUkwgdG8gdXJscGF0dGVybnM6ICBwYXRoKCcnLCB2aWV3cy5ob21lLCBuYW1lPSdob21lJylcbiAgICAxMFx0Q2xhc3MtYmFzZWQgdmlld3NcbiAgICAxMVx0ICAgIDEuIEFkZCBhbiBpbXBvcnQ6ICBmcm9tIG90aGVyX2FwcC52aWV3cyBpbXBvcnQgSG9tZVxuICAgIDEyXHQgICAgMi4gQWRkIGEgVVJMIHRvIHVybHBhdHRlcm5zOiAgcGF0aCgnJywgSG9tZS5hc192aWV3KCksIG5hbWU9J2hvbWUnKVxuICAgIDEzXHRJbmNsdWRpbmcgYW5vdGhlciBVUkxjb25mXG4gICAgMTRcdCAgICAxLiBJbXBvcnQgdGhlIGluY2x1ZGUoKSBmdW5jdGlvbjogZnJvbSBkamFuZ28udXJscyBpbXBvcnQgaW5jbHVkZSwgcGF0aFxuICAgIDE1XHQgICAgMi4gQWRkIGEgVVJMIHRvIHVybHBhdHRlcm5zOiAgcGF0aCgnYmxvZy8nLCBpbmNsdWRlKCdibG9nLnVybHMnKSlcbiAgICAxNlx0XCJcIlwiXG4gICAgMTdcdGZyb20gZGphbmdvLmNvbnRyaWIgaW1wb3J0IGFkbWluXG4gICAgMThcdGZyb20gZGphbmdvLnVybHMgaW1wb3J0IHBhdGgsIGluY2x1ZGVcbiAgICAxOVx0XG4gICAgMjBcdHVybHBhdHRlcm5zID0gW1xuICAgIDIxXHQgICAgcGF0aCgnYWRtaW4vJywgYWRtaW4uc2l0ZS51cmxzKSxcbiAgICAyMlx0ICAgIHBhdGgoJycsIGluY2x1ZGUoJ2RhdGFfZGFzaGJvYXJkLnVybHMnKSksXG4gICAgMjNcdF1cbiAgICAyNFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyNFxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUVJvSGY0blVkQUdkSlpBcG1qeXJ0NyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxMCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYjc3NmFjYTAtMWY4ZS00OWNhLWJjMGEtYWFiZjJhZjRiZWMzIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxWFhnNTlKTWc1aHoyMXFmUDdWdEREMSIsInRvb2xfbmFtZSI6Imxpc3QtcHJvY2Vzc2VzIiwiaW5wdXRfanNvbiI6Int9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0J3MgcmVzdGFydCB0aGUgRGphbmdvIHNlcnZlciB0byBhcHBseSB0aGVzZSBjaGFuZ2VzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBkaWdpdGFsX2RhdGFfcHJvamVjdC91cmxzLnB5LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgMThcdGZyb20gZGphbmdvLnVybHMgaW1wb3J0IHBhdGgsIGluY2x1ZGVcbiAgICAxOVx0XG4gICAgMjBcdHVybHBhdHRlcm5zID0gW1xuICAgIDIxXHQgICAgcGF0aCgnYWRtaW4vJywgYWRtaW4uc2l0ZS51cmxzKSxcbiAgICAyMlx0ICAgIHBhdGgoJ2Rhc2hib2FyZC8nLCBpbmNsdWRlKCdkYXRhX2Rhc2hib2FyZC51cmxzJykpLFxuICAgIDIzXHQgICAgcGF0aCgnJywgaW5jbHVkZSgnZGF0YV9kYXNoYm9hcmQudXJscycpKSwgICMgS2VlcCB0aGlzIGZvciB0aGUgcm9vdCBVUkxcbiAgICAyNFx0XVxuICAgIDI1XHRcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTFJhMzRTdlhRenFNVXVQN2lNMkNYOSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxMCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0J3MgcmVzdGFydCB0aGUgRGphbmdvIHNlcnZlciB0byBhcHBseSB0aGVzZSBjaGFuZ2VzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6Ijk0MTVkNzA5LTBhMjktNDM2MS04M2IwLTc3NGVlMWFlY2JiYiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTRZU1pKS1JldmltSlFlQkRRUE1FUHYiLCJ0b29sX25hbWUiOiJraWxsLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogMTB9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSBhbGwga25vd24gcHJvY2Vzc2VzOlxuXG5UZXJtaW5hbCAxMDogcHl0aG9uIG1hbmFnZS5weSBydW5zZXJ2ZXIgLSBydW5uaW5nIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxWFhnNTlKTWc1aHoyMXFmUDdWdEREMSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxMCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiM2VlZGNhYTgtMTY5MS00ZjBhLTk2OWQtMjQ5YmFkZGFhMTVkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxV01wNnRiUlhaR1NHTVpXYUhqU3VBWCIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJweXRob24gbWFuYWdlLnB5IHJ1bnNlcnZlclwiLCBcIndhaXRcIjogZmFsc2UsIFwibWF4X3dhaXRfc2Vjb25kc1wiOiAzMH0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRlcm1pbmFsIDEwIGtpbGxlZCIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTRZU1pKS1JldmltSlFlQkRRUE1FUHYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTAsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjQ4MzMxZDIyLWFiYjktNGI2MC1hMGNlLTBiMGQyNThhZmVhMSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkkndmUgdXBkYXRlZCB0aGUgVVJMIGNvbmZpZ3VyYXRpb24gYW5kIHJlc3RhcnRlZCB0aGUgc2VydmVyLiBOb3cgeW91IGNhbiBhY2Nlc3MgeW91ciBkYXNoYm9hcmQgdXNpbmcgZWl0aGVyIG9mIHRoZXNlIFVSTHM6XG5cbjEuIE1haW4gVVJMIChvcmlnaW5hbCk6XG4gICBgYGBcbiAgIGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9cbiAgIGBgYFxuXG4yLiBEYXNoYm9hcmQgVVJMIChuZXcpOlxuICAgYGBgXG4gICBodHRwOi8vMTI3LjAuMC4xOjgwMDAvZGFzaGJvYXJkL1xuICAgYGBgXG5cbkJvdGggVVJMcyB3aWxsIHRha2UgeW91IHRvIHRoZSBzYW1lIGRhc2hib2FyZCBob21lIHBhZ2UuIEZyb20gdGhlcmUsIHlvdSBjYW4gbmF2aWdhdGUgdG8gdGhlIHNwZWNpZmljIGFuYWx5c2lzIHNlY3Rpb25zIHVzaW5nIHRoZSBzaWRlYmFyIG1lbnUuXG5cblRoZSBkYXNoYm9hcmQgVVJMcyBhcmUgbm93OlxuXG4tIERhc2hib2FyZCBIb21lOiBcbiAgLSBgaHR0cDovLzEyNy4wLjAuMTo4MDAwL2Rhc2hib2FyZC9gXG4gIC0gYGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9gXG5cbi0gR29vZ2xlIEFuYWx5dGljcyBEYXNoYm9hcmQ6IFxuICAtIGBodHRwOi8vMTI3LjAuMC4xOjgwMDAvZGFzaGJvYXJkL2dvb2dsZS1hbmFseXRpY3MvYFxuICAtIGBodHRwOi8vMTI3LjAuMC4xOjgwMDAvZ29vZ2xlLWFuYWx5dGljcy9gXG5cbi0gQ3VzdG9tZXIgQW5hbHlzaXMgRGFzaGJvYXJkOiBcbiAgLSBgaHR0cDovLzEyNy4wLjAuMTo4MDAwL2Rhc2hib2FyZC9jdXN0b21lci1hbmFseXNpcy9gXG4gIC0gYGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9jdXN0b21lci1hbmFseXNpcy9gXG5cbi0gQWQgUGVyZm9ybWFuY2UgRGFzaGJvYXJkOiBcbiAgLSBgaHR0cDovLzEyNy4wLjAuMTo4MDAwL2Rhc2hib2FyZC9hZC1wZXJmb3JtYW5jZS9gXG4gIC0gYGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9hZC1wZXJmb3JtYW5jZS9gXG5cbkkndmUgY29uZmlndXJlZCBpdCB0aGlzIHdheSBzbyBib3RoIFVSTCBzdHJ1Y3R1cmVzIHdvcmssIGdpdmluZyB5b3UgZmxleGliaWxpdHkgaW4gaG93IHlvdSBhY2Nlc3MgdGhlIGRhc2hib2FyZHMuXG5cblRyeSBhY2Nlc3NpbmcgYGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9kYXNoYm9hcmQvYCBub3cgLSBpdCBzaG91bGQgbG9hZCB0aGUgZGFzaGJvYXJkIGhvbWUgcGFnZS4gTGV0IG1lIGtub3cgaWYgeW91IGVuY291bnRlciBhbnkgb3RoZXIgaXNzdWVzIVxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiUHJvY2VzcyBsYXVuY2hlZCB3aXRoIFBJRCAxMSIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVdNcDZ0YlJYWkdTR01aV2FIalN1QVgifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTEsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiSSd2ZSB1cGRhdGVkIHRoZSBVUkwgY29uZmlndXJhdGlvbiBhbmQgcmVzdGFydGVkIHRoZSBzZXJ2ZXIuIE5vdyB5b3UgY2FuIGFjY2VzcyB5b3VyIGRhc2hib2FyZCB1c2luZyBlaXRoZXIgb2YgdGhlc2UgVVJMczpcblxuMS4gTWFpbiBVUkwgKG9yaWdpbmFsKTpcbiAgIGBgYFxuICAgaHR0cDovLzEyNy4wLjAuMTo4MDAwL1xuICAgYGBgXG5cbjIuIERhc2hib2FyZCBVUkwgKG5ldyk6XG4gICBgYGBcbiAgIGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9kYXNoYm9hcmQvXG4gICBgYGBcblxuQm90aCBVUkxzIHdpbGwgdGFrZSB5b3UgdG8gdGhlIHNhbWUgZGFzaGJvYXJkIGhvbWUgcGFnZS4gRnJvbSB0aGVyZSwgeW91IGNhbiBuYXZpZ2F0ZSB0byB0aGUgc3BlY2lmaWMgYW5hbHlzaXMgc2VjdGlvbnMgdXNpbmcgdGhlIHNpZGViYXIgbWVudS5cblxuVGhlIGRhc2hib2FyZCBVUkxzIGFyZSBub3c6XG5cbi0gRGFzaGJvYXJkIEhvbWU6IFxuICAtIGBodHRwOi8vMTI3LjAuMC4xOjgwMDAvZGFzaGJvYXJkL2BcbiAgLSBgaHR0cDovLzEyNy4wLjAuMTo4MDAwL2BcblxuLSBHb29nbGUgQW5hbHl0aWNzIERhc2hib2FyZDogXG4gIC0gYGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9kYXNoYm9hcmQvZ29vZ2xlLWFuYWx5dGljcy9gXG4gIC0gYGh0dHA6Ly8xMjcuMC4wLjE6ODAwMC9nb29nbGUtYW5hbHl0aWNzL2BcblxuLSBDdXN0b21lciBBbmFseXNpcyBEYXNoYm9hcmQ6IFxuICAtIGBodHRwOi8vMTI3LjAuMC4xOjgwMDAvZGFzaGJvYXJkL2N1c3RvbWVyLWFuYWx5c2lzL2BcbiAgLSBgaHR0cDovLzEyNy4wLjAuMTo4MDAwL2N1c3RvbWVyLWFuYWx5c2lzL2BcblxuLSBBZCBQZXJmb3JtYW5jZSBEYXNoYm9hcmQ6IFxuICAtIGBodHRwOi8vMTI3LjAuMC4xOjgwMDAvZGFzaGJvYXJkL2FkLXBlcmZvcm1hbmNlL2BcbiAgLSBgaHR0cDovLzEyNy4wLjAuMTo4MDAwL2FkLXBlcmZvcm1hbmNlL2BcblxuSSd2ZSBjb25maWd1cmVkIGl0IHRoaXMgd2F5IHNvIGJvdGggVVJMIHN0cnVjdHVyZXMgd29yaywgZ2l2aW5nIHlvdSBmbGV4aWJpbGl0eSBpbiBob3cgeW91IGFjY2VzcyB0aGUgZGFzaGJvYXJkcy5cblxuVHJ5IGFjY2Vzc2luZyBgaHR0cDovLzEyNy4wLjAuMTo4MDAwL2Rhc2hib2FyZC9gIG5vdyAtIGl0IHNob3VsZCBsb2FkIHRoZSBkYXNoYm9hcmQgaG9tZSBwYWdlLiBMZXQgbWUga25vdyBpZiB5b3UgZW5jb3VudGVyIGFueSBvdGhlciBpc3N1ZXMhXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiIwNTllMmMyOC0xMGJiLTRlODgtYmY5NS1iMzJlZjBjZmVjNDMiLCJ1dWlkIjoiZjdmNjhlMTUtMzFmYS00M2MyLTlmZDctMjk0OTM0MzU4NzcxIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ1MTM1NjgxMzcyLCJ0b1RpbWVzdGFtcCI6MTc0NTEzNjAzNTc1NSwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiJiZmU2YjEzMC03ODQ2LTQ4OGEtYTM5YS1jYzdjM2ExY2U0ZWEiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjU5NTExMjY2LTJlZjEtNDNlZC1iNTU5LTE3MTY5OGUzNDVmMiIsInJlcXVlc3RfbWVzc2FnZSI6IkltcHJvdmUgdGhlIERpZ2l0YWzigJFNYXJrZXRpbmcgRGFzaGJvYXJkXG5cbk9iamVjdGl2ZVxuVXBncmFkZSB0aGUgZXhpc3RpbmcgRGlnaXRhbMKgRGF0YcKgQW5hbHlzaXMgZGFzaGJvYXJkIHNvIGl0IHRlbGxzIGEgZGVlcGVyLCBtb3JlIGFjdGlvbmFibGUgc3RvcnkgZm9yIG1hcmtldGVycyBhbmQgZXhlY3V0aXZlcy5cblxuVW5pZnkgJiBFbnJpY2ggTWV0cmljc1xuXG5BZGQgQ1BBLCBDVlIsIEFPViwgTFRWLCBibGVuZGVkIFJPQVMsIGFuZCBDdXN0b21lcuKAkUFjcXVpc2l0aW9uIENvc3QuXG5cbk5vcm1hbGlzZSBjaGFubmVsIG5hbWVzIGFuZCBjdXJyZW5jaWVzIHNvIGNyb3Nz4oCRcGxhdGZvcm0gdG90YWxzIGFyZSBhY2N1cmF0ZS5cblxuRHJpbGzigJFEb3duICYgSW50ZXJhY3Rpdml0eVxuXG5JbXBsZW1lbnQgZ2xvYmFsIGRhdGUsIGNoYW5uZWwsIGFuZCBjYW1wYWlnbiBmaWx0ZXJzIChtdWx0aeKAkXNlbGVjdCk7IGFsbG93IGNsaWNr4oCRdGhyb3VnaCBmcm9tIGhpZ2jigJFsZXZlbCBLUElzIHRvIGRldGFpbGVkIHRhYmxlcy5cblxuRW5hYmxlIHRvb2x0aXBzIHRoYXQgc3VyZmFjZSBzdGF0aXN0aWNhbCBzaWduaWZpY2FuY2Ugb3IgYW5vbWFsaWVzLlxuXG5BdHRyaWJ1dGlvbiAmIEpvdXJuZXkgSW5zaWdodHNcblxuSW5jbHVkZSBmaXJzdOKAkXRvdWNoIHZzLiBsYXN04oCRdG91Y2ggdnMuIE1hcmtvdiBvciBTaGFwbGV5IGF0dHJpYnV0aW9uIG1vZGVscyB1c2luZyBjdXN0b21lcl90b3VjaHBvaW50cy5jc3YuXG5cblZpc3VhbGlzZSB0b3AgY29udmVyc2lvbiBwYXRocyB3aXRoIGFuIGFsbHV2aWFsL1NhbmtleSBkaWFncmFtLlxuXG5TZWdtZW50YXRpb24gJiBDb2hvcnRzXG5cblByb3ZpZGUgY29ob3J0IGhlYXRtYXBzIChzaWdudXAgbW9udGggdnMuIHJlcGVhdOKAkXB1cmNoYXNlIHJhdGUpIGFuZCBzZWdtZW50IHRhYnMgZm9yIEhpZ2jigJFWYWx1ZSwgUmVndWxhciwgQXTigJFSaXNrLCBldGMuXG5cbk1ha2UgbG95YWx0eeKAkXRpZXIgYmFycyBkcmlsbGFibGUgdG8gaW5kaXZpZHVhbCBjdXN0b21lciBsaXN0cy5cblxuUHJlZGljdGl2ZSAmIFByZXNjcmlwdGl2ZSBMYXllcnNcblxuQWRkIGEgMzDigJFkYXkgZm9yZWNhc3QgZm9yIHNlc3Npb25zLCByZXZlbnVlLCBhbmQgY29udmVyc2lvbnMgKFByb3BoZXQgb3IgQVJJTUEpLlxuXG5HZW5lcmF0ZSBidWRnZXTigJFyZWFsbG9jYXRpb24gcmVjb21tZW5kYXRpb25zIGJhc2VkIG9uIG1hcmdpbmFsIFJPQVMuXG5cbkRlc2lnbiBFbmhhbmNlbWVudHNcblxuVXNlIGEgY29uc2lzdGVudCBjb2xvdXIgcGFsZXR0ZSBwZXIgY2hhbm5lbCwgcmVzcG9uc2l2ZSBncmlkIGxheW91dCwgYW5kIGRhcmvigJFtb2RlIHRvZ2dsZS5cblxuUGluIEtQSSBjYXJkcyBpbiBhIHN0aWNreSBoZWFkZXI7IHNob3cgJSDOlCB2cy4gcHJldmlvdXMgcGVyaW9kLlxuXG5Eb2N1bWVudGF0aW9uICYgUmVmcmVzaFxuXG5JbmNsdWRlIGEgUkVBRE1FIHRhYiBkZXRhaWxpbmcgZGF0YSBwaXBlbGluZSwgS1BJIGZvcm11bGFzLCByZWZyZXNoIHN0ZXBzLCBhbmQgY2F2ZWF0cy5cblxuUGFyYW1ldGVyaXNlIGRhdGEgcGF0aHMgc28gdGhlIGRhc2hib2FyZCByZWZyZXNoZXMgYXV0b21hdGljYWxseSB3aXRoIG5ldyBDU1YgZHJvcHMuXG5cbkRlbGl2ZXJhYmxlXG5VcGRhdGVkIG5vdGVib29rIChvciBQQklYL1N0cmVhbWxpdCBhcHApIHdpdGggdGhlIGFib3ZlIGZlYXR1cmVzLCBjbGVhbiBjb2RlLCBjb21tZW50cywgYW5kIGEgb25l4oCRcGFnZSBleGVjdXRpdmUgc3VtbWFyeSBvZiBuZXcgaW5zaWdodHMuIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkltcHJvdmUgdGhlIERpZ2l0YWzigJFNYXJrZXRpbmcgRGFzaGJvYXJkIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJPYmplY3RpdmUifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlVwZ3JhZGUgdGhlIGV4aXN0aW5nIERpZ2l0YWzCoERhdGHCoEFuYWx5c2lzIGRhc2hib2FyZCBzbyBpdCB0ZWxscyBhIGRlZXBlciwgbW9yZSBhY3Rpb25hYmxlIHN0b3J5IGZvciBtYXJrZXRlcnMgYW5kIGV4ZWN1dGl2ZXMuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJVbmlmeSAmIEVucmljaCBNZXRyaWNzIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJBZGQgQ1BBLCBDVlIsIEFPViwgTFRWLCBibGVuZGVkIFJPQVMsIGFuZCBDdXN0b21lcuKAkUFjcXVpc2l0aW9uIENvc3QuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJOb3JtYWxpc2UgY2hhbm5lbCBuYW1lcyBhbmQgY3VycmVuY2llcyBzbyBjcm9zc+KAkXBsYXRmb3JtIHRvdGFscyBhcmUgYWNjdXJhdGUuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJEcmlsbOKAkURvd24gJiBJbnRlcmFjdGl2aXR5In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJJbXBsZW1lbnQgZ2xvYmFsIGRhdGUsIGNoYW5uZWwsIGFuZCBjYW1wYWlnbiBmaWx0ZXJzIChtdWx0aeKAkXNlbGVjdCk7IGFsbG93IGNsaWNr4oCRdGhyb3VnaCBmcm9tIGhpZ2jigJFsZXZlbCBLUElzIHRvIGRldGFpbGVkIHRhYmxlcy4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkVuYWJsZSB0b29sdGlwcyB0aGF0IHN1cmZhY2Ugc3RhdGlzdGljYWwgc2lnbmlmaWNhbmNlIG9yIGFub21hbGllcy4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkF0dHJpYnV0aW9uICYgSm91cm5leSBJbnNpZ2h0cyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiSW5jbHVkZSBmaXJzdOKAkXRvdWNoIHZzLiBsYXN04oCRdG91Y2ggdnMuIE1hcmtvdiBvciBTaGFwbGV5IGF0dHJpYnV0aW9uIG1vZGVscyB1c2luZyBjdXN0b21lcl90b3VjaHBvaW50cy5jc3YuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJWaXN1YWxpc2UgdG9wIGNvbnZlcnNpb24gcGF0aHMgd2l0aCBhbiBhbGx1dmlhbC9TYW5rZXkgZGlhZ3JhbS4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlNlZ21lbnRhdGlvbiAmIENvaG9ydHMifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlByb3ZpZGUgY29ob3J0IGhlYXRtYXBzIChzaWdudXAgbW9udGggdnMuIHJlcGVhdOKAkXB1cmNoYXNlIHJhdGUpIGFuZCBzZWdtZW50IHRhYnMgZm9yIEhpZ2jigJFWYWx1ZSwgUmVndWxhciwgQXTigJFSaXNrLCBldGMuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJNYWtlIGxveWFsdHnigJF0aWVyIGJhcnMgZHJpbGxhYmxlIHRvIGluZGl2aWR1YWwgY3VzdG9tZXIgbGlzdHMuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJQcmVkaWN0aXZlICYgUHJlc2NyaXB0aXZlIExheWVycyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiQWRkIGEgMzDigJFkYXkgZm9yZWNhc3QgZm9yIHNlc3Npb25zLCByZXZlbnVlLCBhbmQgY29udmVyc2lvbnMgKFByb3BoZXQgb3IgQVJJTUEpLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiR2VuZXJhdGUgYnVkZ2V04oCRcmVhbGxvY2F0aW9uIHJlY29tbWVuZGF0aW9ucyBiYXNlZCBvbiBtYXJnaW5hbCBST0FTLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiRGVzaWduIEVuaGFuY2VtZW50cyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiVXNlIGEgY29uc2lzdGVudCBjb2xvdXIgcGFsZXR0ZSBwZXIgY2hhbm5lbCwgcmVzcG9uc2l2ZSBncmlkIGxheW91dCwgYW5kIGRhcmvigJFtb2RlIHRvZ2dsZS4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlBpbiBLUEkgY2FyZHMgaW4gYSBzdGlja3kgaGVhZGVyOyBzaG93ICUgzpQgdnMuIHByZXZpb3VzIHBlcmlvZC4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkRvY3VtZW50YXRpb24gJiBSZWZyZXNoIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJJbmNsdWRlIGEgUkVBRE1FIHRhYiBkZXRhaWxpbmcgZGF0YSBwaXBlbGluZSwgS1BJIGZvcm11bGFzLCByZWZyZXNoIHN0ZXBzLCBhbmQgY2F2ZWF0cy4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlBhcmFtZXRlcmlzZSBkYXRhIHBhdGhzIHNvIHRoZSBkYXNoYm9hcmQgcmVmcmVzaGVzIGF1dG9tYXRpY2FsbHkgd2l0aCBuZXcgQ1NWIGRyb3BzLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiRGVsaXZlcmFibGUifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlVwZGF0ZWQgbm90ZWJvb2sgKG9yIFBCSVgvU3RyZWFtbGl0IGFwcCkgd2l0aCB0aGUgYWJvdmUgZmVhdHVyZXMsIGNsZWFuIGNvZGUsIGNvbW1lbnRzLCBhbmQgYSBvbmXigJFwYWdlIGV4ZWN1dGl2ZSBzdW1tYXJ5IG9mIG5ldyBpbnNpZ2h0cy4ifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTMzWEJYTHBwZEJNamVUeVhWZmJOcW8iLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIkZpbmQgdGhlIGN1cnJlbnQgZGF0YV9hbmFseXNpcy5weSBmaWxlIGluIHRoZSBkYXRhX2Rhc2hib2FyZCBhcHAgdG8gdW5kZXJzdGFuZCB0aGUgZXhpc3RpbmcgZGF0YSBwcm9jZXNzaW5nIGFuZCB2aXN1YWxpemF0aW9uIGZ1bmN0aW9ucy5cIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiMgRW5oYW5jaW5nIHRoZSBEaWdpdGFsIE1hcmtldGluZyBEYXNoYm9hcmRcblxuSSdsbCBoZWxwIHlvdSB1cGdyYWRlIHlvdXIgRGlnaXRhbCBEYXRhIEFuYWx5c2lzIGRhc2hib2FyZCB3aXRoIG1vcmUgYWR2YW5jZWQgZmVhdHVyZXMsIGJldHRlciBpbnRlcmFjdGl2aXR5LCBhbmQgZGVlcGVyIG1hcmtldGluZyBpbnNpZ2h0cy4gTGV0IG1lIGNyZWF0ZSBhIGRldGFpbGVkIHBsYW4gZm9yIGltcGxlbWVudGluZyB0aGVzZSBpbXByb3ZlbWVudHMuXG5cbiMjIFBsYW4gZm9yIERhc2hib2FyZCBFbmhhbmNlbWVudFxuXG4jIyMgMS4gVW5pZnkgJiBFbnJpY2ggTWV0cmljc1xuLSBBZGQgY2FsY3VsYXRlZCBtZXRyaWNzIChDUEEsIENWUiwgQU9WLCBMVFYsIGJsZW5kZWQgUk9BUywgQ0FDKVxuLSBOb3JtYWxpemUgY2hhbm5lbCBuYW1lcyBhbmQgY3VycmVuY2llc1xuLSBDcmVhdGUgdW5pZmllZCBkYXRhIG1vZGVsc1xuXG4jIyMgMi4gSW1wbGVtZW50IERyaWxsLURvd24gJiBJbnRlcmFjdGl2aXR5XG4tIEFkZCBnbG9iYWwgZmlsdGVycyBmb3IgZGF0ZSwgY2hhbm5lbCwgYW5kIGNhbXBhaWduXG4tIENyZWF0ZSBjbGljay10aHJvdWdoIGZ1bmN0aW9uYWxpdHkgZnJvbSBLUElzIHRvIGRldGFpbGVkIHZpZXdzXG4tIEFkZCB0b29sdGlwcyB3aXRoIHN0YXRpc3RpY2FsIGluc2lnaHRzXG5cbiMjIyAzLiBBZGQgQXR0cmlidXRpb24gJiBKb3VybmV5IEluc2lnaHRzXG4tIEltcGxlbWVudCBhdHRyaWJ1dGlvbiBtb2RlbHMgKGZpcnN0LXRvdWNoLCBsYXN0LXRvdWNoLCBNYXJrb3YpXG4tIENyZWF0ZSBTYW5rZXkgZGlhZ3JhbSBmb3IgY29udmVyc2lvbiBwYXRoc1xuLSBBbmFseXplIGN1c3RvbWVyIGpvdXJuZXkgdG91Y2hwb2ludHNcblxuIyMjIDQuIEFkZCBTZWdtZW50YXRpb24gJiBDb2hvcnRzXG4tIENyZWF0ZSBjb2hvcnQgYW5hbHlzaXMgdmlld3Ncbi0gSW1wbGVtZW50IHNlZ21lbnQtYmFzZWQgZmlsdGVyaW5nXG4tIE1ha2UgbG95YWx0eSB0aWVycyBpbnRlcmFjdGl2ZVxuXG4jIyMgNS4gQWRkIFByZWRpY3RpdmUgJiBQcmVzY3JpcHRpdmUgRmVhdHVyZXNcbi0gSW1wbGVtZW50IGZvcmVjYXN0aW5nIGZvciBrZXkgbWV0cmljc1xuLSBBZGQgYnVkZ2V0IGFsbG9jYXRpb24gcmVjb21tZW5kYXRpb25zXG4tIEluY2x1ZGUgYW5vbWFseSBkZXRlY3Rpb25cblxuIyMjIDYuIEVuaGFuY2UgRGVzaWduXG4tIENyZWF0ZSBjb25zaXN0ZW50IGNvbG9yIHNjaGVtZVxuLSBJbXBsZW1lbnQgcmVzcG9uc2l2ZSBsYXlvdXRcbi0gQWRkIGRhcmsgbW9kZSB0b2dnbGVcbi0gQ3JlYXRlIHN0aWNreSBLUEkgaGVhZGVyIHdpdGggcGVyaW9kIGNvbXBhcmlzb25zXG5cbiMjIyA3LiBBZGQgRG9jdW1lbnRhdGlvbiAmIEF1dG9tYXRlIFJlZnJlc2hcbi0gQ3JlYXRlIFJFQURNRSBkb2N1bWVudGF0aW9uXG4tIFBhcmFtZXRlcml6ZSBkYXRhIHBhdGhzXG4tIFNldCB1cCBhdXRvbWF0aWMgcmVmcmVzaFxuXG5MZXQncyBzdGFydCBpbXBsZW1lbnRpbmcgdGhlc2UgZW5oYW5jZW1lbnRzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJJbXByb3ZlIHRoZSBEaWdpdGFs4oCRTWFya2V0aW5nIERhc2hib2FyZFxuXG5PYmplY3RpdmVcblVwZ3JhZGUgdGhlIGV4aXN0aW5nIERpZ2l0YWzCoERhdGHCoEFuYWx5c2lzIGRhc2hib2FyZCBzbyBpdCB0ZWxscyBhIGRlZXBlciwgbW9yZSBhY3Rpb25hYmxlIHN0b3J5IGZvciBtYXJrZXRlcnMgYW5kIGV4ZWN1dGl2ZXMuXG5cblVuaWZ5ICYgRW5yaWNoIE1ldHJpY3NcblxuQWRkIENQQSwgQ1ZSLCBBT1YsIExUViwgYmxlbmRlZCBST0FTLCBhbmQgQ3VzdG9tZXLigJFBY3F1aXNpdGlvbiBDb3N0LlxuXG5Ob3JtYWxpc2UgY2hhbm5lbCBuYW1lcyBhbmQgY3VycmVuY2llcyBzbyBjcm9zc+KAkXBsYXRmb3JtIHRvdGFscyBhcmUgYWNjdXJhdGUuXG5cbkRyaWxs4oCRRG93biAmIEludGVyYWN0aXZpdHlcblxuSW1wbGVtZW50IGdsb2JhbCBkYXRlLCBjaGFubmVsLCBhbmQgY2FtcGFpZ24gZmlsdGVycyAobXVsdGnigJFzZWxlY3QpOyBhbGxvdyBjbGlja+KAkXRocm91Z2ggZnJvbSBoaWdo4oCRbGV2ZWwgS1BJcyB0byBkZXRhaWxlZCB0YWJsZXMuXG5cbkVuYWJsZSB0b29sdGlwcyB0aGF0IHN1cmZhY2Ugc3RhdGlzdGljYWwgc2lnbmlmaWNhbmNlIG9yIGFub21hbGllcy5cblxuQXR0cmlidXRpb24gJiBKb3VybmV5IEluc2lnaHRzXG5cbkluY2x1ZGUgZmlyc3TigJF0b3VjaCB2cy4gbGFzdOKAkXRvdWNoIHZzLiBNYXJrb3Ygb3IgU2hhcGxleSBhdHRyaWJ1dGlvbiBtb2RlbHMgdXNpbmcgY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2LlxuXG5WaXN1YWxpc2UgdG9wIGNvbnZlcnNpb24gcGF0aHMgd2l0aCBhbiBhbGx1dmlhbC9TYW5rZXkgZGlhZ3JhbS5cblxuU2VnbWVudGF0aW9uICYgQ29ob3J0c1xuXG5Qcm92aWRlIGNvaG9ydCBoZWF0bWFwcyAoc2lnbnVwIG1vbnRoIHZzLiByZXBlYXTigJFwdXJjaGFzZSByYXRlKSBhbmQgc2VnbWVudCB0YWJzIGZvciBIaWdo4oCRVmFsdWUsIFJlZ3VsYXIsIEF04oCRUmlzaywgZXRjLlxuXG5NYWtlIGxveWFsdHnigJF0aWVyIGJhcnMgZHJpbGxhYmxlIHRvIGluZGl2aWR1YWwgY3VzdG9tZXIgbGlzdHMuXG5cblByZWRpY3RpdmUgJiBQcmVzY3JpcHRpdmUgTGF5ZXJzXG5cbkFkZCBhIDMw4oCRZGF5IGZvcmVjYXN0IGZvciBzZXNzaW9ucywgcmV2ZW51ZSwgYW5kIGNvbnZlcnNpb25zIChQcm9waGV0IG9yIEFSSU1BKS5cblxuR2VuZXJhdGUgYnVkZ2V04oCRcmVhbGxvY2F0aW9uIHJlY29tbWVuZGF0aW9ucyBiYXNlZCBvbiBtYXJnaW5hbCBST0FTLlxuXG5EZXNpZ24gRW5oYW5jZW1lbnRzXG5cblVzZSBhIGNvbnNpc3RlbnQgY29sb3VyIHBhbGV0dGUgcGVyIGNoYW5uZWwsIHJlc3BvbnNpdmUgZ3JpZCBsYXlvdXQsIGFuZCBkYXJr4oCRbW9kZSB0b2dnbGUuXG5cblBpbiBLUEkgY2FyZHMgaW4gYSBzdGlja3kgaGVhZGVyOyBzaG93ICUgzpQgdnMuIHByZXZpb3VzIHBlcmlvZC5cblxuRG9jdW1lbnRhdGlvbiAmIFJlZnJlc2hcblxuSW5jbHVkZSBhIFJFQURNRSB0YWIgZGV0YWlsaW5nIGRhdGEgcGlwZWxpbmUsIEtQSSBmb3JtdWxhcywgcmVmcmVzaCBzdGVwcywgYW5kIGNhdmVhdHMuXG5cblBhcmFtZXRlcmlzZSBkYXRhIHBhdGhzIHNvIHRoZSBkYXNoYm9hcmQgcmVmcmVzaGVzIGF1dG9tYXRpY2FsbHkgd2l0aCBuZXcgQ1NWIGRyb3BzLlxuXG5EZWxpdmVyYWJsZVxuVXBkYXRlZCBub3RlYm9vayAob3IgUEJJWC9TdHJlYW1saXQgYXBwKSB3aXRoIHRoZSBhYm92ZSBmZWF0dXJlcywgY2xlYW4gY29kZSwgY29tbWVudHMsIGFuZCBhIG9uZeKAkXBhZ2UgZXhlY3V0aXZlIHN1bW1hcnkgb2YgbmV3IGluc2lnaHRzLiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxMSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiIjIEVuaGFuY2luZyB0aGUgRGlnaXRhbCBNYXJrZXRpbmcgRGFzaGJvYXJkXG5cbkknbGwgaGVscCB5b3UgdXBncmFkZSB5b3VyIERpZ2l0YWwgRGF0YSBBbmFseXNpcyBkYXNoYm9hcmQgd2l0aCBtb3JlIGFkdmFuY2VkIGZlYXR1cmVzLCBiZXR0ZXIgaW50ZXJhY3Rpdml0eSwgYW5kIGRlZXBlciBtYXJrZXRpbmcgaW5zaWdodHMuIExldCBtZSBjcmVhdGUgYSBkZXRhaWxlZCBwbGFuIGZvciBpbXBsZW1lbnRpbmcgdGhlc2UgaW1wcm92ZW1lbnRzLlxuXG4jIyBQbGFuIGZvciBEYXNoYm9hcmQgRW5oYW5jZW1lbnRcblxuIyMjIDEuIFVuaWZ5ICYgRW5yaWNoIE1ldHJpY3Ncbi0gQWRkIGNhbGN1bGF0ZWQgbWV0cmljcyAoQ1BBLCBDVlIsIEFPViwgTFRWLCBibGVuZGVkIFJPQVMsIENBQylcbi0gTm9ybWFsaXplIGNoYW5uZWwgbmFtZXMgYW5kIGN1cnJlbmNpZXNcbi0gQ3JlYXRlIHVuaWZpZWQgZGF0YSBtb2RlbHNcblxuIyMjIDIuIEltcGxlbWVudCBEcmlsbC1Eb3duICYgSW50ZXJhY3Rpdml0eVxuLSBBZGQgZ2xvYmFsIGZpbHRlcnMgZm9yIGRhdGUsIGNoYW5uZWwsIGFuZCBjYW1wYWlnblxuLSBDcmVhdGUgY2xpY2stdGhyb3VnaCBmdW5jdGlvbmFsaXR5IGZyb20gS1BJcyB0byBkZXRhaWxlZCB2aWV3c1xuLSBBZGQgdG9vbHRpcHMgd2l0aCBzdGF0aXN0aWNhbCBpbnNpZ2h0c1xuXG4jIyMgMy4gQWRkIEF0dHJpYnV0aW9uICYgSm91cm5leSBJbnNpZ2h0c1xuLSBJbXBsZW1lbnQgYXR0cmlidXRpb24gbW9kZWxzIChmaXJzdC10b3VjaCwgbGFzdC10b3VjaCwgTWFya292KVxuLSBDcmVhdGUgU2Fua2V5IGRpYWdyYW0gZm9yIGNvbnZlcnNpb24gcGF0aHNcbi0gQW5hbHl6ZSBjdXN0b21lciBqb3VybmV5IHRvdWNocG9pbnRzXG5cbiMjIyA0LiBBZGQgU2VnbWVudGF0aW9uICYgQ29ob3J0c1xuLSBDcmVhdGUgY29ob3J0IGFuYWx5c2lzIHZpZXdzXG4tIEltcGxlbWVudCBzZWdtZW50LWJhc2VkIGZpbHRlcmluZ1xuLSBNYWtlIGxveWFsdHkgdGllcnMgaW50ZXJhY3RpdmVcblxuIyMjIDUuIEFkZCBQcmVkaWN0aXZlICYgUHJlc2NyaXB0aXZlIEZlYXR1cmVzXG4tIEltcGxlbWVudCBmb3JlY2FzdGluZyBmb3Iga2V5IG1ldHJpY3Ncbi0gQWRkIGJ1ZGdldCBhbGxvY2F0aW9uIHJlY29tbWVuZGF0aW9uc1xuLSBJbmNsdWRlIGFub21hbHkgZGV0ZWN0aW9uXG5cbiMjIyA2LiBFbmhhbmNlIERlc2lnblxuLSBDcmVhdGUgY29uc2lzdGVudCBjb2xvciBzY2hlbWVcbi0gSW1wbGVtZW50IHJlc3BvbnNpdmUgbGF5b3V0XG4tIEFkZCBkYXJrIG1vZGUgdG9nZ2xlXG4tIENyZWF0ZSBzdGlja3kgS1BJIGhlYWRlciB3aXRoIHBlcmlvZCBjb21wYXJpc29uc1xuXG4jIyMgNy4gQWRkIERvY3VtZW50YXRpb24gJiBBdXRvbWF0ZSBSZWZyZXNoXG4tIENyZWF0ZSBSRUFETUUgZG9jdW1lbnRhdGlvblxuLSBQYXJhbWV0ZXJpemUgZGF0YSBwYXRoc1xuLSBTZXQgdXAgYXV0b21hdGljIHJlZnJlc2hcblxuTGV0J3Mgc3RhcnQgaW1wbGVtZW50aW5nIHRoZXNlIGVuaGFuY2VtZW50czpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJjNTc2NTFjYS1kODA3LTQ0ZDktYmNhNi1lNWFkYjJhZDdlYzIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFSNW45SlF2VWJTdHhkcFpBQmZmNVlLIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTaG93IG1lIGEgc2FtcGxlIG9mIHRoZSBjdXN0b21lcl90b3VjaHBvaW50cy5jc3YgZGF0YSB0byB1bmRlcnN0YW5kIGl0cyBzdHJ1Y3R1cmUgZm9yIGltcGxlbWVudGluZyBhdHRyaWJ1dGlvbiBtb2RlbHMuXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQncyBhbHNvIGNoZWNrIHRoZSBjdXN0b21lciB0b3VjaHBvaW50cyBkYXRhIHRvIHVuZGVyc3RhbmQgdGhlIHN0cnVjdHVyZSBmb3IgaW1wbGVtZW50aW5nIGF0dHJpYnV0aW9uIG1vZGVsczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhX2FuYWx5c2lzLnB5XG4uLi5cbiAgICBcbiAgICAjIEdvb2dsZSBBZHMgZGF0YVxuICAgIGdvb2dsZV9hZHMgPSBwZC5yZWFkX2NzdignZGF0YS9nb29nbGVfYWRzX2RhdGEuY3N2JylcbiAgICBnb29nbGVfYWRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZShnb29nbGVfYWRzWydkYXRlJ10pXG4gICAgXG4gICAgIyBDdXN0b21lciB0b3VjaHBvaW50c1xuICAgIHRvdWNocG9pbnRzID0gcGQucmVhZF9jc3YoJ2RhdGEvY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2JylcbiAgICB0b3VjaHBvaW50c1snZGF0ZSddID0gcGQudG9fZGF0ZXRpbWUodG91Y2hwb2ludHNbJ2RhdGUnXSlcbiAgICBcbiAgICAjIEdvb2dsZSBTZWFyY2ggQ29uc29sZSBkYXRhXG4gICAgc2VhcmNoX2NvbnNvbGUgPSBwZC5yZWFkX2NzdignZGF0YS9nb29nbGVfc2VhcmNoX2NvbnNvbGVfZGF0YS5jc3YnKVxuICAgIHNlYXJjaF9jb25zb2xlWydkYXRlJ10gPSBwZC50b19kYXRldGltZShzZWFyY2hfY29uc29sZVsnZGF0ZSddKVxuICAgIFxuICAgIHByaW50KFwiQWxsIGRhdGFzZXRzIGxvYWRlZCBzdWNjZXNzZnVsbHkhXCIpXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ2dhX2RhdGEnOiBnYV9kYXRhLFxuICAgICAgICAnY3VzdG9tZXJfZGF0YSc6IGN1c3RvbWVyX2RhdGEsXG4gICAgICAgICdmYl9hZHMnOiBmYl9hZHMsXG4gICAgICAgICdpZ19hZHMnOiBpZ19hZHMsXG4gICAgICAgICdnb29nbGVfYWRzJzogZ29vZ2xlX2FkcyxcbiAgICAgICAgJ3RvdWNocG9pbnRzJzogdG91Y2hwb2ludHMsXG4gICAgICAgICdzZWFyY2hfY29uc29sZSc6IHNlYXJjaF9jb25zb2xlXG4gICAgfVxuXG5kZWYgYW5hbHl6ZV9nb29nbGVfYW5hbHl0aWNzKGdhX2RhdGEpOlxuICAgIFwiXCJcIkFuYWx5emUgR29vZ2xlIEFuYWx5dGljcyBkYXRhXCJcIlwiXG4gICAgcHJpbnQoXCJcXG49PT0gR29vZ2xlIEFuYWx5dGljcyBBbmFseXNpcyA9PT1cIilcbiAgICBcbiAgICAjIEJhc2ljIHN0YXRpc3RpY3NcbiAgICBwcmludChcIlxcbkJhc2ljIFN0YXRpc3RpY3M6XCIpXG4gICAgcHJpbnQoZlwiVG90YWwgc2Vzc2lvbnM6IHtnYV9kYXRhWydzZXNzaW9ucyddLnN1bSgpfVwiKVxuICAgIHByaW50KGZcIlRvdGFsIG5ldyB1c2Vyczoge2dhX2RhdGFbJ25ld191c2VycyddLnN1bSgpfVwiKVxuICAgIHByaW50KGZcIlRvdGFsIHRyYW5zYWN0aW9uczoge2dhX2RhdGFbJ3RyYW5zYWN0aW9ucyddLnN1bSgpfVwiKVxuICAgIHByaW50KGZcIlRvdGFsIHJldmVudWU6ICR7Z2FfZGF0YVsncmV2ZW51ZSddLnN1bSgpOi4yZn1cIilcbiAgICBwcmludChmXCJBdmVyYWdlIGNvbnZlcnNpb24gcmF0ZToge2dhX2RhdGFbJ2NvbnZlcnNpb25fcmF0ZSddLm1lYW4oKTouMiV9XCIpXG4gICAgXG4gICAgIyBTZXNzaW9ucyBieSBzb3VyY2VcbiAgICBzZXNzaW9uc19ieV9zb3VyY2UgPSBnYV9kYXRhLmdyb3VwYnkoJ3NvdXJjZScpWydzZXNzaW9ucyddLnN1bSgpLnJlc2V0X2luZGV4KClcbiAgICBzZXNzaW9uc19ieV9zb3VyY2UgPSBzZXNzaW9uc19ieV9zb3VyY2Uuc29ydF92YWx1ZXMoJ3Nlc3Npb25zJywgYXNjZW5kaW5nPUZhbHNlKVxuLi4uXG4gICAgXG4gICAgZmlnLnVwZGF0ZV95YXhlcyh0aXRsZV90ZXh0PVwiU2Vzc2lvbnNcIiwgc2Vjb25kYXJ5X3k9RmFsc2UpXG4gICAgZmlnLnVwZGF0ZV95YXhlcyh0aXRsZV90ZXh0PVwiVHJhbnNhY3Rpb25zXCIsIHNlY29uZGFyeV95PVRydWUpXG4gICAgXG4gICAgZmlnLndyaXRlX2h0bWwoJ3Nlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lLmh0bWwnKVxuICAgIHByaW50KFwiU2Vzc2lvbnMgYW5kIHRyYW5zYWN0aW9ucyBvdmVyIHRpbWUgY2hhcnQgc2F2ZWQgYXMgJ3Nlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lLmh0bWwnXCIpXG4gICAgXG4gICAgIyBEZXZpY2UgY2F0ZWdvcnkgYW5hbHlzaXNcbiAgICBkZXZpY2VfbWV0cmljcyA9IGdhX2RhdGEuZ3JvdXBieSgnZGV2aWNlX2NhdGVnb3J5JykuYWdnKHtcbiAgICAgICAgJ3Nlc3Npb25zJzogJ3N1bScsXG4gICAgICAgICd0cmFuc2FjdGlvbnMnOiAnc3VtJyxcbiAgICAgICAgJ2NvbnZlcnNpb25fcmF0ZSc6ICdtZWFuJ1xuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBcbiAgICAjIENyZWF0ZSBhIHBpZSBjaGFydCBvZiBzZXNzaW9ucyBieSBkZXZpY2VcbiAgICBmaWcgPSBweC5waWUoXG4gICAgICAgIGRldmljZV9tZXRyaWNzLCBcbiAgICAgICAgdmFsdWVzPSdzZXNzaW9ucycsIFxuICAgICAgICBuYW1lcz0nZGV2aWNlX2NhdGVnb3J5JyxcbiAgICAgICAgdGl0bGU9J1Nlc3Npb25zIGJ5IERldmljZSBDYXRlZ29yeScsXG4gICAgICAgIGNvbG9yX2Rpc2NyZXRlX3NlcXVlbmNlPXB4LmNvbG9ycy5zZXF1ZW50aWFsLlBsYXNtYVxuICAgIClcbiAgICBmaWcud3JpdGVfaHRtbCgnc2Vzc2lvbnNfYnlfZGV2aWNlLmh0bWwnKVxuICAgIHByaW50KFwiU2Vzc2lvbnMgYnkgZGV2aWNlIGNoYXJ0IHNhdmVkIGFzICdzZXNzaW9uc19ieV9kZXZpY2UuaHRtbCdcIilcbiAgICBcbiAgICByZXR1cm4gZGV2aWNlX21ldHJpY3NcblxuZGVmIGFuYWx5emVfY3VzdG9tZXJfZGF0YShjdXN0b21lcl9kYXRhKTpcbiAgICBcIlwiXCJBbmFseXplIGN1c3RvbWVyIGRhdGFcIlwiXCJcbiAgICBwcmludChcIlxcbj09PSBDdXN0b21lciBEYXRhIEFuYWx5c2lzID09PVwiKVxuICAgIFxuICAgICMgQmFzaWMgc3RhdGlzdGljc1xuICAgIHByaW50KFwiXFxuQ3VzdG9tZXIgRGVtb2dyYXBoaWNzOlwiKVxuICAgIHByaW50KGZcIlRvdGFsIGN1c3RvbWVyczoge2xlbihjdXN0b21lcl9kYXRhKX1cIilcbiAgICBwcmludChmXCJHZW5kZXIgZGlzdHJpYnV0aW9uOiB7Y3VzdG9tZXJfZGF0YVsnZ2VuZGVyJ10udmFsdWVfY291bnRzKG5vcm1hbGl6ZT1UcnVlKS50b19kaWN0KCl9XCIpXG4gICAgcHJpbnQoZlwiQXZlcmFnZSBhZ2U6IHtjdXN0b21lcl9kYXRhWydhZ2UnXS5tZWFuKCk6LjFmfSB5ZWFyc1wiKVxuICAgIHByaW50KGZcIkF2ZXJhZ2UgdG90YWwgc3BlbmQ6ICR7Y3VzdG9tZXJfZGF0YVsndG90YWxfc3BlbmQnXS5tZWFuKCk6LjJmfVwiKVxuICAgIFxuICAgICMgQ3VzdG9tZXIgc2VnbWVudHNcbiAgICBzZWdtZW50X2NvdW50cyA9IGN1c3RvbWVyX2RhdGFbJ2N1c3RvbWVyX3NlZ21lbnQnXS52YWx1ZV9jb3VudHMoKVxuLi4uXG4gICAgZmlnLndyaXRlX2h0bWwoJ2FnZV9kaXN0cmlidXRpb24uaHRtbCcpXG4gICAgcHJpbnQoXCJBZ2UgZGlzdHJpYnV0aW9uIGNoYXJ0IHNhdmVkIGFzICdhZ2VfZGlzdHJpYnV0aW9uLmh0bWwnXCIpXG4gICAgXG4gICAgIyBMb3lhbHR5IHRpZXIgYW5hbHlzaXNcbiAgICBsb3lhbHR5X3NwZW5kID0gY3VzdG9tZXJfZGF0YS5ncm91cGJ5KCdsb3lhbHR5X3RpZXInKS5hZ2coe1xuICAgICAgICAndG90YWxfc3BlbmQnOiAnbWVhbicsXG4gICAgICAgICd0b3RhbF9vcmRlcnMnOiAnbWVhbidcbiAgICB9KS5yZXNldF9pbmRleCgpXG4gICAgXG4gICAgIyBDcmVhdGUgYSBncm91cGVkIGJhciBjaGFydCBvZiBsb3lhbHR5IHRpZXJzXG4gICAgZmlnID0gcHguYmFyKFxuICAgICAgICBsb3lhbHR5X3NwZW5kLCBcbiAgICAgICAgeD0nbG95YWx0eV90aWVyJywgXG4gICAgICAgIHk9Wyd0b3RhbF9zcGVuZCcsICd0b3RhbF9vcmRlcnMnXSxcbiAgICAgICAgYmFybW9kZT0nZ3JvdXAnLFxuICAgICAgICB0aXRsZT0nQXZlcmFnZSBTcGVuZCBhbmQgT3JkZXJzIGJ5IExveWFsdHkgVGllcicsXG4gICAgICAgIGxhYmVscz17XG4gICAgICAgICAgICAnbG95YWx0eV90aWVyJzogJ0xveWFsdHkgVGllcicsIFxuICAgICAgICAgICAgJ3ZhbHVlJzogJ1ZhbHVlJyxcbiAgICAgICAgICAgICd2YXJpYWJsZSc6ICdNZXRyaWMnXG4gICAgICAgIH1cbiAgICApXG4gICAgZmlnLndyaXRlX2h0bWwoJ2xveWFsdHlfdGllcl9hbmFseXNpcy5odG1sJylcbiAgICBwcmludChcIkxveWFsdHkgdGllciBhbmFseXNpcyBjaGFydCBzYXZlZCBhcyAnbG95YWx0eV90aWVyX2FuYWx5c2lzLmh0bWwnXCIpXG4gICAgXG4gICAgcmV0dXJuIGxveWFsdHlfc3BlbmRcblxuZGVmIGFuYWx5emVfYWRfcGVyZm9ybWFuY2UoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpOlxuICAgIFwiXCJcIkFuYWx5emUgYWQgcGVyZm9ybWFuY2UgYWNyb3NzIHBsYXRmb3Jtc1wiXCJcIlxuICAgIHByaW50KFwiXFxuPT09IEFkIFBlcmZvcm1hbmNlIEFuYWx5c2lzID09PVwiKVxuICAgIFxuICAgICMgQ29tYmluZSBhZCBkYXRhXG4gICAgZmJfYWRzX3N1bW1hcnkgPSBmYl9hZHMuZ3JvdXBieSgnZGF0ZScpLmFnZyh7XG4gICAgICAgICdpbXByZXNzaW9ucyc6ICdzdW0nLFxuICAgICAgICAnY2xpY2tzJzogJ3N1bScsXG4gICAgICAgICdzcGVuZCc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbnMnOiAnc3VtJyxcbiAgICAgICAgJ2NvbnZlcnNpb25fdmFsdWUnOiAnc3VtJ1xuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBmYl9hZHNfc3VtbWFyeVsncGxhdGZvcm0nXSA9ICdGYWNlYm9vaydcbiAgICBcbiAgICBpZ19hZHNfc3VtbWFyeSA9IGlnX2Fkcy5ncm91cGJ5KCdkYXRlJykuYWdnKHtcbiAgICAgICAgJ2ltcHJlc3Npb25zJzogJ3N1bScsXG4gICAgICAgICdjbGlja3MnOiAnc3VtJyxcbiAgICAgICAgJ3NwZW5kJzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbl92YWx1ZSc6ICdzdW0nXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIGlnX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0luc3RhZ3JhbSdcbi4uLlxuICAgIFxuICAgICMgQ2FsY3VsYXRlIG1ldHJpY3NcbiAgICBhbGxfYWRzWydjdHInXSA9IGFsbF9hZHNbJ2NsaWNrcyddIC8gYWxsX2Fkc1snaW1wcmVzc2lvbnMnXVxuICAgIGFsbF9hZHNbJ2NwYyddID0gYWxsX2Fkc1snc3BlbmQnXSAvIGFsbF9hZHNbJ2NsaWNrcyddXG4gICAgYWxsX2Fkc1sncm9hcyddID0gYWxsX2Fkc1snY29udmVyc2lvbl92YWx1ZSddIC8gYWxsX2Fkc1snc3BlbmQnXVxuICAgIFxuICAgICMgUGxhdGZvcm0gcGVyZm9ybWFuY2UgY29tcGFyaXNvblxuICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlID0gYWxsX2Fkcy5ncm91cGJ5KCdwbGF0Zm9ybScpLmFnZyh7XG4gICAgICAgICdpbXByZXNzaW9ucyc6ICdzdW0nLFxuICAgICAgICAnY2xpY2tzJzogJ3N1bScsXG4gICAgICAgICdzcGVuZCc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbnMnOiAnc3VtJyxcbiAgICAgICAgJ2NvbnZlcnNpb25fdmFsdWUnOiAnc3VtJyxcbiAgICAgICAgJ2N0cic6ICdtZWFuJyxcbiAgICAgICAgJ2NwYyc6ICdtZWFuJyxcbiAgICAgICAgJ3JvYXMnOiAnbWVhbidcbiAgICB9KS5yZXNldF9pbmRleCgpXG4gICAgXG4gICAgcHJpbnQoXCJcXG5QbGF0Zm9ybSBQZXJmb3JtYW5jZTpcIilcbiAgICBwcmludChwbGF0Zm9ybV9wZXJmb3JtYW5jZVtbJ3BsYXRmb3JtJywgJ2ltcHJlc3Npb25zJywgJ2NsaWNrcycsICdjb252ZXJzaW9ucycsICdzcGVuZCcsICdjb252ZXJzaW9uX3ZhbHVlJ11dKVxuICAgIFxuICAgICMgQ3JlYXRlIGEgYmFyIGNoYXJ0IGNvbXBhcmluZyBwbGF0Zm9ybXNcbiAgICBmaWcgPSBweC5iYXIoXG4gICAgICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlLCBcbiAgICAgICAgeD0ncGxhdGZvcm0nLCBcbiAgICAgICAgeT0nY29udmVyc2lvbnMnLFxuICAgICAgICBjb2xvcj0ncGxhdGZvcm0nLFxuICAgICAgICB0aXRsZT0nQ29udmVyc2lvbnMgYnkgUGxhdGZvcm0nLFxuICAgICAgICBsYWJlbHM9eydwbGF0Zm9ybSc6ICdQbGF0Zm9ybScsICdjb252ZXJzaW9ucyc6ICdUb3RhbCBDb252ZXJzaW9ucyd9XG4gICAgKVxuICAgIGZpZy53cml0ZV9odG1sKCdwbGF0Zm9ybV9jb252ZXJzaW9ucy5odG1sJylcbiAgICBwcmludChcIlxcblBsYXRmb3JtIGNvbnZlcnNpb25zIGNoYXJ0IHNhdmVkIGFzICdwbGF0Zm9ybV9jb252ZXJzaW9ucy5odG1sJ1wiKVxuICAgIFxuICAgICMgUk9BUyBjb21wYXJpc29uXG4gICAgZmlnID0gcHguYmFyKFxuICAgICAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSwgXG4gICAgICAgIHg9J3BsYXRmb3JtJywgXG4gICAgICAgIHk9J3JvYXMnLFxuICAgICAgICBjb2xvcj0ncGxhdGZvcm0nLFxuICAgICAgICB0aXRsZT0nUmV0dXJuIG9uIEFkIFNwZW5kIChST0FTKSBieSBQbGF0Zm9ybScsXG4gICAgICAgIGxhYmVscz17J3BsYXRmb3JtJzogJ1BsYXRmb3JtJywgJ3JvYXMnOiAnUk9BUyd9XG4gICAgKVxuICAgIGZpZy53cml0ZV9odG1sKCdwbGF0Zm9ybV9yb2FzLmh0bWwnKVxuICAgIHByaW50KFwiUGxhdGZvcm0gUk9BUyBjaGFydCBzYXZlZCBhcyAncGxhdGZvcm1fcm9hcy5odG1sJ1wiKVxuICAgIFxuICAgICMgRGFpbHkgcGVyZm9ybWFuY2Ugb3ZlciB0aW1lXG4gICAgZmlnID0gcHgubGluZShcbiAgICAgICAgYWxsX2FkcywgXG4gICAgICAgIHg9J2RhdGUnLCBcbiAgICAgICAgeT0nY29udmVyc2lvbnMnLFxuICAgICAgICBjb2xvcj0ncGxhdGZvcm0nLFxuICAgICAgICB0aXRsZT0nRGFpbHkgQ29udmVyc2lvbnMgYnkgUGxhdGZvcm0nLFxuICAgICAgICBsYWJlbHM9eydkYXRlJzogJ0RhdGUnLCAnY29udmVyc2lvbnMnOiAnQ29udmVyc2lvbnMnLCAncGxhdGZvcm0nOiAnUGxhdGZvcm0nfVxuICAgIClcbiAgICBmaWcud3JpdGVfaHRtbCgnZGFpbHlfY29udmVyc2lvbnMuaHRtbCcpXG4gICAgcHJpbnQoXCJEYWlseSBjb252ZXJzaW9ucyBjaGFydCBzYXZlZCBhcyAnZGFpbHlfY29udmVyc2lvbnMuaHRtbCdcIilcbiAgICBcbiAgICByZXR1cm4gcGxhdGZvcm1fcGVyZm9ybWFuY2VcblxuZGVmIG1haW4oKTpcbiAgICBcIlwiXCJNYWluIGZ1bmN0aW9uIHRvIHJ1biB0aGUgYW5hbHlzaXNcIlwiXCJcbiAgICBwcmludChcIlN0YXJ0aW5nIGRhdGEgYW5hbHlzaXMuLi5cIilcbiAgICBcbiAgICAjIExvYWQgYWxsIGRhdGFzZXRzXG4gICAgZGF0YXNldHMgPSBsb2FkX2RhdGEoKVxuICAgIFxuICAgICMgQW5hbHl6ZSBHb29nbGUgQW5hbHl0aWNzIGRhdGFcbiAgICBkZXZpY2VfbWV0cmljcyA9IGFuYWx5emVfZ29vZ2xlX2FuYWx5dGljcyhkYXRhc2V0c1snZ2FfZGF0YSddKVxuICAgIFxuICAgICMgQW5hbHl6ZSBjdXN0b21lciBkYXRhXG4gICAgbG95YWx0eV9tZXRyaWNzID0gYW5hbHl6ZV9jdXN0b21lcl9kYXRhKGRhdGFzZXRzWydjdXN0b21lcl9kYXRhJ10pXG4gICAgXG4gICAgIyBBbmFseXplIGFkIHBlcmZvcm1hbmNlXG4gICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UgPSBhbmFseXplX2FkX3BlcmZvcm1hbmNlKFxuICAgICAgICBkYXRhc2V0c1snZmJfYWRzJ10sIFxuICAgICAgICBkYXRhc2V0c1snaWdfYWRzJ10sIFxuICAgICAgICBkYXRhc2V0c1snZ29vZ2xlX2FkcyddXG4gICAgKVxuICAgIFxuICAgIHByaW50KFwiXFxuQW5hbHlzaXMgY29tcGxldGUhIEhUTUwgdmlzdWFsaXphdGlvbnMgaGF2ZSBiZWVuIHNhdmVkIHRvIHRoZSBjdXJyZW50IGRpcmVjdG9yeS5cIilcbiAgICBwcmludChcIllvdSBjYW4gb3BlbiB0aGVzZSBIVE1MIGZpbGVzIGluIHlvdXIgd2ViIGJyb3dzZXIgdG8gdmlldyB0aGUgaW50ZXJhY3RpdmUgY2hhcnRzLlwiKVxuXG5pZiBfX25hbWVfXyA9PSBcIl9fbWFpbl9fXCI6XG4gICAgbWFpbigpXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhX2Rhc2hib2FyZC9kYXRhX2FuYWx5c2lzLnB5XG5pbXBvcnQgcGFuZGFzIGFzIHBkXG5pbXBvcnQgbnVtcHkgYXMgbnBcbmltcG9ydCBwbG90bHkuZXhwcmVzcyBhcyBweFxuaW1wb3J0IHBsb3RseS5ncmFwaF9vYmplY3RzIGFzIGdvXG5mcm9tIHBsb3RseS5zdWJwbG90cyBpbXBvcnQgbWFrZV9zdWJwbG90c1xuaW1wb3J0IGRhdGV0aW1lIGFzIGR0XG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZSwgdGltZWRlbHRhXG5pbXBvcnQgd2FybmluZ3NcbmltcG9ydCBqc29uXG5cbiMgU3VwcHJlc3Mgd2FybmluZ3Ncbndhcm5pbmdzLmZpbHRlcndhcm5pbmdzKCdpZ25vcmUnKVxuXG4jIExvYWQgZGF0YXNldHNcbmRlZiBsb2FkX2RhdGEoKTpcbiAgICBcIlwiXCJMb2FkIGFsbCBkYXRhc2V0cyBmcm9tIHRoZSBkYXRhIGRpcmVjdG9yeVwiXCJcIlxuICAgIFxuICAgICMgR29vZ2xlIEFuYWx5dGljcyBkYXRhXG4gICAgZ2FfZGF0YSA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9hbmFseXRpY3NfZGF0YS5jc3YnKVxuICAgIGdhX2RhdGFbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGdhX2RhdGFbJ2RhdGUnXSlcbiAgICBcbiAgICAjIEN1c3RvbWVyIGRhdGFcbiAgICBjdXN0b21lcl9kYXRhID0gcGQucmVhZF9jc3YoJ2RhdGEvY3VzdG9tZXJfZGF0YS5jc3YnKVxuICAgIGN1c3RvbWVyX2RhdGFbJ3NpZ251cF9kYXRlJ10gPSBwZC50b19kYXRldGltZShjdXN0b21lcl9kYXRhWydzaWdudXBfZGF0ZSddKVxuICAgIGN1c3RvbWVyX2RhdGFbJ2xhc3RfcHVyY2hhc2VfZGF0ZSddID0gcGQudG9fZGF0ZXRpbWUoY3VzdG9tZXJfZGF0YVsnbGFzdF9wdXJjaGFzZV9kYXRlJ10pXG4gICAgXG4gICAgIyBTb2NpYWwgbWVkaWEgYWRzIGRhdGFcbiAgICBmYl9hZHMgPSBwZC5yZWFkX2NzdignZGF0YS9mYWNlYm9va19hZHNfZGF0YS5jc3YnKVxuICAgIGZiX2Fkc1snZGF0ZSddID0gcGQudG9fZGF0ZXRpbWUoZmJfYWRzWydkYXRlJ10pXG4gICAgXG4gICAgaWdfYWRzID0gcGQucmVhZF9jc3YoJ2RhdGEvaW5zdGFncmFtX2Fkc19kYXRhLmNzdicpXG4gICAgaWdfYWRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZShpZ19hZHNbJ2RhdGUnXSlcbiAgICBcbiAgICAjIEdvb2dsZSBBZHMgZGF0YVxuICAgIGdvb2dsZV9hZHMgPSBwZC5yZWFkX2NzdignZGF0YS9nb29nbGVfYWRzX2RhdGEuY3N2JylcbiAgICBnb29nbGVfYWRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZShnb29nbGVfYWRzWydkYXRlJ10pXG4gICAgXG4gICAgIyBDdXN0b21lciB0b3VjaHBvaW50c1xuICAgIHRvdWNocG9pbnRzID0gcGQucmVhZF9jc3YoJ2RhdGEvY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2JylcbiAgICB0b3VjaHBvaW50c1snZGF0ZSddID0gcGQudG9fZGF0ZXRpbWUodG91Y2hwb2ludHNbJ2RhdGUnXSlcbiAgICBcbiAgICAjIEdvb2dsZSBTZWFyY2ggQ29uc29sZSBkYXRhXG4gICAgc2VhcmNoX2NvbnNvbGUgPSBwZC5yZWFkX2NzdignZGF0YS9nb29nbGVfc2VhcmNoX2NvbnNvbGVfZGF0YS5jc3YnKVxuICAgIHNlYXJjaF9jb25zb2xlWydkYXRlJ10gPSBwZC50b19kYXRldGltZShzZWFyY2hfY29uc29sZVsnZGF0ZSddKVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgICdnYV9kYXRhJzogZ2FfZGF0YSxcbiAgICAgICAgJ2N1c3RvbWVyX2RhdGEnOiBjdXN0b21lcl9kYXRhLFxuICAgICAgICAnZmJfYWRzJzogZmJfYWRzLFxuICAgICAgICAnaWdfYWRzJzogaWdfYWRzLFxuICAgICAgICAnZ29vZ2xlX2Fkcyc6IGdvb2dsZV9hZHMsXG4gICAgICAgICd0b3VjaHBvaW50cyc6IHRvdWNocG9pbnRzLFxuICAgICAgICAnc2VhcmNoX2NvbnNvbGUnOiBzZWFyY2hfY29uc29sZVxuICAgIH1cblxuZGVmIGdldF9nb29nbGVfYW5hbHl0aWNzX3N0YXRzKGdhX2RhdGEpOlxuICAgIFwiXCJcIkdldCBiYXNpYyBHb29nbGUgQW5hbHl0aWNzIHN0YXRpc3RpY3NcIlwiXCJcbiAgICBzdGF0cyA9IHtcbiAgICAgICAgJ3RvdGFsX3Nlc3Npb25zJzogZ2FfZGF0YVsnc2Vzc2lvbnMnXS5zdW0oKSxcbiAgICAgICAgJ3RvdGFsX25ld191c2Vycyc6IGdhX2RhdGFbJ25ld191c2VycyddLnN1bSgpLFxuICAgICAgICAndG90YWxfdHJhbnNhY3Rpb25zJzogZ2FfZGF0YVsndHJhbnNhY3Rpb25zJ10uc3VtKCksXG4gICAgICAgICd0b3RhbF9yZXZlbnVlJzogZ2FfZGF0YVsncmV2ZW51ZSddLnN1bSgpLFxuICAgICAgICAnYXZnX2NvbnZlcnNpb25fcmF0ZSc6IGdhX2RhdGFbJ2NvbnZlcnNpb25fcmF0ZSddLm1lYW4oKSAqIDEwMCwgICMgYXMgcGVyY2VudGFnZVxuICAgIH1cbiAgICByZXR1cm4gc3RhdHNcblxuZGVmIGdldF9zZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQoZ2FfZGF0YSk6XG4gICAgXCJcIlwiQ3JlYXRlIGEgYmFyIGNoYXJ0IG9mIHNlc3Npb25zIGJ5IHNvdXJjZVwiXCJcIlxuICAgIHNlc3Npb25zX2J5X3NvdXJjZSA9IGdhX2RhdGEuZ3JvdXBieSgnc291cmNlJylbJ3Nlc3Npb25zJ10uc3VtKCkucmVzZXRfaW5kZXgoKVxuICAgIHNlc3Npb25zX2J5X3NvdXJjZSA9IHNlc3Npb25zX2J5X3NvdXJjZS5zb3J0X3ZhbHVlcygnc2Vzc2lvbnMnLCBhc2NlbmRpbmc9RmFsc2UpXG4gICAgXG4gICAgZmlnID0gcHguYmFyKFxuICAgICAgICBzZXNzaW9uc19ieV9zb3VyY2UsIFxuICAgICAgICB4PSdzb3VyY2UnLCBcbiAgICAgICAgeT0nc2Vzc2lvbnMnLFxuICAgICAgICB0aXRsZT0nU2Vzc2lvbnMgYnkgU291cmNlJyxcbiAgICAgICAgbGFiZWxzPXsnc291cmNlJzogJ1NvdXJjZScsICdzZXNzaW9ucyc6ICdUb3RhbCBTZXNzaW9ucyd9LFxuICAgICAgICBjb2xvcj0nc2Vzc2lvbnMnLFxuICAgICAgICBjb2xvcl9jb250aW51b3VzX3NjYWxlPSdWaXJpZGlzJ1xuICAgIClcbiAgICBcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxuXG5kZWYgZ2V0X3Nlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lX2NoYXJ0KGdhX2RhdGEpOlxuICAgIFwiXCJcIkNyZWF0ZSBhIGxpbmUgY2hhcnQgb2Ygc2Vzc2lvbnMgYW5kIHRyYW5zYWN0aW9ucyBvdmVyIHRpbWVcIlwiXCJcbiAgICBkYWlseV9tZXRyaWNzID0gZ2FfZGF0YS5ncm91cGJ5KCdkYXRlJykuYWdnKHtcbiAgICAgICAgJ3Nlc3Npb25zJzogJ3N1bScsXG4gICAgICAgICd0cmFuc2FjdGlvbnMnOiAnc3VtJyxcbiAgICAgICAgJ3JldmVudWUnOiAnc3VtJ1xuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBcbiAgICBmaWcgPSBtYWtlX3N1YnBsb3RzKHNwZWNzPVtbe1wic2Vjb25kYXJ5X3lcIjogVHJ1ZX1dXSlcbiAgICBcbiAgICBmaWcuYWRkX3RyYWNlKFxuICAgICAgICBnby5TY2F0dGVyKFxuICAgICAgICAgICAgeD1kYWlseV9tZXRyaWNzWydkYXRlJ10sIFxuICAgICAgICAgICAgeT1kYWlseV9tZXRyaWNzWydzZXNzaW9ucyddLFxuICAgICAgICAgICAgbmFtZT0nU2Vzc2lvbnMnLFxuICAgICAgICAgICAgbGluZT1kaWN0KGNvbG9yPSdibHVlJylcbiAgICAgICAgKSxcbiAgICAgICAgc2Vjb25kYXJ5X3k9RmFsc2VcbiAgICApXG4gICAgXG4gICAgZmlnLmFkZF90cmFjZShcbiAgICAgICAgZ28uU2NhdHRlcihcbiAgICAgICAgICAgIHg9ZGFpbHlfbWV0cmljc1snZGF0ZSddLCBcbiAgICAgICAgICAgIHk9ZGFpbHlfbWV0cmljc1sndHJhbnNhY3Rpb25zJ10sXG4gICAgICAgICAgICBuYW1lPSdUcmFuc2FjdGlvbnMnLFxuICAgICAgICAgICAgbGluZT1kaWN0KGNvbG9yPSdncmVlbicpXG4gICAgICAgICksXG4gICAgICAgIHNlY29uZGFyeV95PVRydWVcbiAgICApXG4gICAgXG4gICAgZmlnLnVwZGF0ZV9sYXlvdXQoXG4gICAgICAgIHRpdGxlPSdTZXNzaW9ucyBhbmQgVHJhbnNhY3Rpb25zIE92ZXIgVGltZScsXG4gICAgICAgIHhheGlzX3RpdGxlPSdEYXRlJyxcbiAgICAgICAgbGVnZW5kPWRpY3QoeD0wLjAxLCB5PTAuOTksIGJnY29sb3I9J3JnYmEoMjU1LCAyNTUsIDI1NSwgMC44KScpXG4gICAgKVxuICAgIFxuICAgIGZpZy51cGRhdGVfeWF4ZXModGl0bGVfdGV4dD1cIlNlc3Npb25zXCIsIHNlY29uZGFyeV95PUZhbHNlKVxuICAgIGZpZy51cGRhdGVfeWF4ZXModGl0bGVfdGV4dD1cIlRyYW5zYWN0aW9uc1wiLCBzZWNvbmRhcnlfeT1UcnVlKVxuICAgIFxuICAgIHJldHVybiBmaWcudG9faHRtbChmdWxsX2h0bWw9RmFsc2UsIGluY2x1ZGVfcGxvdGx5anM9J2NkbicpXG5cbmRlZiBnZXRfc2Vzc2lvbnNfYnlfZGV2aWNlX2NoYXJ0KGdhX2RhdGEpOlxuICAgIFwiXCJcIkNyZWF0ZSBhIHBpZSBjaGFydCBvZiBzZXNzaW9ucyBieSBkZXZpY2VcIlwiXCJcbiAgICBkZXZpY2VfbWV0cmljcyA9IGdhX2RhdGEuZ3JvdXBieSgnZGV2aWNlX2NhdGVnb3J5JykuYWdnKHtcbiAgICAgICAgJ3Nlc3Npb25zJzogJ3N1bScsXG4gICAgICAgICd0cmFuc2FjdGlvbnMnOiAnc3VtJyxcbiAgICAgICAgJ2NvbnZlcnNpb25fcmF0ZSc6ICdtZWFuJ1xuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBcbiAgICBmaWcgPSBweC5waWUoXG4gICAgICAgIGRldmljZV9tZXRyaWNzLCBcbiAgICAgICAgdmFsdWVzPSdzZXNzaW9ucycsIFxuICAgICAgICBuYW1lcz0nZGV2aWNlX2NhdGVnb3J5JyxcbiAgICAgICAgdGl0bGU9J1Nlc3Npb25zIGJ5IERldmljZSBDYXRlZ29yeScsXG4gICAgICAgIGNvbG9yX2Rpc2NyZXRlX3NlcXVlbmNlPXB4LmNvbG9ycy5zZXF1ZW50aWFsLlBsYXNtYVxuICAgIClcbiAgICBcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxuXG5kZWYgZ2V0X2N1c3RvbWVyX2RlbW9ncmFwaGljcyhjdXN0b21lcl9kYXRhKTpcbiAgICBcIlwiXCJHZXQgY3VzdG9tZXIgZGVtb2dyYXBoaWMgaW5mb3JtYXRpb25cIlwiXCJcbiAgICBkZW1vZ3JhcGhpY3MgPSB7XG4gICAgICAgICd0b3RhbF9jdXN0b21lcnMnOiBsZW4oY3VzdG9tZXJfZGF0YSksXG4gICAgICAgICdnZW5kZXJfZGlzdHJpYnV0aW9uJzogY3VzdG9tZXJfZGF0YVsnZ2VuZGVyJ10udmFsdWVfY291bnRzKG5vcm1hbGl6ZT1UcnVlKS50b19kaWN0KCksXG4gICAgICAgICdhdmdfYWdlJzogY3VzdG9tZXJfZGF0YVsnYWdlJ10ubWVhbigpLFxuICAgICAgICAnYXZnX3RvdGFsX3NwZW5kJzogY3VzdG9tZXJfZGF0YVsndG90YWxfc3BlbmQnXS5tZWFuKCksXG4gICAgfVxuICAgIHJldHVybiBkZW1vZ3JhcGhpY3NcblxuZGVmIGdldF9jdXN0b21lcl9zZWdtZW50c19jaGFydChjdXN0b21lcl9kYXRhKTpcbiAgICBcIlwiXCJDcmVhdGUgYSBiYXIgY2hhcnQgb2YgY3VzdG9tZXIgc2VnbWVudHNcIlwiXCJcbiAgICBzZWdtZW50X2NvdW50cyA9IGN1c3RvbWVyX2RhdGFbJ2N1c3RvbWVyX3NlZ21lbnQnXS52YWx1ZV9jb3VudHMoKVxuICAgIFxuICAgIGZpZyA9IHB4LmJhcihcbiAgICAgICAgeD1zZWdtZW50X2NvdW50cy5pbmRleCwgXG4gICAgICAgIHk9c2VnbWVudF9jb3VudHMudmFsdWVzLFxuICAgICAgICB0aXRsZT0nQ3VzdG9tZXIgU2VnbWVudHMnLFxuICAgICAgICBsYWJlbHM9eyd4JzogJ1NlZ21lbnQnLCAneSc6ICdOdW1iZXIgb2YgQ3VzdG9tZXJzJ30sXG4gICAgICAgIGNvbG9yPXNlZ21lbnRfY291bnRzLnZhbHVlcyxcbiAgICAgICAgY29sb3JfY29udGludW91c19zY2FsZT0nVmlyaWRpcydcbiAgICApXG4gICAgXG4gICAgcmV0dXJuIGZpZy50b19odG1sKGZ1bGxfaHRtbD1GYWxzZSwgaW5jbHVkZV9wbG90bHlqcz0nY2RuJylcblxuZGVmIGdldF9hZ2VfZGlzdHJpYnV0aW9uX2NoYXJ0KGN1c3RvbWVyX2RhdGEpOlxuICAgIFwiXCJcIkNyZWF0ZSBhIGhpc3RvZ3JhbSBvZiBjdXN0b21lciBhZ2VzXCJcIlwiXG4gICAgZmlnID0gcHguaGlzdG9ncmFtKFxuICAgICAgICBjdXN0b21lcl9kYXRhLCBcbiAgICAgICAgeD0nYWdlJyxcbiAgICAgICAgbmJpbnM9MjAsXG4gICAgICAgIHRpdGxlPSdDdXN0b21lciBBZ2UgRGlzdHJpYnV0aW9uJyxcbiAgICAgICAgbGFiZWxzPXsnYWdlJzogJ0FnZScsICdjb3VudCc6ICdOdW1iZXIgb2YgQ3VzdG9tZXJzJ30sXG4gICAgICAgIGNvbG9yX2Rpc2NyZXRlX3NlcXVlbmNlPVsncHVycGxlJ11cbiAgICApXG4gICAgXG4gICAgcmV0dXJuIGZpZy50b19odG1sKGZ1bGxfaHRtbD1GYWxzZSwgaW5jbHVkZV9wbG90bHlqcz0nY2RuJylcblxuZGVmIGdldF9sb3lhbHR5X3RpZXJfY2hhcnQoY3VzdG9tZXJfZGF0YSk6XG4gICAgXCJcIlwiQ3JlYXRlIGEgZ3JvdXBlZCBiYXIgY2hhcnQgb2YgbG95YWx0eSB0aWVyc1wiXCJcIlxuICAgIGxveWFsdHlfc3BlbmQgPSBjdXN0b21lcl9kYXRhLmdyb3VwYnkoJ2xveWFsdHlfdGllcicpLmFnZyh7XG4gICAgICAgICd0b3RhbF9zcGVuZCc6ICdtZWFuJyxcbiAgICAgICAgJ3RvdGFsX29yZGVycyc6ICdtZWFuJ1xuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBcbiAgICBmaWcgPSBweC5iYXIoXG4gICAgICAgIGxveWFsdHlfc3BlbmQsIFxuICAgICAgICB4PSdsb3lhbHR5X3RpZXInLCBcbiAgICAgICAgeT1bJ3RvdGFsX3NwZW5kJywgJ3RvdGFsX29yZGVycyddLFxuICAgICAgICBiYXJtb2RlPSdncm91cCcsXG4gICAgICAgIHRpdGxlPSdBdmVyYWdlIFNwZW5kIGFuZCBPcmRlcnMgYnkgTG95YWx0eSBUaWVyJyxcbiAgICAgICAgbGFiZWxzPXtcbiAgICAgICAgICAgICdsb3lhbHR5X3RpZXInOiAnTG95YWx0eSBUaWVyJywgXG4gICAgICAgICAgICAndmFsdWUnOiAnVmFsdWUnLFxuICAgICAgICAgICAgJ3ZhcmlhYmxlJzogJ01ldHJpYydcbiAgICAgICAgfVxuICAgIClcbiAgICBcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxuXG5kZWYgZ2V0X3BsYXRmb3JtX3BlcmZvcm1hbmNlKGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKTpcbiAgICBcIlwiXCJHZXQgYWQgcGVyZm9ybWFuY2UgbWV0cmljcyBhY3Jvc3MgcGxhdGZvcm1zXCJcIlwiXG4gICAgIyBDb21iaW5lIGFkIGRhdGFcbiAgICBmYl9hZHNfc3VtbWFyeSA9IGZiX2Fkcy5ncm91cGJ5KCdkYXRlJykuYWdnKHtcbiAgICAgICAgJ2ltcHJlc3Npb25zJzogJ3N1bScsXG4gICAgICAgICdjbGlja3MnOiAnc3VtJyxcbiAgICAgICAgJ3NwZW5kJzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbl92YWx1ZSc6ICdzdW0nXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIGZiX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0ZhY2Vib29rJ1xuICAgIFxuICAgIGlnX2Fkc19zdW1tYXJ5ID0gaWdfYWRzLmdyb3VwYnkoJ2RhdGUnKS5hZ2coe1xuICAgICAgICAnaW1wcmVzc2lvbnMnOiAnc3VtJyxcbiAgICAgICAgJ2NsaWNrcyc6ICdzdW0nLFxuICAgICAgICAnc3BlbmQnOiAnc3VtJyxcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9uX3ZhbHVlJzogJ3N1bSdcbiAgICB9KS5yZXNldF9pbmRleCgpXG4gICAgaWdfYWRzX3N1bW1hcnlbJ3BsYXRmb3JtJ10gPSAnSW5zdGFncmFtJ1xuICAgIFxuICAgIGdvb2dsZV9hZHNfc3VtbWFyeSA9IGdvb2dsZV9hZHMuZ3JvdXBieSgnZGF0ZScpLmFnZyh7XG4gICAgICAgICdpbXByZXNzaW9ucyc6ICdzdW0nLFxuICAgICAgICAnY2xpY2tzJzogJ3N1bScsXG4gICAgICAgICdjb3N0JzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbl92YWx1ZSc6ICdzdW0nXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIGdvb2dsZV9hZHNfc3VtbWFyeSA9IGdvb2dsZV9hZHNfc3VtbWFyeS5yZW5hbWUoY29sdW1ucz17J2Nvc3QnOiAnc3BlbmQnfSlcbiAgICBnb29nbGVfYWRzX3N1bW1hcnlbJ3BsYXRmb3JtJ10gPSAnR29vZ2xlIEFkcydcbiAgICBcbiAgICAjIENvbWJpbmUgYWxsIHBsYXRmb3Jtc1xuICAgIGFsbF9hZHMgPSBwZC5jb25jYXQoW1xuICAgICAgICBmYl9hZHNfc3VtbWFyeSwgXG4gICAgICAgIGlnX2Fkc19zdW1tYXJ5LCBcbiAgICAgICAgZ29vZ2xlX2Fkc19zdW1tYXJ5XG4gICAgXSwgaWdub3JlX2luZGV4PVRydWUpXG4gICAgXG4gICAgIyBDYWxjdWxhdGUgbWV0cmljc1xuICAgIGFsbF9hZHNbJ2N0ciddID0gYWxsX2Fkc1snY2xpY2tzJ10gLyBhbGxfYWRzWydpbXByZXNzaW9ucyddXG4gICAgYWxsX2Fkc1snY3BjJ10gPSBhbGxfYWRzWydzcGVuZCddIC8gYWxsX2Fkc1snY2xpY2tzJ11cbiAgICBhbGxfYWRzWydyb2FzJ10gPSBhbGxfYWRzWydjb252ZXJzaW9uX3ZhbHVlJ10gLyBhbGxfYWRzWydzcGVuZCddXG4gICAgXG4gICAgIyBQbGF0Zm9ybSBwZXJmb3JtYW5jZSBjb21wYXJpc29uXG4gICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UgPSBhbGxfYWRzLmdyb3VwYnkoJ3BsYXRmb3JtJykuYWdnKHtcbiAgICAgICAgJ2ltcHJlc3Npb25zJzogJ3N1bScsXG4gICAgICAgICdjbGlja3MnOiAnc3VtJyxcbiAgICAgICAgJ3NwZW5kJzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbl92YWx1ZSc6ICdzdW0nLFxuICAgICAgICAnY3RyJzogJ21lYW4nLFxuICAgICAgICAnY3BjJzogJ21lYW4nLFxuICAgICAgICAncm9hcyc6ICdtZWFuJ1xuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBcbiAgICByZXR1cm4gcGxhdGZvcm1fcGVyZm9ybWFuY2VcblxuZGVmIGdldF9wbGF0Zm9ybV9jb252ZXJzaW9uc19jaGFydChmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2Fkcyk6XG4gICAgXCJcIlwiQ3JlYXRlIGEgYmFyIGNoYXJ0IGNvbXBhcmluZyBwbGF0Zm9ybSBjb252ZXJzaW9uc1wiXCJcIlxuICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlID0gZ2V0X3BsYXRmb3JtX3BlcmZvcm1hbmNlKGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKVxuICAgIFxuICAgIGZpZyA9IHB4LmJhcihcbiAgICAgICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UsIFxuICAgICAgICB4PSdwbGF0Zm9ybScsIFxuICAgICAgICB5PSdjb252ZXJzaW9ucycsXG4gICAgICAgIGNvbG9yPSdwbGF0Zm9ybScsXG4gICAgICAgIHRpdGxlPSdDb252ZXJzaW9ucyBieSBQbGF0Zm9ybScsXG4gICAgICAgIGxhYmVscz17J3BsYXRmb3JtJzogJ1BsYXRmb3JtJywgJ2NvbnZlcnNpb25zJzogJ1RvdGFsIENvbnZlcnNpb25zJ31cbiAgICApXG4gICAgXG4gICAgcmV0dXJuIGZpZy50b19odG1sKGZ1bGxfaHRtbD1GYWxzZSwgaW5jbHVkZV9wbG90bHlqcz0nY2RuJylcblxuZGVmIGdldF9wbGF0Zm9ybV9yb2FzX2NoYXJ0KGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKTpcbiAgICBcIlwiXCJDcmVhdGUgYSBiYXIgY2hhcnQgY29tcGFyaW5nIHBsYXRmb3JtIFJPQVNcIlwiXCJcbiAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSA9IGdldF9wbGF0Zm9ybV9wZXJmb3JtYW5jZShmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2FkcylcbiAgICBcbiAgICBmaWcgPSBweC5iYXIoXG4gICAgICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlLCBcbiAgICAgICAgeD0ncGxhdGZvcm0nLCBcbiAgICAgICAgeT0ncm9hcycsXG4gICAgICAgIGNvbG9yPSdwbGF0Zm9ybScsXG4gICAgICAgIHRpdGxlPSdSZXR1cm4gb24gQWQgU3BlbmQgKFJPQVMpIGJ5IFBsYXRmb3JtJyxcbiAgICAgICAgbGFiZWxzPXsncGxhdGZvcm0nOiAnUGxhdGZvcm0nLCAncm9hcyc6ICdST0FTJ31cbiAgICApXG4gICAgXG4gICAgcmV0dXJuIGZpZy50b19odG1sKGZ1bGxfaHRtbD1GYWxzZSwgaW5jbHVkZV9wbG90bHlqcz0nY2RuJylcblxuZGVmIGdldF9kYWlseV9jb252ZXJzaW9uc19jaGFydChmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2Fkcyk6XG4gICAgXCJcIlwiQ3JlYXRlIGEgbGluZSBjaGFydCBvZiBkYWlseSBjb252ZXJzaW9ucyBieSBwbGF0Zm9ybVwiXCJcIlxuICAgICMgQ29tYmluZSBhZCBkYXRhXG4gICAgZmJfYWRzX3N1bW1hcnkgPSBmYl9hZHMuZ3JvdXBieSgnZGF0ZScpLmFnZyh7XG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBmYl9hZHNfc3VtbWFyeVsncGxhdGZvcm0nXSA9ICdGYWNlYm9vaydcbiAgICBcbiAgICBpZ19hZHNfc3VtbWFyeSA9IGlnX2Fkcy5ncm91cGJ5KCdkYXRlJykuYWdnKHtcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIGlnX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0luc3RhZ3JhbSdcbiAgICBcbiAgICBnb29nbGVfYWRzX3N1bW1hcnkgPSBnb29nbGVfYWRzLmdyb3VwYnkoJ2RhdGUnKS5hZ2coe1xuICAgICAgICAnY29udmVyc2lvbnMnOiAnc3VtJyxcbiAgICB9KS5yZXNldF9pbmRleCgpXG4gICAgZ29vZ2xlX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0dvb2dsZSBBZHMnXG4gICAgXG4gICAgIyBDb21iaW5lIGFsbCBwbGF0Zm9ybXNcbiAgICBhbGxfYWRzID0gcGQuY29uY2F0KFtcbiAgICAgICAgZmJfYWRzX3N1bW1hcnksIFxuICAgICAgICBpZ19hZHNfc3VtbWFyeSwgXG4gICAgICAgIGdvb2dsZV9hZHNfc3VtbWFyeVxuICAgIF0sIGlnbm9yZV9pbmRleD1UcnVlKVxuICAgIFxuICAgIGZpZyA9IHB4LmxpbmUoXG4gICAgICAgIGFsbF9hZHMsIFxuICAgICAgICB4PSdkYXRlJywgXG4gICAgICAgIHk9J2NvbnZlcnNpb25zJyxcbiAgICAgICAgY29sb3I9J3BsYXRmb3JtJyxcbiAgICAgICAgdGl0bGU9J0RhaWx5IENvbnZlcnNpb25zIGJ5IFBsYXRmb3JtJyxcbiAgICAgICAgbGFiZWxzPXsnZGF0ZSc6ICdEYXRlJywgJ2NvbnZlcnNpb25zJzogJ0NvbnZlcnNpb25zJywgJ3BsYXRmb3JtJzogJ1BsYXRmb3JtJ31cbiAgICApXG4gICAgXG4gICAgcmV0dXJuIGZpZy50b19odG1sKGZ1bGxfaHRtbD1GYWxzZSwgaW5jbHVkZV9wbG90bHlqcz0nY2RuJylcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGFfZGFzaGJvYXJkL3ZpZXdzLnB5XG4uLi5cblxuZGVmIGdvb2dsZV9hbmFseXRpY3MocmVxdWVzdCk6XG4gICAgXCJcIlwiR29vZ2xlIEFuYWx5dGljcyBkYXNoYm9hcmQgdmlld1wiXCJcIlxuICAgICMgTG9hZCBkYXRhXG4gICAgZGF0YXNldHMgPSBkYXRhX2FuYWx5c2lzLmxvYWRfZGF0YSgpXG4gICAgZ2FfZGF0YSA9IGRhdGFzZXRzWydnYV9kYXRhJ11cblxuICAgICMgR2V0IHN0YXRpc3RpY3MgYW5kIGNoYXJ0c1xuICAgIHN0YXRzID0gZGF0YV9hbmFseXNpcy5nZXRfZ29vZ2xlX2FuYWx5dGljc19zdGF0cyhnYV9kYXRhKVxuICAgIHNlc3Npb25zX2J5X3NvdXJjZV9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3Nlc3Npb25zX2J5X3NvdXJjZV9jaGFydChnYV9kYXRhKVxuICAgIHNlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lX2NoYXJ0ID0gZGF0YV9hbmFseXNpcy5nZXRfc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWVfY2hhcnQoZ2FfZGF0YSlcbiAgICBzZXNzaW9uc19ieV9kZXZpY2VfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9zZXNzaW9uc19ieV9kZXZpY2VfY2hhcnQoZ2FfZGF0YSlcblxuICAgIGNvbnRleHQgPSB7XG4gICAgICAgICdzdGF0cyc6IHN0YXRzLFxuICAgICAgICAnc2Vzc2lvbnNfYnlfc291cmNlX2NoYXJ0Jzogc2Vzc2lvbnNfYnlfc291cmNlX2NoYXJ0LFxuICAgICAgICAnc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWVfY2hhcnQnOiBzZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZV9jaGFydCxcbiAgICAgICAgJ3Nlc3Npb25zX2J5X2RldmljZV9jaGFydCc6IHNlc3Npb25zX2J5X2RldmljZV9jaGFydCxcbiAgICB9XG4uLi5cblxuZGVmIGN1c3RvbWVyX2FuYWx5c2lzKHJlcXVlc3QpOlxuICAgIFwiXCJcIkN1c3RvbWVyIGFuYWx5c2lzIGRhc2hib2FyZCB2aWV3XCJcIlwiXG4gICAgIyBMb2FkIGRhdGFcbiAgICBkYXRhc2V0cyA9IGRhdGFfYW5hbHlzaXMubG9hZF9kYXRhKClcbiAgICBjdXN0b21lcl9kYXRhID0gZGF0YXNldHNbJ2N1c3RvbWVyX2RhdGEnXVxuXG4gICAgIyBHZXQgc3RhdGlzdGljcyBhbmQgY2hhcnRzXG4gICAgZGVtb2dyYXBoaWNzID0gZGF0YV9hbmFseXNpcy5nZXRfY3VzdG9tZXJfZGVtb2dyYXBoaWNzKGN1c3RvbWVyX2RhdGEpXG4gICAgY3VzdG9tZXJfc2VnbWVudHNfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9jdXN0b21lcl9zZWdtZW50c19jaGFydChjdXN0b21lcl9kYXRhKVxuICAgIGFnZV9kaXN0cmlidXRpb25fY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9hZ2VfZGlzdHJpYnV0aW9uX2NoYXJ0KGN1c3RvbWVyX2RhdGEpXG4gICAgbG95YWx0eV90aWVyX2NoYXJ0ID0gZGF0YV9hbmFseXNpcy5nZXRfbG95YWx0eV90aWVyX2NoYXJ0KGN1c3RvbWVyX2RhdGEpXG5cbiAgICBjb250ZXh0ID0ge1xuICAgICAgICAnZGVtb2dyYXBoaWNzJzogZGVtb2dyYXBoaWNzLFxuICAgICAgICAnY3VzdG9tZXJfc2VnbWVudHNfY2hhcnQnOiBjdXN0b21lcl9zZWdtZW50c19jaGFydCxcbiAgICAgICAgJ2FnZV9kaXN0cmlidXRpb25fY2hhcnQnOiBhZ2VfZGlzdHJpYnV0aW9uX2NoYXJ0LFxuICAgICAgICAnbG95YWx0eV90aWVyX2NoYXJ0JzogbG95YWx0eV90aWVyX2NoYXJ0LFxuICAgIH1cblxuICAgIHJldHVybiByZW5kZXIocmVxdWVzdCwgJ2RhdGFfZGFzaGJvYXJkL2N1c3RvbWVyX2FuYWx5c2lzLmh0bWwnLCBjb250ZXh0KVxuXG5kZWYgYWRfcGVyZm9ybWFuY2UocmVxdWVzdCk6XG4gICAgXCJcIlwiQWQgcGVyZm9ybWFuY2UgZGFzaGJvYXJkIHZpZXdcIlwiXCJcbiAgICAjIExvYWQgZGF0YVxuICAgIGRhdGFzZXRzID0gZGF0YV9hbmFseXNpcy5sb2FkX2RhdGEoKVxuICAgIGZiX2FkcyA9IGRhdGFzZXRzWydmYl9hZHMnXVxuICAgIGlnX2FkcyA9IGRhdGFzZXRzWydpZ19hZHMnXVxuICAgIGdvb2dsZV9hZHMgPSBkYXRhc2V0c1snZ29vZ2xlX2FkcyddXG5cbiAgICAjIEdldCBzdGF0aXN0aWNzIGFuZCBjaGFydHNcbiAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSA9IGRhdGFfYW5hbHlzaXMuZ2V0X3BsYXRmb3JtX3BlcmZvcm1hbmNlKGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKVxuICAgIHBsYXRmb3JtX2NvbnZlcnNpb25zX2NoYXJ0ID0gZGF0YV9hbmFseXNpcy5nZXRfcGxhdGZvcm1fY29udmVyc2lvbnNfY2hhcnQoZmJfYWRzLCBpZ19hZHMsIGdvLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxMzNYQlhMcHBkQk1qZVR5WFZmYk5xbyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxMSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiJMZXQncyBhbHNvIGNoZWNrIHRoZSBjdXN0b21lciB0b3VjaHBvaW50cyBkYXRhIHRvIHVuZGVyc3RhbmQgdGhlIHN0cnVjdHVyZSBmb3IgaW1wbGVtZW50aW5nIGF0dHJpYnV0aW9uIG1vZGVsczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJiZTI2MjdkZS1mNTUxLTRmNzUtYWU1YS1iYWQ2OWEzMWQzNGMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0J3Mgc3RhcnQgaW1wbGVtZW50aW5nIHRoZSBlbmhhbmNlZCBkYXNoYm9hcmQuIEZpcnN0LCBsZXQncyBjcmVhdGUgYW4gZW5oYW5jZWQgZGF0YSBhbmFseXNpcyBtb2R1bGUgd2l0aCB0aGUgbmV3IGZlYXR1cmVzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2XG50b3VjaHBvaW50X2lkLGN1c3RvbWVyX2lkLGRhdGUsY2hhbm5lbCxzb3VyY2UsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxpbnRlcmFjdGlvbl90eXBlLGNvbnZlcnNpb24sY29udmVyc2lvbl92YWx1ZSxwcm9kdWN0X2NhdGVnb3J5LHByb2R1Y3RfaWQscHJvZHVjdF9uYW1lXG4xMDAwMSwxMDAxLDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsYWRfY2xpY2ssRkFMU0UsMC4wMCxNZW4ncyBTaGlydHMsTlVMTCxOVUxMXG4xMDAwMiwxMDAxLDIwMjQtMDEtMDEsT3JnYW5pYyBTZWFyY2gsR29vZ2xlLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwMDMsMTAwMSwyMDI0LTAxLTAyLEVtYWlsLE5ld3NsZXR0ZXIsTlVMTCxXZWVrbHlfRGVhbHMsZW1haWxfb3BlbixGQUxTRSwwLjAwLE5VTEwsTlVMTCxOVUxMXG4xMDAwNCwxMDAxLDIwMjQtMDEtMDIsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQixhZF9jbGljayxUUlVFLDgwLjAwLE1lbidzIFNoaXJ0cywyMDAxLFN1bW1lciBMaW5lbiBTaGlydFxuMTAwMDUsMTAwMiwyMDI0LTAxLTAxLFBhaWQgU29jaWFsLEluc3RhZ3JhbSwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAwNiwxMDAyLDIwMjQtMDEtMDEsUGFpZCBTb2NpYWwsSW5zdGFncmFtLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsYWRfY2xpY2ssRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAwNywxMDAyLDIwMjQtMDEtMDIsT3JnYW5pYyBTZWFyY2gsR29vZ2xlLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsV29tZW4ncyBEcmVzc2VzLE5VTEwsTlVMTFxuMTAwMDgsMTAwMiwyMDI0LTAxLTAzLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LGFkX2NsaWNrLFRSVUUsNzAuMDAsV29tZW4ncyBEcmVzc2VzLDEwMDEsRmxvcmFsIFN1bW1lciBEcmVzc1xuMTAwMDksMTAwMywyMDI0LTAxLTAxLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMixXaW50ZXJfU2FsZV8yMDI0LGFkX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgT3V0ZXJ3ZWFyLE5VTEwsTlVMTFxuMTAwMTAsMTAwMywyMDI0LTAxLTAxLE9yZ2FuaWMgU29jaWFsLEZhY2Vib29rLE5VTEwsTlVMTCxwYWdlX3Zpc2l0LEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDExLDEwMDMsMjAyNC0wMS0wMSxQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAyLFdpbnRlcl9TYWxlX0ZCLGFkX2NsaWNrLFRSVUUsODAuMDAsTWVuJ3MgT3V0ZXJ3ZWFyLDMwMDEsV2ludGVyIENvYXQgQ2xhc3NpY1xuMTAwMTIsMTAwNCwyMDI0LTAxLTAyLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxGQUxTRSwwLjAwLFdvbWVuJ3MgQWNjZXNzb3JpZXMsTlVMTCxOVUxMXG4xMDAxMywxMDA0LDIwMjQtMDEtMDMsRW1haWwsTmV3c2xldHRlcixOVUxMLE5ld19BcnJpdmFscyxlbWFpbF9jbGljayxGQUxTRSwwLjAwLFdvbWVuJ3MgQWNjZXNzb3JpZXMsTlVMTCxOVUxMXG4xMDAxNCwxMDA0LDIwMjQtMDEtMDQsUGFpZCBTb2NpYWwsSW5zdGFncmFtLDMwMDQsU3ByaW5nX1ByZXZpZXdfSUcsYWRfY2xpY2ssVFJVRSw0NS4wMCxXb21lbidzIEFjY2Vzc29yaWVzLDQwMDEsU3ByaW5nIFNjYXJmIFNldFxuMTAwMTUsMTAwNSwyMDI0LTAxLTAxLERpcmVjdCxOVUxMLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDE2LDEwMDUsMjAyNC0wMS0wMSxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxNZW4ncyBTaGlydHMsTlVMTCxOVUxMXG4xMDAxNywxMDA1LDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAzLEV2ZXJ5ZGF5X0Vzc2VudGlhbHMsYWRfY2xpY2ssRkFMU0UsMC4wMCxNZW4ncyBTaGlydHMsTlVMTCxOVUxMXG4xMDAxOCwxMDA2LDIwMjQtMDEtMDEsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQixhZF9pbXByZXNzaW9uLEZBTFNFLDAuMDAsV29tZW4ncyBEcmVzc2VzLE5VTEwsTlVMTFxuMTAwMTksMTAwNiwyMDI0LTAxLTAxLFBhaWQgU29jaWFsLEZhY2Vib29rLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsYWRfY2xpY2ssRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAyMCwxMDA2LDIwMjQtMDEtMDIsRW1haWwsTmV3c2xldHRlcixOVUxMLEZlYXR1cmVkX1Byb2R1Y3RzLGVtYWlsX2NsaWNrLFRSVUUsOTUuMDAsV29tZW4ncyBEcmVzc2VzLDEwMDIsU3VtbWVyIE1heGkgRHJlc3NcbjEwMDIxLDEwMDcsMjAyNC0wMS0wMSxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxNZW4ncyBBY2Nlc3NvcmllcyxOVUxMLE5VTExcbjEwMDIyLDEwMDcsMjAyNC0wMS0wMSxSZWZlcnJhbCxGYXNoaW9uIEJsb2csTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxNZW4ncyBBY2Nlc3NvcmllcyxOVUxMLE5VTExcbjEwMDIzLDEwMDcsMjAyNC0wMS0wMixQYWlkIFNlYXJjaCxHb29nbGUgQWRzLDEwMDMsRXZlcnlkYXlfRXNzZW50aWFscyxhZF9jbGljayxGQUxTRSwwLjAwLE1lbidzIEFjY2Vzc29yaWVzLE5VTEwsTlVMTFxuMTAwMjQsMTAwOCwyMDI0LTAxLTAzLFBhaWQgU29jaWFsLEluc3RhZ3JhbSwzMDA0LFNwcmluZ19QcmV2aWV3X0lHLGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxXb21lbidzIE91dGVyd2VhcixOVUxMLE5VTExcbjEwMDI1LDEwMDgsMjAyNC0wMS0wNCxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxXb21lbidzIE91dGVyd2VhcixOVUxMLE5VTExcbjEwMDI2LDEwMDgsMjAyNC0wMS0wNSxQYWlkIFNlYXJjaCxHb29nbGUgQWRzLDEwMDQsU3ByaW5nX1ByZXZpZXcsYWRfY2xpY2ssVFJVRSw2NS4wMCxXb21lbidzIE91dGVyd2Vhciw1MDAxLFNwcmluZyBKYWNrZXRcbjEwMDI3LDEwMDksMjAyNC0wMS0wMSxQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLGFkX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwMjgsMTAwOSwyMDI0LTAxLTAxLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxGQUxTRSwwLjAwLE1lbidzIFNoaXJ0cyxOVUxMLE5VTExcbjEwMDI5LDEwMDksMjAyNC0wMS0wMixFbWFpbCxOZXdzbGV0dGVyLE5VTEwsV2Vla2x5X0RlYWxzLGVtYWlsX29wZW4sRkFMU0UsMC4wMCxOVUxMLE5VTEwsTlVMTFxuMTAwMzAsMTAxMCwyMDI0LTAxLTAxLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAzMSwxMDEwLDIwMjQtMDEtMDIsUGFpZCBTb2NpYWwsSW5zdGFncmFtLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsYWRfY2xpY2ssRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAzMiwxMDEwLDIwMjQtMDEtMDMsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsYWRfY2xpY2ssVFJVRSwxMTAuMDAsV29tZW4ncyBEcmVzc2VzLDEwMDMsRXZlbmluZyBDb2NrdGFpbCBEcmVzc1xuMTAwMzMsMTAxMSwyMDI0LTAxLTAxLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxGQUxTRSwwLjAwLE1lbidzIE91dGVyd2VhcixOVUxMLE5VTExcbjEwMDM0LDEwMTEsMjAyNC0wMS0wMixQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAyLFdpbnRlcl9TYWxlX0ZCLGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxNZW4ncyBPdXRlcndlYXIsTlVMTCxOVUxMXG4xMDAzNSwxMDExLDIwMjQtMDEtMDIsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMixXaW50ZXJfU2FsZV9GQixhZF9jbGljayxGQUxTRSwwLjAwLE1lbidzIE91dGVyd2VhcixOVUxMLE5VTExcbjEwMDM2LDEwMTIsMjAyNC0wMS0wMyxQYWlkIFNvY2lhbCxJbnN0YWdyYW0sMzAwNCxTcHJpbmdfUHJldmlld19JRyxhZF9jbGljayxGQUxTRSwwLjAwLFdvbWVuJ3MgQWNjZXNzb3JpZXMsTlVMTCxOVUxMXG4xMDAzNywxMDEyLDIwMjQtMDEtMDMsT3JnYW5pYyBTZWFyY2gsR29vZ2xlLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsV29tZW4ncyBBY2Nlc3NvcmllcyxOVUxMLE5VTExcbjEwMDM4LDEwMTIsMjAyNC0wMS0wNCxQYWlkIFNlYXJjaCxHb29nbGUgQWRzLDEwMDQsU3ByaW5nX1ByZXZpZXcsYWRfY2xpY2ssVFJVRSw0MC4wMCxXb21lbidzIEFjY2Vzc29yaWVzLDQwMDIsU3VtbWVyIEhhdCBDb2xsZWN0aW9uXG4xMDAzOSwxMDEzLDIwMjQtMDEtMDEsRW1haWwsTmV3c2xldHRlcixOVUxMLE5ld19BcnJpdmFscyxlbWFpbF9vcGVuLEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDQwLDEwMTMsMjAyNC0wMS0wMSxFbWFpbCxOZXdzbGV0dGVyLE5VTEwsTmV3X0Fycml2YWxzLGVtYWlsX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwNDEsMTAxMywyMDI0LTAxLTAyLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMyxFdmVyeWRheV9Fc3NlbnRpYWxzLGFkX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwNDIsMTAxNCwyMDI0LTAxLTAxLFBhaWQgU29jaWFsLEZhY2Vib29rLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsYWRfaW1wcmVzc2lvbixGQUxTRSwwLjAwLFdvbWVuJ3MgRHJlc3NlcyxOVUxMLE5VTExcbjEwMDQzLDEwMTQsMjAyNC0wMS0wMSxQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLGFkX2NsaWNrLEZBTFNFLDAuMDAsV29tZW4ncyBEcmVzc2VzLE5VTEwsTlVMTFxuMTAwNDQsMTAxNCwyMDI0LTAxLTAyLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxUUlVFLDg1LjAwLFdvbWVuJ3MgRHJlc3NlcywxMDA0LFNwcmluZyBDb2xsZWN0aW9uIERyZXNzXG4xMDA0NSwxMDE1LDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAzLEV2ZXJ5ZGF5X0Vzc2VudGlhbHMsYWRfaW1wcmVzc2lvbixGQUxTRSwwLjAwLE1lbidzIEFjY2Vzc29yaWVzLE5VTEwsTlVMTFxuMTAwNDYsMTAxNSwyMDI0LTAxLTAxLE9yZ2FuaWMgU29jaWFsLEZhY2Vib29rLE5VTEwsTlVMTCxwYWdlX3Zpc2l0LEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDQ3LDEwMTUsMjAyNC0wMS0wMixQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19GQixhZF9jbGljayxGQUxTRSwwLjAwLE1lbidzIEFjY2Vzc29yaWVzLE5VTEwsTlVMTFxuMTAwNDgsMTAxNiwyMDI0LTAxLTAzLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMixXaW50ZXJfU2FsZV8yMDI0LGFkX2NsaWNrLEZBTFNFLDAuMDAsV29tZW4ncyBPdXRlcndlYXIsTlVMTCxOVUxMXG4xMDA0OSwxMDE2LDIwMjQtMDEtMDQsRW1haWwsTmV3c2xldHRlcixOVUxMLFdpbnRlcl9TYWxlLGVtYWlsX2NsaWNrLEZBTFNFLDAuMDAsV29tZW4ncyBPdXRlcndlYXIsTlVMTCxOVUxMXG4xMDA1MCwxMDE2LDIwMjQtMDEtMDUsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMixXaW50ZXJfU2FsZV9GQixhZF9jbGljayxUUlVFLDEyMC4wMCxXb21lbidzIE91dGVyd2VhciwzMDAyLFdpbnRlciBDb2F0IERlbHV4ZVxuMTAwNTEsMTAxNywyMDI0LTAxLTAxLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxGQUxTRSwwLjAwLE1lbidzIFNoaXJ0cyxOVUxMLE5VTExcbjEwMDUyLDEwMTcsMjAyNC0wMS0wMSxQYWlkIFNvY2lhbCxJbnN0YWdyYW0sMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRyxhZF9pbXByZXNzaW9uLEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwNTMsMTAxNywyMDI0LTAxLTAyLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LGFkX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwNTQsMTAxOCwyMDI0LTAxLTAyLFBhaWQgU29jaWFsLEluc3RhZ3JhbSwzMDA1LFZhbGVudGluZV9TcGVjaWFsX0lHLGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxXb21lbidzIEFjY2Vzc29yaWVzLE5VTEwsTlVMTFxuMTAwNTUsMTAxOCwyMDI0LTAxLTAyLFBhaWQgU29jaWFsLEluc3RhZ3JhbSwzMDA1LFZhbGVudGluZV9TcGVjaWFsX0lHLGFkX2NsaWNrLEZBTFNFLDAuMDAsV29tZW4ncyBBY2Nlc3NvcmllcyxOVUxMLE5VTExcbjEwMDU2LDEwMTgsMjAyNC0wMS0wMyxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsVFJVRSw1NS4wMCxXb21lbidzIEFjY2Vzc29yaWVzLDQwMDMsSmV3ZWxyeSBTZXRcbjEwMDU3LDEwMTksMjAyNC0wMS0wMSxQYWlkIFNlYXJjaCxHb29nbGUgQWRzLDEwMDIsV2ludGVyX1NhbGVfMjAyNCxhZF9pbXByZXNzaW9uLEZBTFNFLDAuMDAsTWVuJ3MgT3V0ZXJ3ZWFyLE5VTEwsTlVMTFxuMTAwNTgsMTAxOSwyMDI0LTAxLTAxLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxGQUxTRSwwLjAwLE1lbidzIE91dGVyd2VhcixOVUxMLE5VTExcbjEwMDU5LDEwMTksMjAyNC0wMS0wMixFbWFpbCxOZXdzbGV0dGVyLE5VTEwsV2ludGVyX1NhbGUsZW1haWxfY2xpY2ssRkFMU0UsMC4wMCxNZW4ncyBPdXRlcndlYXIsTlVMTCxOVUxMXG4xMDA2MCwxMDIwLDIwMjQtMDEtMDEsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQixhZF9jbGljayxGQUxTRSwwLjAwLFdvbWVuJ3MgRHJlc3NlcyxOVUxMLE5VTExcbjEwMDYxLDEwMjAsMjAyNC0wMS0wMSxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDA2MiwxMDIwLDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsYWRfY2xpY2ssVFJVRSw5MC4wMCxXb21lbidzIERyZXNzZXMsMTAwNSxCdXNpbmVzcyBDYXN1YWwgRHJlc3Ncbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvY3VzdG9tZXJfZGF0YS5jc3ZcbmN1c3RvbWVyX2lkLGZpcnN0X25hbWUsbGFzdF9uYW1lLGVtYWlsLGdlbmRlcixhZ2UsY2l0eSxzdGF0ZSxzaWdudXBfZGF0ZSxjdXN0b21lcl9zZWdtZW50LHRvdGFsX29yZGVycyx0b3RhbF9zcGVuZCxhdmdfb3JkZXJfdmFsdWUsbGFzdF9wdXJjaGFzZV9kYXRlLGRheXNfc2luY2VfbGFzdF9wdXJjaGFzZSxmYXZvcml0ZV9jYXRlZ29yeSxmYXZvcml0ZV9wcm9kdWN0LGVtYWlsX3N1YnNjcmliZXIsbW9iaWxlX2FwcF91c2VyLGxveWFsdHlfdGllclxuMTAwMSxKb2huLFNtaXRoLGpvaG4uc21pdGhAZW1haWwuY29tLE0sMzQsTmV3IFlvcmssTlksMjAyMy0wMS0xNSxIaWdoIFZhbHVlLDEyLDEyNTAuNDUsMTA0LjIwLDIwMjQtMDEtMDIsNSxNZW4ncyBTaGlydHMsU3VtbWVyIExpbmVuIFNoaXJ0LFRSVUUsVFJVRSxHb2xkXG4xMDAyLEVtaWx5LEpvaG5zb24sZW1pbHkuakBlbWFpbC5jb20sRiwyOSxMb3MgQW5nZWxlcyxDQSwyMDIzLTAyLTAzLFJlZ3VsYXIsOCw2NDUuNzUsODAuNzIsMjAyNC0wMS0wMyw0LFdvbWVuJ3MgRHJlc3NlcyxGbG9yYWwgU3VtbWVyIERyZXNzLFRSVUUsVFJVRSxTaWx2ZXJcbjEwMDMsTWljaGFlbCxXaWxsaWFtcyxtLndpbGxpYW1zQGVtYWlsLmNvbSxNLDQyLENoaWNhZ28sSUwsMjAyMy0wMS0yMixIaWdoIFZhbHVlLDE1LDE4NzYuMzAsMTI1LjA5LDIwMjQtMDEtMDEsNixNZW4ncyBPdXRlcndlYXIsV2ludGVyIENvYXQgQ2xhc3NpYyxUUlVFLEZBTFNFLEdvbGRcbjEwMDQsSmVzc2ljYSxCcm93bixqZXNzLmJyb3duQGVtYWlsLmNvbSxGLDMxLEhvdXN0b24sVFgsMjAyMy0wMy0xMSxSZWd1bGFyLDYsNDg3LjIwLDgxLjIwLDIwMjQtMDEtMDQsMyxXb21lbidzIEFjY2Vzc29yaWVzLFNwcmluZyBTY2FyZiBTZXQsRkFMU0UsVFJVRSxCcm9uemVcbjEwMDUsRGF2aWQsSm9uZXMsZGF2aWQuakBlbWFpbC5jb20sTSwyNyxQaGlsYWRlbHBoaWEsUEEsMjAyMy0wMi0xOCxBdCBSaXNrLDMsMjEwLjQ1LDcwLjE1LDIwMjMtMTEtMTUsNTMsTWVuJ3MgU2hpcnRzLEJhc2ljIFRlZSAzLVBhY2ssVFJVRSxGQUxTRSxCcm9uemVcbjEwMDYsU2FyYWgsR2FyY2lhLHMuZ2FyY2lhQGVtYWlsLmNvbSxGLDM4LFBob2VuaXgsQVosMjAyMy0wMS0wNSxIaWdoIFZhbHVlLDE4LDIxNDUuNjAsMTE5LjIwLDIwMjQtMDEtMDIsNSxXb21lbidzIERyZXNzZXMsU3VtbWVyIE1heGkgRHJlc3MsVFJVRSxUUlVFLFBsYXRpbnVtXG4xMDA3LFJvYmVydCxNaWxsZXIscm9iLm1pbGxlckBlbWFpbC5jb20sTSw0NSxTYW4gQW50b25pbyxUWCwyMDIzLTA0LTAyLFJlZ3VsYXIsNyw1OTguNDAsODUuNDksMjAyMy0xMi0xMiwyNixNZW4ncyBBY2Nlc3NvcmllcyxMZWF0aGVyIEJlbHQsRkFMU0UsRkFMU0UsU2lsdmVyXG4xMDA4LEplbm5pZmVyLERhdmlzLGplbi5kYXZpc0BlbWFpbC5jb20sRiwzMyxTYW4gRGllZ28sQ0EsMjAyMy0wMi0yNyxSZWd1bGFyLDksNzIzLjE1LDgwLjM1LDIwMjQtMDEtMDUsMixXb21lbidzIE91dGVyd2VhcixTcHJpbmcgSmFja2V0LFRSVUUsVFJVRSxTaWx2ZXJcbjEwMDksSmFtZXMsUm9kcmlndWV6LGoucm9kcmlndWV6QGVtYWlsLmNvbSxNLDI5LERhbGxhcyxUWCwyMDIzLTAzLTE1LEF0IFJpc2ssNCwyNjcuODAsNjYuOTUsMjAyMy0xMS0wMiw2NixNZW4ncyBTaGlydHMsR3JhcGhpYyBUZWUgQ29sbGVjdGlvbixGQUxTRSxUUlVFLEJyb256ZVxuMTAxMCxMaXNhLE1hcnRpbmV6LGxpc2EubUBlbWFpbC5jb20sRiwzNixTYW4gSm9zZSxDQSwyMDIzLTAxLTE4LEhpZ2ggVmFsdWUsMTQsMTY1NC4yNSwxMTguMTYsMjAyNC0wMS0wMyw0LFdvbWVuJ3MgRHJlc3NlcyxFdmVuaW5nIENvY2t0YWlsIERyZXNzLFRSVUUsVFJVRSxHb2xkXG4xMDExLFRob21hcyxIZXJuYW5kZXosdC5oZXJuYW5kZXpAZW1haWwuY29tLE0sNDEsQXVzdGluLFRYLDIwMjMtMDItMDksUmVndWxhciw4LDY4Ny4zNSw4NS45MiwyMDIzLTEyLTI4LDEwLE1lbidzIE91dGVyd2VhcixMaWdodHdlaWdodCBKYWNrZXQsVFJVRSxGQUxTRSxTaWx2ZXJcbjEwMTIsTWljaGVsbGUsTG9wZXosbWljaGVsbGUubEBlbWFpbC5jb20sRiwyOCxKYWNrc29udmlsbGUsRkwsMjAyMy0wNC0wNSxOZXcsMiwxNzguOTAsODkuNDUsMjAyNC0wMS0wNCwzLFdvbWVuJ3MgQWNjZXNzb3JpZXMsU3VtbWVyIEhhdCBDb2xsZWN0aW9uLFRSVUUsVFJVRSxCcm9uemVcbjEwMTMsRGFuaWVsLEdvbnphbGV6LGQuZ29uemFsZXpAZW1haWwuY29tLE0sMzIsU2FuIEZyYW5jaXNjbyxDQSwyMDIzLTAxLTI5LFJlZ3VsYXIsNyw2MTIuNDAsODcuNDksMjAyMy0xMi0xNSwyMyxNZW4ncyBTaGlydHMsT2ZmaWNlIEJ1dHRvbi1Eb3duLEZBTFNFLFRSVUUsU2lsdmVyXG4xMDE0LEFtYW5kYSxXaWxzb24sYS53aWxzb25AZW1haWwuY29tLEYsMzksSW5kaWFuYXBvbGlzLElOLDIwMjMtMDItMTQsSGlnaCBWYWx1ZSwxNiwxODk3LjYwLDExOC42MCwyMDI0LTAxLTAyLDUsV29tZW4ncyBEcmVzc2VzLFNwcmluZyBDb2xsZWN0aW9uIERyZXNzLFRSVUUsVFJVRSxHb2xkXG4xMDE1LENocmlzdG9waGVyLEFuZGVyc29uLGMuYW5kZXJzb25AZW1haWwuY29tLE0sNDQsQ29sdW1idXMsT0gsMjAyMy0wMy0yMixSZWd1bGFyLDUsNDMyLjc1LDg2LjU1LDIwMjMtMTItMjAsMTgsTWVuJ3MgQWNjZXNzb3JpZXMsV2FsbGV0IGFuZCBCZWx0IFNldCxUUlVFLEZBTFNFLEJyb256ZVxuMTAxNixTdGVwaGFuaWUsVGhvbWFzLHMudGhvbWFzQGVtYWlsLmNvbSxGLDMwLENoYXJsb3R0ZSxOQywyMDIzLTAxLTEyLEhpZ2ggVmFsdWUsMTMsMTU0My4yMCwxMTguNzEsMjAyNC0wMS0wNSwyLFdvbWVuJ3MgT3V0ZXJ3ZWFyLFdpbnRlciBDb2F0IERlbHV4ZSxUUlVFLFRSVUUsR29sZFxuMTAxNyxNYXR0aGV3LFRheWxvcixtLnRheWxvckBlbWFpbC5jb20sTSwzNyxTZWF0dGxlLFdBLDIwMjMtMDItMjEsUmVndWxhciw5LDc2NS4zMCw4NS4wMywyMDIzLTEyLTMwLDgsTWVuJ3MgU2hpcnRzLENhc3VhbCBQb2xvIFNldCxGQUxTRSxUUlVFLFNpbHZlclxuMTAxOCxOaWNvbGUsTW9vcmUsbmljb2xlLm1AZW1haWwuY29tLEYsMjYsRGVudmVyLENPLDIwMjMtMDQtMDgsTmV3LDEsOTUuNDAsOTUuNDAsMjAyNC0wMS0wMyw0LFdvbWVuJ3MgQWNjZXNzb3JpZXMsSmV3ZWxyeSBTZXQsVFJVRSxGQUxTRSxCcm9uemVcbjEwMTksQW5kcmV3LEphY2tzb24sYS5qYWNrc29uQGVtYWlsLmNvbSxNLDMxLEJvc3RvbixNQSwyMDIzLTAxLTI1LFJlZ3VsYXIsNiw1MzQuNjAsODkuMTAsMjAyMy0xMi0xMCwyOCxNZW4ncyBPdXRlcndlYXIsUmFpbiBKYWNrZXQsVFJVRSxUUlVFLFNpbHZlclxuMTAyMCxFbGl6YWJldGgsTWFydGluLGUubWFydGluQGVtYWlsLmNvbSxGLDM1LE5hc2h2aWxsZSxUTiwyMDIzLTAyLTA2LEhpZ2ggVmFsdWUsMTcsMjAzNC4xNSwxMTkuNjYsMjAyNC0wMS0wMSw2LFdvbWVuJ3MgRHJlc3NlcyxCdXNpbmVzcyBDYXN1YWwgRHJlc3MsVFJVRSxUUlVFLFBsYXRpbnVtXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2luc3RhZ3JhbV9hZHNfZGF0YS5jc3ZcbmRhdGUsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxhZF9zZXRfaWQsYWRfc2V0X25hbWUsYWRfaWQsYWRfbmFtZSxvYmplY3RpdmUsaW1wcmVzc2lvbnMscmVhY2gsY2xpY2tzLGN0cixjcGMsc3BlbmQsY29udmVyc2lvbnMsY29udmVyc2lvbl92YWx1ZSxjb3N0X3Blcl9jb252ZXJzaW9uLHJvYXNcbjIwMjQtMDEtMDEsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywyODc2LDE5ODcsMTIzLDAuMDQyOCwwLjkwLDExMC43MCw0LDI4MC4wMCwyNy42OCwyLjUzXG4yMDI0LTAxLTAxLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTIsTWVuJ3MgU2hpcnRzLDMwMDEyMSxTdW1tZXIgU2hpcnQgU3RhdGljLENPTlZFUlNJT05TLDIzNDUsMTY1NCw5OCwwLjA0MTgsMC45MCw4OC4yMCwzLDIxMC4wMCwyOS40MCwyLjM4XG4yMDI0LTAxLTAxLDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxODc2LDEzNDUsNzYsMC4wNDA1LDAuOTUsNzIuMjAsMiwxNjAuMDAsMzYuMTAsMi4yMlxuMjAyNC0wMS0wMSwzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxNjU0LDEyMzQsNjUsMC4wMzkzLDAuODUsNTUuMjUsMSw1MC4wMCw1NS4yNSwwLjkxXG4yMDI0LTAxLTAyLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTEsV29tZW4ncyBEcmVzc2VzLDMwMDExMSxTdW1tZXIgRHJlc3MgQ2Fyb3VzZWwsQ09OVkVSU0lPTlMsMzAxMiwyMTM0LDE0NSwwLjA0ODEsMC45MCwxMzAuNTAsNiw0MjAuMDAsMjEuNzUsMy4yMlxuMjAyNC0wMS0wMiwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyNTY3LDE4NzYsMTEyLDAuMDQzNiwwLjkwLDEwMC44MCw0LDI4MC4wMCwyNS4yMCwyLjc4XG4yMDI0LTAxLTAyLDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxOTg3LDE0NTYsODcsMC4wNDM4LDAuOTUsODIuNjUsMywyNDAuMDAsMjcuNTUsMi45MFxuMjAyNC0wMS0wMiwzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxNzY1LDEzNDUsNzgsMC4wNDQyLDAuODUsNjYuMzAsMiwxMDAuMDAsMzMuMTUsMS41MVxuMjAyNC0wMS0wMywzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDExLFdvbWVuJ3MgRHJlc3NlcywzMDAxMTEsU3VtbWVyIERyZXNzIENhcm91c2VsLENPTlZFUlNJT05TLDMyNDUsMjI0NSwxNjcsMC4wNTE1LDAuOTAsMTUwLjMwLDgsNTYwLjAwLDE4Ljc5LDMuNzNcbjIwMjQtMDEtMDMsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMixNZW4ncyBTaGlydHMsMzAwMTIxLFN1bW1lciBTaGlydCBTdGF0aWMsQ09OVkVSU0lPTlMsMjc4OSwxOTg3LDEzMiwwLjA0NzMsMC45MCwxMTguODAsNSwzNTAuMDAsMjMuNzYsMi45NVxuMjAyNC0wMS0wMywzMDAyLFdpbnRlcl9TYWxlX0lHLDMwMDIxLFdpbnRlciBDb2F0cywzMDAyMTEsV2ludGVyIENvYXQgVmlkZW8sQ09OVkVSU0lPTlMsMTg3NiwxNDMyLDc4LDAuMDQxNiwwLjk1LDc0LjEwLDIsMTYwLjAwLDM3LjA1LDIuMTZcbjIwMjQtMDEtMDMsMzAwMyxFdmVyeWRheV9CYXNpY3NfSUcsMzAwMzEsQmFzaWMgVGVlcywzMDAzMTEsQmFzaWMgVGVlIENvbGxlY3Rpb24sQ09OVkVSU0lPTlMsMTk4NywxNTQzLDg5LDAuMDQ0OCwwLjg1LDc1LjY1LDMsMTUwLjAwLDI1LjIyLDEuOThcbjIwMjQtMDEtMDQsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzNDU2LDIzNDUsMTg5LDAuMDU0NywwLjkwLDE3MC4xMCwxMCw3MDAuMDAsMTcuMDEsNC4xMlxuMjAyNC0wMS0wNCwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyOTg3LDIxMzQsMTQzLDAuMDQ3OSwwLjkwLDEyOC43MCw2LDQyMC4wMCwyMS40NSwzLjI2XG4yMDI0LTAxLTA0LDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxNzY1LDEzMjEsNjcsMC4wMzgwLDAuOTUsNjMuNjUsMSw4MC4wMCw2My42NSwxLjI2XG4yMDI0LTAxLTA0LDMwMDMsRXZlcnlkYXlfQmFzaWNzX0lHLDMwMDMxLEJhc2ljIFRlZSBDb2xsZWN0aW9uLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywyMTM0LDE2NTQsMTAxLDAuMDQ3MywwLjg1LDg1Ljg1LDQsMjAwLjAwLDIxLjQ2LDIuMzNcbjIwMjQtMDEtMDUsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzNjc4LDI1NjcsMjEyLDAuMDU3NiwwLjkwLDE5MC44MCwxMiw4NDAuMDAsMTUuOTAsNC40MFxuMjAyNC0wMS0wNSwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywzMjQ1LDIzNDUsMTY3LDAuMDUxNSwwLjkwLDE1MC4zMCw4LDU2MC4wMCwxOC43OSwzLjczXG4yMDI0LTAxLTA1LDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxNjU0LDEyMzQsNTYsMC4wMzM5LDAuOTUsNTMuMjAsMCwwLjAwLDAuMDAsMC4wMFxuMjAyNC0wMS0wNSwzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywyMzQ1LDE3NjUsMTEyLDAuMDQ3OCwwLjg1LDk1LjIwLDUsMjUwLjAwLDE5LjA0LDIuNjNcbjIwMjQtMDEtMDYsMzAwNCxTcHJpbmdfUHJldmlld19JRywzMDA0MSxTcHJpbmcgRHJlc3NlcywzMDA0MTEsU3ByaW5nIERyZXNzIENvbGxlY3Rpb24sQ09OVkVSU0lPTlMsMjg3NiwyMTM0LDEzMiwwLjA0NTksMC45MCwxMTguODAsNSwzNTAuMDAsMjMuNzYsMi45NVxuMjAyNC0wMS0wNiwzMDA0LFNwcmluZ19QcmV2aWV3X0lHLDMwMDQyLFNwcmluZyBBY2Nlc3NvcmllcywzMDA0MjEsU3ByaW5nIEFjY2Vzc29yaWVzIENhcm91c2VsLENPTlZFUlNJT05TLDIzNDUsMTc2NSw5OCwwLjA0MTgsMC45MCw4OC4yMCwzLDI0MC4wMCwyOS40MCwyLjcyXG4yMDI0LTAxLTA2LDMwMDUsVmFsZW50aW5lX1NwZWNpYWxfSUcsMzAwNTEsR2lmdCBTZXRzLDMwMDUxMSxWYWxlbnRpbmUgR2lmdCBWaWRlbyxDT05WRVJTSU9OUywyOTg3LDIxMzQsMTU2LDAuMDUyMiwwLjk1LDE0OC4yMCw2LDQ4MC4wMCwyNC43MCwzLjI0XG4yMDI0LTAxLTA2LDMwMDUsVmFsZW50aW5lX1NwZWNpYWxfSUcsMzAwNTIsSmV3ZWxyeSwzMDA1MjEsVmFsZW50aW5lIEpld2VscnkgQ29sbGVjdGlvbixDT05WRVJTSU9OUywyNTY3LDE4NzYsMTIzLDAuMDQ3OSwwLjg1LDEwNC41NSw0LDMyMC4wMCwyNi4xNCwzLjA2XG4yMDI0LTAxLTA3LDMwMDQsU3ByaW5nX1ByZXZpZXdfSUcsMzAwNDEsU3ByaW5nIERyZXNzZXMsMzAwNDExLFNwcmluZyBEcmVzcyBDb2xsZWN0aW9uLENPTlZFUlNJT05TLDMwMTIsMjI0NSwxNTQsMC4wNTExLDAuOTAsMTM4LjYwLDcsNDkwLjAwLDE5LjgwLDMuNTRcbjIwMjQtMDEtMDcsMzAwNCxTcHJpbmdfUHJldmlld19JRywzMDA0MixTcHJpbmcgQWNjZXNzb3JpZXMsMzAwNDIxLFNwcmluZyBBY2Nlc3NvcmllcyBDYXJvdXNlbCxDT05WRVJTSU9OUywyNTY3LDE4NzYsMTEyLDAuMDQzNiwwLjkwLDEwMC44MCw0LDMyMC4wMCwyNS4yMCwzLjE3XG4yMDI0LTAxLTA3LDMwMDUsVmFsZW50aW5lX1NwZWNpYWxfSUcsMzAwNTEsR2lmdCBTZXRzLDMwMDUxMSxWYWxlbnRpbmUgR2lmdCBWaWRlbyxDT05WRVJTSU9OUywzMjQ1LDIzNDUsMTc2LDAuMDU0MiwwLjk1LDE2Ny4yMCw4LDY0MC4wMCwyMC45MCwzLjgzXG4yMDI0LTAxLTA3LDMwMDUsVmFsZW50aW5lX1NwZWNpYWxfSUcsMzAwNTIsSmV3ZWxyeSwzMDA1MjEsVmFsZW50aW5lIEpld2VscnkgQ29sbGVjdGlvbixDT05WRVJTSU9OUywyNzg5LDE5ODcsMTQzLDAuMDUxMywwLjg1LDEyMS41NSw2LDQ4MC4wMCwyMC4yNiwzLjk1XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2dvb2dsZV9hbmFseXRpY3NfZGF0YS5jc3ZcbmRhdGUsc291cmNlLG1lZGl1bSxjaGFubmVsX2dyb3VwaW5nLGRldmljZV9jYXRlZ29yeSxsYW5kaW5nX3BhZ2Usc2Vzc2lvbnMsbmV3X3VzZXJzLGJvdW5jZV9yYXRlLHBhZ2VzX3Blcl9zZXNzaW9uLGF2Z19zZXNzaW9uX2R1cmF0aW9uLHRyYW5zYWN0aW9ucyxyZXZlbnVlLGNvbnZlcnNpb25fcmF0ZVxuMjAyNC0wMS0wMSxnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywzNDUsMTg3LDAuMzIsMy41LDI0NSwxMiw4NDAuMDAsMC4wMzQ4XG4yMDI0LTAxLTAxLGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTg3LDk4LDAuMjgsNC4yLDMxMiw4LDU2MC4wMCwwLjA0MjhcbjIwMjQtMDEtMDEsZmFjZWJvb2sscmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDE1Niw4NywwLjM1LDIuOCwxOTgsNSwzNTAuMDAsMC4wMzIxXG4yMDI0LTAxLTAxLGluc3RhZ3JhbSxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTIzLDc2LDAuMzgsMi41LDE3NiwzLDIxMC4wMCwwLjAyNDRcbjIwMjQtMDEtMDEsZGlyZWN0LG5vbmUsRGlyZWN0LGRlc2t0b3AsLywyMzQsMTEyLDAuMjUsNS42LDQyMywxNSwxMDUwLjAwLDAuMDY0MVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9nb29nbGVfc2VhcmNoX2NvbnNvbGVfZGF0YS5jc3ZcbmRhdGUscXVlcnkscGFnZSxkZXZpY2UsY291bnRyeSxpbXByZXNzaW9ucyxjbGlja3MsY3RyLHBvc2l0aW9uXG4yMDI0LTAxLTAxLHN1bW1lciBkcmVzc2VzLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsbW9iaWxlLFVTLDIzNDUsMTg3LDAuMDc5NywzLjJcbjIwMjQtMDEtMDEsc3VtbWVyIHNoaXJ0cyBtZW4sL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cyxtb2JpbGUsVVMsMTg3NiwxMzIsMC4wNzA0LDQuMVxuMjAyNC0wMS0wMSx3aW50ZXIgY29hdHMgc2FsZSwvY29sbGVjdGlvbnMvd2ludGVyLXNhbGUvY29hdHMsZGVza3RvcCxVUywxNTQzLDk4LDAuMDYzNSwyLjhcbjIwMjQtMDEtMDEsYmFzaWMgdC1zaGlydHMsL2NvbGxlY3Rpb25zL2Jhc2ljcy90ZWVzLHRhYmxldCxVUywxMjM0LDc2LDAuMDYxNiw1LjJcbjIwMjQtMDEtMDIsc3VtbWVyIGRyZXNzZXMsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3Nlcyxtb2JpbGUsVVMsMjQ1NiwyMDEsMC4wODE4LDMuMVxuMjAyNC0wMS0wMixzdW1tZXIgc2hpcnRzIG1lbiwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLG1vYmlsZSxVUywxOTIzLDE0NSwwLjA3NTQsMy45XG4yMDI0LTAxLTAyLHdpbnRlciBjb2F0cyBzYWxlLC9jb2xsZWN0aW9ucy93aW50ZXItc2FsZS9jb2F0cyxkZXNrdG9wLFVTLDE2MjEsMTEyLDAuMDY5MSwyLjdcbjIwMjQtMDEtMDIsYmFzaWMgdC1zaGlydHMsL2NvbGxlY3Rpb25zL2Jhc2ljcy90ZWVzLHRhYmxldCxVUywxMzQ1LDg5LDAuMDY2Miw0Ljhcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvZmFjZWJvb2tfYWRzX2RhdGEuY3N2XG5kYXRlLGNhbXBhaWduX2lkLGNhbXBhaWduX25hbWUsYWRfc2V0X2lkLGFkX3NldF9uYW1lLGFkX2lkLGFkX25hbWUsb2JqZWN0aXZlLGltcHJlc3Npb25zLHJlYWNoLGNsaWNrcyxjdHIsY3BjLHNwZW5kLGNvbnZlcnNpb25zLGNvbnZlcnNpb25fdmFsdWUsY29zdF9wZXJfY29udmVyc2lvbixyb2FzXG4yMDI0LTAxLTAxLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsMjAwMTEsV29tZW4ncyBEcmVzc2VzLDIwMDExMSxTdW1tZXIgRHJlc3MgQ2Fyb3VzZWwsQ09OVkVSU0lPTlMsMzQ1NiwyMzQ1LDE4NywwLjA1NDEsMC44NSwxNTguOTUsNyw0OTAuMDAsMjIuNzEsMy4wOFxuMjAyNC0wMS0wMSwyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLDIwMDEyLE1lbidzIFNoaXJ0cywyMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyODc2LDE5ODcsMTMyLDAuMDQ1OSwwLjg1LDExMi4yMCw0LDI4MC4wMCwyOC4wNSwyLjUwXG4yMDI0LTAxLTAxLDIwMDIsV2ludGVyX1NhbGVfRkIsMjAwMjEsV2ludGVyIENvYXRzLDIwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywyMzQ1LDE2NTQsOTgsMC4wNDE4LDAuOTAsODguMjAsMywyNDAuMDAsMjkuNDAsMi43MlxuMjAyNC0wMS0wMSwyMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19GQiwyMDAzMSxCYXNpYyBUZWVzLDIwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxOTg3LDE0MzIsNzYsMC4wMzgyLDAuODAsNjAuODAsMiwxMDAuMDAsMzAuNDAsMS42NFxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9nb29nbGVfYWRzX2RhdGEuY3N2XG5kYXRlLGNhbXBhaWduX2lkLGNhbXBhaWduX25hbWUsYWRfZ3JvdXBfaWQsYWRfZ3JvdXBfbmFtZSxrZXl3b3JkLG1hdGNoX3R5cGUsZGV2aWNlLGltcHJlc3Npb25zLGNsaWNrcyxjb3N0LGNvbnZlcnNpb25zLGNvbnZlcnNpb25fdmFsdWUsY3RyLGNwYyxyb2FzXG4yMDI0LTAxLTAxLDEwMDEsU3VtbWVyX0NvbGxlY3Rpb25fMjAyNCwxMDAxMSxXb21lbidzIERyZXNzZXMsc3VtbWVyIGRyZXNzLGJyb2FkLG1vYmlsZSwxMjQ1LDc4LDE1Ni4wMCwzLDIxMC4wMCwwLjA2MjYsMi4wMCwxLjM1XG4yMDI0LTAxLTAxLDEwMDEsU3VtbWVyX0NvbGxlY3Rpb25fMjAyNCwxMDAxMixNZW4ncyBTaGlydHMsc3VtbWVyIHNoaXJ0LGJyb2FkLG1vYmlsZSw5ODcsNDUsOTAuMDAsMSw4MC4wMCwwLjA0NTYsMi4wMCwwLjg5XG4yMDI0LTAxLTAxLDEwMDIsV2ludGVyX1NhbGVfMjAyNCwxMDAyMSxXaW50ZXIgQ29hdHMsd2ludGVyIGNvYXQgc2FsZSxleGFjdCxkZXNrdG9wLDg3Niw2NSwxNjIuNTAsNCwzMjAuMDAsMC4wNzQyLDIuNTAsMS45N1xuMjAyNC0wMS0wMSwxMDAzLEV2ZXJ5ZGF5X0Vzc2VudGlhbHMsMTAwMzEsQmFzaWMgVGVlcyxiYXNpYyB0LXNoaXJ0LHBocmFzZSx0YWJsZXQsNjU0LDMyLDQ4LjAwLDIsMTAwLjAwLDAuMDQ4OSwxLjUwLDIuMDhcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGFfYW5hbHlzaXMucHlcbi4uLlxuICAgIFxuICAgICMgR29vZ2xlIEFkcyBkYXRhXG4gICAgZ29vZ2xlX2FkcyA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9hZHNfZGF0YS5jc3YnKVxuICAgIGdvb2dsZV9hZHNbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGdvb2dsZV9hZHNbJ2RhdGUnXSlcbiAgICBcbiAgICAjIEN1c3RvbWVyIHRvdWNocG9pbnRzXG4gICAgdG91Y2hwb2ludHMgPSBwZC5yZWFkX2NzdignZGF0YS9jdXN0b21lcl90b3VjaHBvaW50cy5jc3YnKVxuICAgIHRvdWNocG9pbnRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZSh0b3VjaHBvaW50c1snZGF0ZSddKVxuICAgIFxuICAgICMgR29vZ2xlIFNlYXJjaCBDb25zb2xlIGRhdGFcbiAgICBzZWFyY2hfY29uc29sZSA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9zZWFyY2hfY29uc29sZV9kYXRhLmNzdicpXG4gICAgc2VhcmNoX2NvbnNvbGVbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKHNlYXJjaF9jb25zb2xlWydkYXRlJ10pXG4gICAgXG4gICAgcHJpbnQoXCJBbGwgZGF0YXNldHMgbG9hZGVkIHN1Y2Nlc3NmdWxseSFcIilcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICAnZ2FfZGF0YSc6IGdhX2RhdGEsXG4gICAgICAgICdjdXN0b21lcl9kYXRhJzogY3VzdG9tZXJfZGF0YSxcbiAgICAgICAgJ2ZiX2Fkcyc6IGZiX2FkcyxcbiAgICAgICAgJ2lnX2Fkcyc6IGlnX2FkcyxcbiAgICAgICAgJ2dvb2dsZV9hZHMnOiBnb29nbGVfYWRzLFxuICAgICAgICAndG91Y2hwb2ludHMnOiB0b3VjaHBvaW50cyxcbiAgICAgICAgJ3NlYXJjaF9jb25zb2xlJzogc2VhcmNoX2NvbnNvbGVcbiAgICB9XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9SRUFETUUubWRcbi4uLlxuXG4tIGBnb29nbGVfYW5hbHl0aWNzX2RhdGEuY3N2YDogV2ViIGFuYWx5dGljcyBkYXRhIGluY2x1ZGluZyBzZXNzaW9ucywgY29udmVyc2lvbnMsIGFuZCByZXZlbnVlXG4tIGBjdXN0b21lcl9kYXRhLmNzdmA6IEN1c3RvbWVyIGRlbW9ncmFwaGljIGFuZCBwdXJjaGFzZSBpbmZvcm1hdGlvblxuLSBgZmFjZWJvb2tfYWRzX2RhdGEuY3N2YDogRmFjZWJvb2sgYWR2ZXJ0aXNpbmcgcGVyZm9ybWFuY2UgbWV0cmljc1xuLSBgaW5zdGFncmFtX2Fkc19kYXRhLmNzdmA6IEluc3RhZ3JhbSBhZHZlcnRpc2luZyBwZXJmb3JtYW5jZSBtZXRyaWNzXG4tIGBnb29nbGVfYWRzX2RhdGEuY3N2YDogR29vZ2xlIEFkcyBwZXJmb3JtYW5jZSBtZXRyaWNzXG4tIGBjdXN0b21lcl90b3VjaHBvaW50cy5jc3ZgOiBDdXN0b21lciBpbnRlcmFjdGlvbiBkYXRhIGFjcm9zcyBkaWZmZXJlbnQgY2hhbm5lbHNcbi0gYGdvb2dsZV9zZWFyY2hfY29uc29sZV9kYXRhLmNzdmA6IFNlYXJjaCBwZXJmb3JtYW5jZSBkYXRhIGZyb20gR29vZ2xlIFNlYXJjaCBDb25zb2xlXG5cbiMjIFNldHVwXG5cbjEuIENyZWF0ZSBhIHZpcnR1YWwgZW52aXJvbm1lbnQgKG9wdGlvbmFsIGJ1dCByZWNvbW1lbmRlZCk6XG4gICBgYGBcbiAgIHB5dGhvbiAtbSB2ZW52IC52ZW52XG4gICBzb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlICAjIE9uIFdpbmRvd3M6IC52ZW52XFxTY3JpcHRzXFxhY3RpdmF0ZVxuICAgYGBgXG5cbjIuIEluc3RhbGwgdGhlIHJlcXVpcmVkIHBhY2thZ2VzOlxuICAgYGBgXG4gICBwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0XG4gICBgYGBcbi4uLlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUjVuOUpRdlViU3R4ZHBaQUJmZjVZSyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMiLCJmb2xkZXJSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxMSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn19fV0sInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0J3Mgc3RhcnQgaW1wbGVtZW50aW5nIHRoZSBlbmhhbmNlZCBkYXNoYm9hcmQuIEZpcnN0LCBsZXQncyBjcmVhdGUgYW4gZW5oYW5jZWQgZGF0YSBhbmFseXNpcyBtb2R1bGUgd2l0aCB0aGUgbmV3IGZlYXR1cmVzOlxuXG5JJ20gc29ycnkuIEkgdHJpZWQgdG8gY2FsbCBhIHRvb2wsIGJ1dCBwcm92aWRlZCB0b28gbGFyZ2Ugb2YgYW4gaW5wdXQuIEhvdyB3b3VsZCB5b3UgbGlrZSB0byBwcm9jZWVkP1xuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiZDNkNDY0NmQtYTFkOC00ZmVlLTllNjctOTI2NWYwMmFkZTA0Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJlM2Q1NjJlYy02OTEzLTRhMzYtYWM3Ni1iNTcyN2I4NzJlMjgiLCJyZXF1ZXN0X21lc3NhZ2UiOiJJbXByb3ZlIHRoZSBEaWdpdGFs4oCRTWFya2V0aW5nIERhc2hib2FyZFxuXG5PYmplY3RpdmVcblVwZ3JhZGUgdGhlIGV4aXN0aW5nIERpZ2l0YWzCoERhdGHCoEFuYWx5c2lzIGRhc2hib2FyZCBzbyBpdCB0ZWxscyBhIGRlZXBlciwgbW9yZSBhY3Rpb25hYmxlIHN0b3J5IGZvciBtYXJrZXRlcnMgYW5kIGV4ZWN1dGl2ZXMuXG5cblVuaWZ5ICYgRW5yaWNoIE1ldHJpY3NcblxuQWRkIENQQSwgQ1ZSLCBBT1YsIExUViwgYmxlbmRlZCBST0FTLCBhbmQgQ3VzdG9tZXLigJFBY3F1aXNpdGlvbiBDb3N0LlxuXG5Ob3JtYWxpc2UgY2hhbm5lbCBuYW1lcyBhbmQgY3VycmVuY2llcyBzbyBjcm9zc+KAkXBsYXRmb3JtIHRvdGFscyBhcmUgYWNjdXJhdGUuXG5cbkRyaWxs4oCRRG93biAmIEludGVyYWN0aXZpdHlcblxuSW1wbGVtZW50IGdsb2JhbCBkYXRlLCBjaGFubmVsLCBhbmQgY2FtcGFpZ24gZmlsdGVycyAobXVsdGnigJFzZWxlY3QpOyBhbGxvdyBjbGlja+KAkXRocm91Z2ggZnJvbSBoaWdo4oCRbGV2ZWwgS1BJcyB0byBkZXRhaWxlZCB0YWJsZXMuXG5cbkVuYWJsZSB0b29sdGlwcyB0aGF0IHN1cmZhY2Ugc3RhdGlzdGljYWwgc2lnbmlmaWNhbmNlIG9yIGFub21hbGllcy5cblxuQXR0cmlidXRpb24gJiBKb3VybmV5IEluc2lnaHRzXG5cbkluY2x1ZGUgZmlyc3TigJF0b3VjaCB2cy4gbGFzdOKAkXRvdWNoIHZzLiBNYXJrb3Ygb3IgU2hhcGxleSBhdHRyaWJ1dGlvbiBtb2RlbHMgdXNpbmcgY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2LlxuXG5WaXN1YWxpc2UgdG9wIGNvbnZlcnNpb24gcGF0aHMgd2l0aCBhbiBhbGx1dmlhbC9TYW5rZXkgZGlhZ3JhbS4iLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoiSW1wcm92ZSB0aGUgRGlnaXRhbOKAkU1hcmtldGluZyBEYXNoYm9hcmQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ik9iamVjdGl2ZSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiVXBncmFkZSB0aGUgZXhpc3RpbmcgRGlnaXRhbMKgRGF0YcKgQW5hbHlzaXMgZGFzaGJvYXJkIHNvIGl0IHRlbGxzIGEgZGVlcGVyLCBtb3JlIGFjdGlvbmFibGUgc3RvcnkgZm9yIG1hcmtldGVycyBhbmQgZXhlY3V0aXZlcy4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlVuaWZ5ICYgRW5yaWNoIE1ldHJpY3MifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkFkZCBDUEEsIENWUiwgQU9WLCBMVFYsIGJsZW5kZWQgUk9BUywgYW5kIEN1c3RvbWVy4oCRQWNxdWlzaXRpb24gQ29zdC4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ik5vcm1hbGlzZSBjaGFubmVsIG5hbWVzIGFuZCBjdXJyZW5jaWVzIHNvIGNyb3Nz4oCRcGxhdGZvcm0gdG90YWxzIGFyZSBhY2N1cmF0ZS4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkRyaWxs4oCRRG93biAmIEludGVyYWN0aXZpdHkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkltcGxlbWVudCBnbG9iYWwgZGF0ZSwgY2hhbm5lbCwgYW5kIGNhbXBhaWduIGZpbHRlcnMgKG11bHRp4oCRc2VsZWN0KTsgYWxsb3cgY2xpY2vigJF0aHJvdWdoIGZyb20gaGlnaOKAkWxldmVsIEtQSXMgdG8gZGV0YWlsZWQgdGFibGVzLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiRW5hYmxlIHRvb2x0aXBzIHRoYXQgc3VyZmFjZSBzdGF0aXN0aWNhbCBzaWduaWZpY2FuY2Ugb3IgYW5vbWFsaWVzLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiQXR0cmlidXRpb24gJiBKb3VybmV5IEluc2lnaHRzIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJJbmNsdWRlIGZpcnN04oCRdG91Y2ggdnMuIGxhc3TigJF0b3VjaCB2cy4gTWFya292IG9yIFNoYXBsZXkgYXR0cmlidXRpb24gbW9kZWxzIHVzaW5nIGN1c3RvbWVyX3RvdWNocG9pbnRzLmNzdi4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlZpc3VhbGlzZSB0b3AgY29udmVyc2lvbiBwYXRocyB3aXRoIGFuIGFsbHV2aWFsL1NhbmtleSBkaWFncmFtLiJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIyBFbmhhbmNpbmcgWW91ciBEaWdpdGFsIE1hcmtldGluZyBEYXNoYm9hcmRcblxuSSdsbCBoZWxwIHlvdSB1cGdyYWRlIHlvdXIgZXhpc3RpbmcgRGlnaXRhbCBEYXRhIEFuYWx5c2lzIGRhc2hib2FyZCB3aXRoIG1vcmUgYWR2YW5jZWQgZmVhdHVyZXMsIGJldHRlciBpbnRlcmFjdGl2aXR5LCBhbmQgZGVlcGVyIG1hcmtldGluZyBpbnNpZ2h0cy4gTGV0IG1lIGNyZWF0ZSBhIGNvbXByZWhlbnNpdmUgcGxhbiB0byBpbXBsZW1lbnQgYWxsIHRoZSByZXF1ZXN0ZWQgZW5oYW5jZW1lbnRzLlxuXG4jIyBJbXBsZW1lbnRhdGlvbiBQbGFuXG5cbkknbGwgZW5oYW5jZSB5b3VyIERqYW5nby1iYXNlZCBkYXNoYm9hcmQgd2l0aCB0aGUgZm9sbG93aW5nIGltcHJvdmVtZW50czpcblxuMS4gKipVbmlmaWVkICYgRW5yaWNoZWQgTWV0cmljcyoqXG4yLiAqKkludGVyYWN0aXZlIEZpbHRlcmluZyAmIERyaWxsLURvd24qKlxuMy4gKipBdHRyaWJ1dGlvbiBNb2RlbGluZyAmIEpvdXJuZXkgVmlzdWFsaXphdGlvbioqXG40LiAqKlNlZ21lbnRhdGlvbiAmIENvaG9ydCBBbmFseXNpcyoqXG41LiAqKlByZWRpY3RpdmUgQW5hbHl0aWNzKipcbjYuICoqRGVzaWduIEltcHJvdmVtZW50cyoqXG43LiAqKkRvY3VtZW50YXRpb24gJiBEYXRhIFJlZnJlc2gqKlxuXG5MZXQncyBzdGFydCBpbXBsZW1lbnRpbmcgdGhlc2UgZW5oYW5jZW1lbnRzIG9uZSBieSBvbmU6XG5cbiMjIDEuIEZpcnN0LCBsZXQncyBlbmhhbmNlIHRoZSBkYXRhIGFuYWx5c2lzIG1vZHVsZSB3aXRoIHVuaWZpZWQgbWV0cmljc1xuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJJbXByb3ZlIHRoZSBEaWdpdGFs4oCRTWFya2V0aW5nIERhc2hib2FyZFxuXG5PYmplY3RpdmVcblVwZ3JhZGUgdGhlIGV4aXN0aW5nIERpZ2l0YWzCoERhdGHCoEFuYWx5c2lzIGRhc2hib2FyZCBzbyBpdCB0ZWxscyBhIGRlZXBlciwgbW9yZSBhY3Rpb25hYmxlIHN0b3J5IGZvciBtYXJrZXRlcnMgYW5kIGV4ZWN1dGl2ZXMuXG5cblVuaWZ5ICYgRW5yaWNoIE1ldHJpY3NcblxuQWRkIENQQSwgQ1ZSLCBBT1YsIExUViwgYmxlbmRlZCBST0FTLCBhbmQgQ3VzdG9tZXLigJFBY3F1aXNpdGlvbiBDb3N0LlxuXG5Ob3JtYWxpc2UgY2hhbm5lbCBuYW1lcyBhbmQgY3VycmVuY2llcyBzbyBjcm9zc+KAkXBsYXRmb3JtIHRvdGFscyBhcmUgYWNjdXJhdGUuXG5cbkRyaWxs4oCRRG93biAmIEludGVyYWN0aXZpdHlcblxuSW1wbGVtZW50IGdsb2JhbCBkYXRlLCBjaGFubmVsLCBhbmQgY2FtcGFpZ24gZmlsdGVycyAobXVsdGnigJFzZWxlY3QpOyBhbGxvdyBjbGlja+KAkXRocm91Z2ggZnJvbSBoaWdo4oCRbGV2ZWwgS1BJcyB0byBkZXRhaWxlZCB0YWJsZXMuXG5cbkVuYWJsZSB0b29sdGlwcyB0aGF0IHN1cmZhY2Ugc3RhdGlzdGljYWwgc2lnbmlmaWNhbmNlIG9yIGFub21hbGllcy5cblxuQXR0cmlidXRpb24gJiBKb3VybmV5IEluc2lnaHRzXG5cbkluY2x1ZGUgZmlyc3TigJF0b3VjaCB2cy4gbGFzdOKAkXRvdWNoIHZzLiBNYXJrb3Ygb3IgU2hhcGxleSBhdHRyaWJ1dGlvbiBtb2RlbHMgdXNpbmcgY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2LlxuXG5WaXN1YWxpc2UgdG9wIGNvbnZlcnNpb24gcGF0aHMgd2l0aCBhbiBhbGx1dmlhbC9TYW5rZXkgZGlhZ3JhbS4ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTEsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIyBFbmhhbmNpbmcgWW91ciBEaWdpdGFsIE1hcmtldGluZyBEYXNoYm9hcmRcblxuSSdsbCBoZWxwIHlvdSB1cGdyYWRlIHlvdXIgZXhpc3RpbmcgRGlnaXRhbCBEYXRhIEFuYWx5c2lzIGRhc2hib2FyZCB3aXRoIG1vcmUgYWR2YW5jZWQgZmVhdHVyZXMsIGJldHRlciBpbnRlcmFjdGl2aXR5LCBhbmQgZGVlcGVyIG1hcmtldGluZyBpbnNpZ2h0cy4gTGV0IG1lIGNyZWF0ZSBhIGNvbXByZWhlbnNpdmUgcGxhbiB0byBpbXBsZW1lbnQgYWxsIHRoZSByZXF1ZXN0ZWQgZW5oYW5jZW1lbnRzLlxuXG4jIyBJbXBsZW1lbnRhdGlvbiBQbGFuXG5cbkknbGwgZW5oYW5jZSB5b3VyIERqYW5nby1iYXNlZCBkYXNoYm9hcmQgd2l0aCB0aGUgZm9sbG93aW5nIGltcHJvdmVtZW50czpcblxuMS4gKipVbmlmaWVkICYgRW5yaWNoZWQgTWV0cmljcyoqXG4yLiAqKkludGVyYWN0aXZlIEZpbHRlcmluZyAmIERyaWxsLURvd24qKlxuMy4gKipBdHRyaWJ1dGlvbiBNb2RlbGluZyAmIEpvdXJuZXkgVmlzdWFsaXphdGlvbioqXG40LiAqKlNlZ21lbnRhdGlvbiAmIENvaG9ydCBBbmFseXNpcyoqXG41LiAqKlByZWRpY3RpdmUgQW5hbHl0aWNzKipcbjYuICoqRGVzaWduIEltcHJvdmVtZW50cyoqXG43LiAqKkRvY3VtZW50YXRpb24gJiBEYXRhIFJlZnJlc2gqKlxuXG5MZXQncyBzdGFydCBpbXBsZW1lbnRpbmcgdGhlc2UgZW5oYW5jZW1lbnRzIG9uZSBieSBvbmU6XG5cbiMjIDEuIEZpcnN0LCBsZXQncyBlbmhhbmNlIHRoZSBkYXRhIGFuYWx5c2lzIG1vZHVsZSB3aXRoIHVuaWZpZWQgbWV0cmljc1xuXG5JJ20gc29ycnkuIEkgdHJpZWQgdG8gY2FsbCBhIHRvb2wsIGJ1dCBwcm92aWRlZCB0b28gbGFyZ2Ugb2YgYW4gaW5wdXQuIEhvdyB3b3VsZCB5b3UgbGlrZSB0byBwcm9jZWVkP1xuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiNmE3NTVhZjEtNzM5Zi00ODFmLTgyYTctNjQ4NmEwMmI2NGI3Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI1MGZjNDBkNi0zYjlmLTQxNjctYmIwNi0yZDdiYjI2MDVhODMiLCJyZXF1ZXN0X21lc3NhZ2UiOiJPYmplY3RpdmVcblVwZ3JhZGUgdGhlIGV4aXN0aW5nIERpZ2l0YWzCoERhdGHCoEFuYWx5c2lzIGRhc2hib2FyZCBzbyBpdCB0ZWxscyBhIGRlZXBlciwgbW9yZSBhY3Rpb25hYmxlIHN0b3J5IGZvciBtYXJrZXRlcnMgYW5kIGV4ZWN1dGl2ZXMuXG5cblVuaWZ5ICYgRW5yaWNoIE1ldHJpY3NcblxuQWRkIENQQSwgQ1ZSLCBBT1YsIExUViwgYmxlbmRlZCBST0FTLCBhbmQgQ3VzdG9tZXLigJFBY3F1aXNpdGlvbiBDb3N0LlxuXG5Ob3JtYWxpc2UgY2hhbm5lbCBuYW1lcyBhbmQgY3VycmVuY2llcyBzbyBjcm9zc+KAkXBsYXRmb3JtIHRvdGFscyBhcmUgYWNjdXJhdGUuXG5cbkRyaWxs4oCRRG93biAmIEludGVyYWN0aXZpdHlcblxuSW1wbGVtZW50IGdsb2JhbCBkYXRlLCBjaGFubmVsLCBhbmQgY2FtcGFpZ24gZmlsdGVycyAobXVsdGnigJFzZWxlY3QpOyBhbGxvdyBjbGlja+KAkXRocm91Z2ggZnJvbSBoaWdo4oCRbGV2ZWwgS1BJcyB0byBkZXRhaWxlZCB0YWJsZXMuXG5cbkVuYWJsZSB0b29sdGlwcyB0aGF0IHN1cmZhY2Ugc3RhdGlzdGljYWwgc2lnbmlmaWNhbmNlIG9yIGFub21hbGllcy5cblxuQXR0cmlidXRpb24gJiBKb3VybmV5IEluc2lnaHRzXG5cbkluY2x1ZGUgZmlyc3TigJF0b3VjaCB2cy4gbGFzdOKAkXRvdWNoIHZzLiBNYXJrb3Ygb3IgU2hhcGxleSBhdHRyaWJ1dGlvbiBtb2RlbHMgdXNpbmcgY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2LlxuXG5WaXN1YWxpc2UgdG9wIGNvbnZlcnNpb24gcGF0aHMgd2l0aCBhbiBhbGx1dmlhbC9TYW5rZXkgZGlhZ3JhbS5cblxuU2VnbWVudGF0aW9uICYgQ29ob3J0c1xuXG5Qcm92aWRlIGNvaG9ydCBoZWF0bWFwcyAoc2lnbnVwIG1vbnRoIHZzLiByZXBlYXTigJFwdXJjaGFzZSByYXRlKSBhbmQgc2VnbWVudCB0YWJzIGZvciBIaWdo4oCRVmFsdWUsIFJlZ3VsYXIsIEF04oCRUmlzaywgZXRjLlxuXG5NYWtlIGxveWFsdHnigJF0aWVyIGJhcnMgZHJpbGxhYmxlIHRvIGluZGl2aWR1YWwgY3VzdG9tZXIgbGlzdHMuXG5cblByZWRpY3RpdmUgJiBQcmVzY3JpcHRpdmUgTGF5ZXJzXG5cbkFkZCBhIDMw4oCRZGF5IGZvcmVjYXN0IGZvciBzZXNzaW9ucywgcmV2ZW51ZSwgYW5kIGNvbnZlcnNpb25zIChQcm9waGV0IG9yIEFSSU1BKS5cblxuR2VuZXJhdGUgYnVkZ2V04oCRcmVhbGxvY2F0aW9uIHJlY29tbWVuZGF0aW9ucyBiYXNlZCBvbiBtYXJnaW5hbCBST0FTLlxuXG5EZXNpZ24gRW5oYW5jZW1lbnRzXG5cblVzZSBhIGNvbnNpc3RlbnQgY29sb3VyIHBhbGV0dGUgcGVyIGNoYW5uZWwsIHJlc3BvbnNpdmUgZ3JpZCBsYXlvdXQsIGFuZCBkYXJr4oCRbW9kZSB0b2dnbGUuXG5cblBpbiBLUEkgY2FyZHMgaW4gYSBzdGlja3kgaGVhZGVyOyBzaG93ICUgzpQgdnMuIHByZXZpb3VzIHBlcmlvZC5cblxuRG9jdW1lbnRhdGlvbiAmIFJlZnJlc2hcblxuSW5jbHVkZSBhIFJFQURNRSB0YWIgZGV0YWlsaW5nIGRhdGEgcGlwZWxpbmUsIEtQSSBmb3JtdWxhcywgcmVmcmVzaCBzdGVwcywgYW5kIGNhdmVhdHMuXG5cblBhcmFtZXRlcmlzZSBkYXRhIHBhdGhzIHNvIHRoZSBkYXNoYm9hcmQgcmVmcmVzaGVzIGF1dG9tYXRpY2FsbHkgd2l0aCBuZXcgQ1NWIGRyb3BzLlxuXG5EZWxpdmVyYWJsZVxuVXBkYXRlZCBub3RlYm9vayAob3IgUEJJWC9TdHJlYW1saXQgYXBwKSB3aXRoIHRoZSBhYm92ZSBmZWF0dXJlcywgY2xlYW4gY29kZSwgY29tbWVudHMsIGFuZCBhIG9uZeKAkXBhZ2UgZXhlY3V0aXZlIHN1bW1hcnkgb2YgbmV3IGluc2lnaHRzLiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJPYmplY3RpdmUifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlVwZ3JhZGUgdGhlIGV4aXN0aW5nIERpZ2l0YWzCoERhdGHCoEFuYWx5c2lzIGRhc2hib2FyZCBzbyBpdCB0ZWxscyBhIGRlZXBlciwgbW9yZSBhY3Rpb25hYmxlIHN0b3J5IGZvciBtYXJrZXRlcnMgYW5kIGV4ZWN1dGl2ZXMuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJVbmlmeSAmIEVucmljaCBNZXRyaWNzIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJBZGQgQ1BBLCBDVlIsIEFPViwgTFRWLCBibGVuZGVkIFJPQVMsIGFuZCBDdXN0b21lcuKAkUFjcXVpc2l0aW9uIENvc3QuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJOb3JtYWxpc2UgY2hhbm5lbCBuYW1lcyBhbmQgY3VycmVuY2llcyBzbyBjcm9zc+KAkXBsYXRmb3JtIHRvdGFscyBhcmUgYWNjdXJhdGUuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJEcmlsbOKAkURvd24gJiBJbnRlcmFjdGl2aXR5In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJJbXBsZW1lbnQgZ2xvYmFsIGRhdGUsIGNoYW5uZWwsIGFuZCBjYW1wYWlnbiBmaWx0ZXJzIChtdWx0aeKAkXNlbGVjdCk7IGFsbG93IGNsaWNr4oCRdGhyb3VnaCBmcm9tIGhpZ2jigJFsZXZlbCBLUElzIHRvIGRldGFpbGVkIHRhYmxlcy4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkVuYWJsZSB0b29sdGlwcyB0aGF0IHN1cmZhY2Ugc3RhdGlzdGljYWwgc2lnbmlmaWNhbmNlIG9yIGFub21hbGllcy4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkF0dHJpYnV0aW9uICYgSm91cm5leSBJbnNpZ2h0cyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiSW5jbHVkZSBmaXJzdOKAkXRvdWNoIHZzLiBsYXN04oCRdG91Y2ggdnMuIE1hcmtvdiBvciBTaGFwbGV5IGF0dHJpYnV0aW9uIG1vZGVscyB1c2luZyBjdXN0b21lcl90b3VjaHBvaW50cy5jc3YuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJWaXN1YWxpc2UgdG9wIGNvbnZlcnNpb24gcGF0aHMgd2l0aCBhbiBhbGx1dmlhbC9TYW5rZXkgZGlhZ3JhbS4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlNlZ21lbnRhdGlvbiAmIENvaG9ydHMifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlByb3ZpZGUgY29ob3J0IGhlYXRtYXBzIChzaWdudXAgbW9udGggdnMuIHJlcGVhdOKAkXB1cmNoYXNlIHJhdGUpIGFuZCBzZWdtZW50IHRhYnMgZm9yIEhpZ2jigJFWYWx1ZSwgUmVndWxhciwgQXTigJFSaXNrLCBldGMuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJNYWtlIGxveWFsdHnigJF0aWVyIGJhcnMgZHJpbGxhYmxlIHRvIGluZGl2aWR1YWwgY3VzdG9tZXIgbGlzdHMuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJQcmVkaWN0aXZlICYgUHJlc2NyaXB0aXZlIExheWVycyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiQWRkIGEgMzDigJFkYXkgZm9yZWNhc3QgZm9yIHNlc3Npb25zLCByZXZlbnVlLCBhbmQgY29udmVyc2lvbnMgKFByb3BoZXQgb3IgQVJJTUEpLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiR2VuZXJhdGUgYnVkZ2V04oCRcmVhbGxvY2F0aW9uIHJlY29tbWVuZGF0aW9ucyBiYXNlZCBvbiBtYXJnaW5hbCBST0FTLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiRGVzaWduIEVuaGFuY2VtZW50cyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiVXNlIGEgY29uc2lzdGVudCBjb2xvdXIgcGFsZXR0ZSBwZXIgY2hhbm5lbCwgcmVzcG9uc2l2ZSBncmlkIGxheW91dCwgYW5kIGRhcmvigJFtb2RlIHRvZ2dsZS4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlBpbiBLUEkgY2FyZHMgaW4gYSBzdGlja3kgaGVhZGVyOyBzaG93ICUgzpQgdnMuIHByZXZpb3VzIHBlcmlvZC4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkRvY3VtZW50YXRpb24gJiBSZWZyZXNoIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJJbmNsdWRlIGEgUkVBRE1FIHRhYiBkZXRhaWxpbmcgZGF0YSBwaXBlbGluZSwgS1BJIGZvcm11bGFzLCByZWZyZXNoIHN0ZXBzLCBhbmQgY2F2ZWF0cy4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlBhcmFtZXRlcmlzZSBkYXRhIHBhdGhzIHNvIHRoZSBkYXNoYm9hcmQgcmVmcmVzaGVzIGF1dG9tYXRpY2FsbHkgd2l0aCBuZXcgQ1NWIGRyb3BzLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiRGVsaXZlcmFibGUifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlVwZGF0ZWQgbm90ZWJvb2sgKG9yIFBCSVgvU3RyZWFtbGl0IGFwcCkgd2l0aCB0aGUgYWJvdmUgZmVhdHVyZXMsIGNsZWFuIGNvZGUsIGNvbW1lbnRzLCBhbmQgYSBvbmXigJFwYWdlIGV4ZWN1dGl2ZSBzdW1tYXJ5IG9mIG5ldyBpbnNpZ2h0cy4ifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiMgQ29tcHJlaGVuc2l2ZSBEaWdpdGFsIE1hcmtldGluZyBEYXNoYm9hcmQgRW5oYW5jZW1lbnQgUGxhblxuXG5JJ2xsIGltcGxlbWVudCBhIGNvbXBsZXRlIG92ZXJoYXVsIG9mIHlvdXIgRGlnaXRhbCBEYXRhIEFuYWx5c2lzIGRhc2hib2FyZCB0byBjcmVhdGUgYSBtb3JlIHBvd2VyZnVsLCBpbnNpZ2h0ZnVsLCBhbmQgYWN0aW9uYWJsZSBtYXJrZXRpbmcgYW5hbHl0aWNzIHBsYXRmb3JtLiBMZXQgbWUgYnJlYWsgZG93biB0aGUgaW1wbGVtZW50YXRpb24gcGxhbiBmb3IgZWFjaCByZXF1aXJlbWVudDpcblxuIyMgSW1wbGVtZW50YXRpb24gUGxhblxuXG4jIyMgMS4gRW5oYW5jZWQgRGF0YSBBbmFseXNpcyBNb2R1bGVcbkZpcnN0LCBJJ2xsIGNyZWF0ZSBhbiBlbmhhbmNlZCBkYXRhIGFuYWx5c2lzIG1vZHVsZSB3aXRoIHVuaWZpZWQgbWV0cmljcyBhbmQgbm9ybWFsaXplZCBkYXRhLlxuXG4jIyMgMi4gSW50ZXJhY3RpdmUgRGFzaGJvYXJkIEludGVyZmFjZVxuTmV4dCwgSSdsbCB1cGRhdGUgdGhlIERqYW5nbyB0ZW1wbGF0ZXMgYW5kIHZpZXdzIHRvIHN1cHBvcnQgZmlsdGVyaW5nLCBkcmlsbC1kb3ducywgYW5kIGludGVyYWN0aXZlIHZpc3VhbGl6YXRpb25zLlxuXG4jIyMgMy4gQWR2YW5jZWQgQW5hbHl0aWNzIEZlYXR1cmVzXG5GaW5hbGx5LCBJJ2xsIGltcGxlbWVudCBhdHRyaWJ1dGlvbiBtb2RlbGluZywgY29ob3J0IGFuYWx5c2lzLCBhbmQgcHJlZGljdGl2ZSBmZWF0dXJlcy5cblxuTGV0J3Mgc3RhcnQgd2l0aCB0aGUgaW1wbGVtZW50YXRpb246XG5cbiMjIFN0ZXAgMTogRW5oYW5jZWQgRGF0YSBBbmFseXNpcyBNb2R1bGVcblxuTGV0J3MgY3JlYXRlIGFuIGVuaGFuY2VkIHZlcnNpb24gb2YgeW91ciBkYXRhIGFuYWx5c2lzIG1vZHVsZSB3aXRoIHVuaWZpZWQgbWV0cmljczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiT2JqZWN0aXZlXG5VcGdyYWRlIHRoZSBleGlzdGluZyBEaWdpdGFswqBEYXRhwqBBbmFseXNpcyBkYXNoYm9hcmQgc28gaXQgdGVsbHMgYSBkZWVwZXIsIG1vcmUgYWN0aW9uYWJsZSBzdG9yeSBmb3IgbWFya2V0ZXJzIGFuZCBleGVjdXRpdmVzLlxuXG5VbmlmeSAmIEVucmljaCBNZXRyaWNzXG5cbkFkZCBDUEEsIENWUiwgQU9WLCBMVFYsIGJsZW5kZWQgUk9BUywgYW5kIEN1c3RvbWVy4oCRQWNxdWlzaXRpb24gQ29zdC5cblxuTm9ybWFsaXNlIGNoYW5uZWwgbmFtZXMgYW5kIGN1cnJlbmNpZXMgc28gY3Jvc3PigJFwbGF0Zm9ybSB0b3RhbHMgYXJlIGFjY3VyYXRlLlxuXG5EcmlsbOKAkURvd24gJiBJbnRlcmFjdGl2aXR5XG5cbkltcGxlbWVudCBnbG9iYWwgZGF0ZSwgY2hhbm5lbCwgYW5kIGNhbXBhaWduIGZpbHRlcnMgKG11bHRp4oCRc2VsZWN0KTsgYWxsb3cgY2xpY2vigJF0aHJvdWdoIGZyb20gaGlnaOKAkWxldmVsIEtQSXMgdG8gZGV0YWlsZWQgdGFibGVzLlxuXG5FbmFibGUgdG9vbHRpcHMgdGhhdCBzdXJmYWNlIHN0YXRpc3RpY2FsIHNpZ25pZmljYW5jZSBvciBhbm9tYWxpZXMuXG5cbkF0dHJpYnV0aW9uICYgSm91cm5leSBJbnNpZ2h0c1xuXG5JbmNsdWRlIGZpcnN04oCRdG91Y2ggdnMuIGxhc3TigJF0b3VjaCB2cy4gTWFya292IG9yIFNoYXBsZXkgYXR0cmlidXRpb24gbW9kZWxzIHVzaW5nIGN1c3RvbWVyX3RvdWNocG9pbnRzLmNzdi5cblxuVmlzdWFsaXNlIHRvcCBjb252ZXJzaW9uIHBhdGhzIHdpdGggYW4gYWxsdXZpYWwvU2Fua2V5IGRpYWdyYW0uXG5cblNlZ21lbnRhdGlvbiAmIENvaG9ydHNcblxuUHJvdmlkZSBjb2hvcnQgaGVhdG1hcHMgKHNpZ251cCBtb250aCB2cy4gcmVwZWF04oCRcHVyY2hhc2UgcmF0ZSkgYW5kIHNlZ21lbnQgdGFicyBmb3IgSGlnaOKAkVZhbHVlLCBSZWd1bGFyLCBBdOKAkVJpc2ssIGV0Yy5cblxuTWFrZSBsb3lhbHR54oCRdGllciBiYXJzIGRyaWxsYWJsZSB0byBpbmRpdmlkdWFsIGN1c3RvbWVyIGxpc3RzLlxuXG5QcmVkaWN0aXZlICYgUHJlc2NyaXB0aXZlIExheWVyc1xuXG5BZGQgYSAzMOKAkWRheSBmb3JlY2FzdCBmb3Igc2Vzc2lvbnMsIHJldmVudWUsIGFuZCBjb252ZXJzaW9ucyAoUHJvcGhldCBvciBBUklNQSkuXG5cbkdlbmVyYXRlIGJ1ZGdldOKAkXJlYWxsb2NhdGlvbiByZWNvbW1lbmRhdGlvbnMgYmFzZWQgb24gbWFyZ2luYWwgUk9BUy5cblxuRGVzaWduIEVuaGFuY2VtZW50c1xuXG5Vc2UgYSBjb25zaXN0ZW50IGNvbG91ciBwYWxldHRlIHBlciBjaGFubmVsLCByZXNwb25zaXZlIGdyaWQgbGF5b3V0LCBhbmQgZGFya+KAkW1vZGUgdG9nZ2xlLlxuXG5QaW4gS1BJIGNhcmRzIGluIGEgc3RpY2t5IGhlYWRlcjsgc2hvdyAlIM6UIHZzLiBwcmV2aW91cyBwZXJpb2QuXG5cbkRvY3VtZW50YXRpb24gJiBSZWZyZXNoXG5cbkluY2x1ZGUgYSBSRUFETUUgdGFiIGRldGFpbGluZyBkYXRhIHBpcGVsaW5lLCBLUEkgZm9ybXVsYXMsIHJlZnJlc2ggc3RlcHMsIGFuZCBjYXZlYXRzLlxuXG5QYXJhbWV0ZXJpc2UgZGF0YSBwYXRocyBzbyB0aGUgZGFzaGJvYXJkIHJlZnJlc2hlcyBhdXRvbWF0aWNhbGx5IHdpdGggbmV3IENTViBkcm9wcy5cblxuRGVsaXZlcmFibGVcblVwZGF0ZWQgbm90ZWJvb2sgKG9yIFBCSVgvU3RyZWFtbGl0IGFwcCkgd2l0aCB0aGUgYWJvdmUgZmVhdHVyZXMsIGNsZWFuIGNvZGUsIGNvbW1lbnRzLCBhbmQgYSBvbmXigJFwYWdlIGV4ZWN1dGl2ZSBzdW1tYXJ5IG9mIG5ldyBpbnNpZ2h0cy4ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTEsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIyBDb21wcmVoZW5zaXZlIERpZ2l0YWwgTWFya2V0aW5nIERhc2hib2FyZCBFbmhhbmNlbWVudCBQbGFuXG5cbkknbGwgaW1wbGVtZW50IGEgY29tcGxldGUgb3ZlcmhhdWwgb2YgeW91ciBEaWdpdGFsIERhdGEgQW5hbHlzaXMgZGFzaGJvYXJkIHRvIGNyZWF0ZSBhIG1vcmUgcG93ZXJmdWwsIGluc2lnaHRmdWwsIGFuZCBhY3Rpb25hYmxlIG1hcmtldGluZyBhbmFseXRpY3MgcGxhdGZvcm0uIExldCBtZSBicmVhayBkb3duIHRoZSBpbXBsZW1lbnRhdGlvbiBwbGFuIGZvciBlYWNoIHJlcXVpcmVtZW50OlxuXG4jIyBJbXBsZW1lbnRhdGlvbiBQbGFuXG5cbiMjIyAxLiBFbmhhbmNlZCBEYXRhIEFuYWx5c2lzIE1vZHVsZVxuRmlyc3QsIEknbGwgY3JlYXRlIGFuIGVuaGFuY2VkIGRhdGEgYW5hbHlzaXMgbW9kdWxlIHdpdGggdW5pZmllZCBtZXRyaWNzIGFuZCBub3JtYWxpemVkIGRhdGEuXG5cbiMjIyAyLiBJbnRlcmFjdGl2ZSBEYXNoYm9hcmQgSW50ZXJmYWNlXG5OZXh0LCBJJ2xsIHVwZGF0ZSB0aGUgRGphbmdvIHRlbXBsYXRlcyBhbmQgdmlld3MgdG8gc3VwcG9ydCBmaWx0ZXJpbmcsIGRyaWxsLWRvd25zLCBhbmQgaW50ZXJhY3RpdmUgdmlzdWFsaXphdGlvbnMuXG5cbiMjIyAzLiBBZHZhbmNlZCBBbmFseXRpY3MgRmVhdHVyZXNcbkZpbmFsbHksIEknbGwgaW1wbGVtZW50IGF0dHJpYnV0aW9uIG1vZGVsaW5nLCBjb2hvcnQgYW5hbHlzaXMsIGFuZCBwcmVkaWN0aXZlIGZlYXR1cmVzLlxuXG5MZXQncyBzdGFydCB3aXRoIHRoZSBpbXBsZW1lbnRhdGlvbjpcblxuIyMgU3RlcCAxOiBFbmhhbmNlZCBEYXRhIEFuYWx5c2lzIE1vZHVsZVxuXG5MZXQncyBjcmVhdGUgYW4gZW5oYW5jZWQgdmVyc2lvbiBvZiB5b3VyIGRhdGEgYW5hbHlzaXMgbW9kdWxlIHdpdGggdW5pZmllZCBtZXRyaWNzOlxuXG5JJ20gc29ycnkuIEkgdHJpZWQgdG8gY2FsbCBhIHRvb2wsIGJ1dCBwcm92aWRlZCB0b28gbGFyZ2Ugb2YgYW4gaW5wdXQuIEhvdyB3b3VsZCB5b3UgbGlrZSB0byBwcm9jZWVkP1xuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiYmJjZDhjOGItMDY3Ny00MjBlLTk3NTEtYmVmN2U1MWZmM2M4Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI3YjdhOTgyNS1jZWRmLTQ4YjItYTI5YS1kZDFkMjgzY2JjMGMiLCJyZXF1ZXN0X21lc3NhZ2UiOiJPYmplY3RpdmVcblVwZ3JhZGUgdGhlIGV4aXN0aW5nIERpZ2l0YWzCoERhdGHCoEFuYWx5c2lzIGRhc2hib2FyZCBzbyBpdCB0ZWxscyBhIGRlZXBlciwgbW9yZSBhY3Rpb25hYmxlIHN0b3J5IGZvciBtYXJrZXRlcnMgYW5kIGV4ZWN1dGl2ZXMuXG5cblVuaWZ5ICYgRW5yaWNoIE1ldHJpY3NcblxuQWRkIENQQSwgQ1ZSLCBBT1YsIExUViwgYmxlbmRlZCBST0FTLCBhbmQgQ3VzdG9tZXLigJFBY3F1aXNpdGlvbiBDb3N0LlxuXG5Ob3JtYWxpc2UgY2hhbm5lbCBuYW1lcyBhbmQgY3VycmVuY2llcyBzbyBjcm9zc+KAkXBsYXRmb3JtIHRvdGFscyBhcmUgYWNjdXJhdGUuXG5cbkRyaWxs4oCRRG93biAmIEludGVyYWN0aXZpdHlcblxuSW1wbGVtZW50IGdsb2JhbCBkYXRlLCBjaGFubmVsLCBhbmQgY2FtcGFpZ24gZmlsdGVycyAobXVsdGnigJFzZWxlY3QpOyBhbGxvdyBjbGlja+KAkXRocm91Z2ggZnJvbSBoaWdo4oCRbGV2ZWwgS1BJcyB0byBkZXRhaWxlZCB0YWJsZXMuXG5cbkVuYWJsZSB0b29sdGlwcyB0aGF0IHN1cmZhY2Ugc3RhdGlzdGljYWwgc2lnbmlmaWNhbmNlIG9yIGFub21hbGllcy4iLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoiT2JqZWN0aXZlIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJVcGdyYWRlIHRoZSBleGlzdGluZyBEaWdpdGFswqBEYXRhwqBBbmFseXNpcyBkYXNoYm9hcmQgc28gaXQgdGVsbHMgYSBkZWVwZXIsIG1vcmUgYWN0aW9uYWJsZSBzdG9yeSBmb3IgbWFya2V0ZXJzIGFuZCBleGVjdXRpdmVzLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiVW5pZnkgJiBFbnJpY2ggTWV0cmljcyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiQWRkIENQQSwgQ1ZSLCBBT1YsIExUViwgYmxlbmRlZCBST0FTLCBhbmQgQ3VzdG9tZXLigJFBY3F1aXNpdGlvbiBDb3N0LiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiTm9ybWFsaXNlIGNoYW5uZWwgbmFtZXMgYW5kIGN1cnJlbmNpZXMgc28gY3Jvc3PigJFwbGF0Zm9ybSB0b3RhbHMgYXJlIGFjY3VyYXRlLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiRHJpbGzigJFEb3duICYgSW50ZXJhY3Rpdml0eSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiSW1wbGVtZW50IGdsb2JhbCBkYXRlLCBjaGFubmVsLCBhbmQgY2FtcGFpZ24gZmlsdGVycyAobXVsdGnigJFzZWxlY3QpOyBhbGxvdyBjbGlja+KAkXRocm91Z2ggZnJvbSBoaWdo4oCRbGV2ZWwgS1BJcyB0byBkZXRhaWxlZCB0YWJsZXMuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJFbmFibGUgdG9vbHRpcHMgdGhhdCBzdXJmYWNlIHN0YXRpc3RpY2FsIHNpZ25pZmljYW5jZSBvciBhbm9tYWxpZXMuIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJJ2xsIGhlbHAgeW91IGVuaGFuY2UgeW91ciBEaWdpdGFsIE1hcmtldGluZyBEYXNoYm9hcmQgd2l0aCB1bmlmaWVkIG1ldHJpY3MsIGVucmljaGVkIEtQSXMsIGFuZCBpbnRlcmFjdGl2ZSBmZWF0dXJlcy4gTGV0J3Mgc3RhcnQgYnkgaW1wbGVtZW50aW5nIHRoZXNlIGltcHJvdmVtZW50cyBzdGVwIGJ5IHN0ZXAuXG5cbiMjIFN0ZXAgMTogRW5oYW5jZWQgRGF0YSBBbmFseXNpcyBNb2R1bGUgd2l0aCBVbmlmaWVkIE1ldHJpY3NcblxuRmlyc3QsIEknbGwgY3JlYXRlIGFuIGVuaGFuY2VkIHZlcnNpb24gb2YgeW91ciBkYXRhIGFuYWx5c2lzIG1vZHVsZSB0aGF0IGluY2x1ZGVzOlxuLSBOb3JtYWxpemVkIGNoYW5uZWwgbmFtZXMgYWNyb3NzIHBsYXRmb3Jtc1xuLSBBZGRpdGlvbmFsIG1hcmtldGluZyBtZXRyaWNzIChDUEEsIENWUiwgQU9WLCBMVFYsIGJsZW5kZWQgUk9BUywgQ0FDKVxuLSBTdXBwb3J0IGZvciBmaWx0ZXJpbmcgYnkgZGF0ZSwgY2hhbm5lbCwgYW5kIGNhbXBhaWduXG5cbkxldCdzIGNyZWF0ZSB0aGlzIGVuaGFuY2VkIG1vZHVsZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiT2JqZWN0aXZlXG5VcGdyYWRlIHRoZSBleGlzdGluZyBEaWdpdGFswqBEYXRhwqBBbmFseXNpcyBkYXNoYm9hcmQgc28gaXQgdGVsbHMgYSBkZWVwZXIsIG1vcmUgYWN0aW9uYWJsZSBzdG9yeSBmb3IgbWFya2V0ZXJzIGFuZCBleGVjdXRpdmVzLlxuXG5VbmlmeSAmIEVucmljaCBNZXRyaWNzXG5cbkFkZCBDUEEsIENWUiwgQU9WLCBMVFYsIGJsZW5kZWQgUk9BUywgYW5kIEN1c3RvbWVy4oCRQWNxdWlzaXRpb24gQ29zdC5cblxuTm9ybWFsaXNlIGNoYW5uZWwgbmFtZXMgYW5kIGN1cnJlbmNpZXMgc28gY3Jvc3PigJFwbGF0Zm9ybSB0b3RhbHMgYXJlIGFjY3VyYXRlLlxuXG5EcmlsbOKAkURvd24gJiBJbnRlcmFjdGl2aXR5XG5cbkltcGxlbWVudCBnbG9iYWwgZGF0ZSwgY2hhbm5lbCwgYW5kIGNhbXBhaWduIGZpbHRlcnMgKG11bHRp4oCRc2VsZWN0KTsgYWxsb3cgY2xpY2vigJF0aHJvdWdoIGZyb20gaGlnaOKAkWxldmVsIEtQSXMgdG8gZGV0YWlsZWQgdGFibGVzLlxuXG5FbmFibGUgdG9vbHRpcHMgdGhhdCBzdXJmYWNlIHN0YXRpc3RpY2FsIHNpZ25pZmljYW5jZSBvciBhbm9tYWxpZXMuIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjExLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6IkknbGwgaGVscCB5b3UgZW5oYW5jZSB5b3VyIERpZ2l0YWwgTWFya2V0aW5nIERhc2hib2FyZCB3aXRoIHVuaWZpZWQgbWV0cmljcywgZW5yaWNoZWQgS1BJcywgYW5kIGludGVyYWN0aXZlIGZlYXR1cmVzLiBMZXQncyBzdGFydCBieSBpbXBsZW1lbnRpbmcgdGhlc2UgaW1wcm92ZW1lbnRzIHN0ZXAgYnkgc3RlcC5cblxuIyMgU3RlcCAxOiBFbmhhbmNlZCBEYXRhIEFuYWx5c2lzIE1vZHVsZSB3aXRoIFVuaWZpZWQgTWV0cmljc1xuXG5GaXJzdCwgSSdsbCBjcmVhdGUgYW4gZW5oYW5jZWQgdmVyc2lvbiBvZiB5b3VyIGRhdGEgYW5hbHlzaXMgbW9kdWxlIHRoYXQgaW5jbHVkZXM6XG4tIE5vcm1hbGl6ZWQgY2hhbm5lbCBuYW1lcyBhY3Jvc3MgcGxhdGZvcm1zXG4tIEFkZGl0aW9uYWwgbWFya2V0aW5nIG1ldHJpY3MgKENQQSwgQ1ZSLCBBT1YsIExUViwgYmxlbmRlZCBST0FTLCBDQUMpXG4tIFN1cHBvcnQgZm9yIGZpbHRlcmluZyBieSBkYXRlLCBjaGFubmVsLCBhbmQgY2FtcGFpZ25cblxuTGV0J3MgY3JlYXRlIHRoaXMgZW5oYW5jZWQgbW9kdWxlOlxuXG5JJ20gc29ycnkuIEkgdHJpZWQgdG8gY2FsbCBhIHRvb2wsIGJ1dCBwcm92aWRlZCB0b28gbGFyZ2Ugb2YgYW4gaW5wdXQuIEhvdyB3b3VsZCB5b3UgbGlrZSB0byBwcm9jZWVkP1xuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiZjBjMDQyZWQtOTEwNC00NmM5LWEwOTAtNWMxNTM1NGJjZmQ0Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIyYzlkYjY3YS00ODA4LTRhZjktYTkyNi1kMGFlYWYwZTcxMzUiLCJyZXF1ZXN0X21lc3NhZ2UiOiJ3aGF0IGRvIHlvdSBtZWFuIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IndoYXQgZG8geW91IG1lYW4ifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkkgYXBvbG9naXplIGZvciB0aGUgY29uZnVzaW9uLiBMZXQgbWUgY2xhcmlmeSB3aGF0IEknbSBwcm9wb3NpbmcgdG8gZG86XG5cbkknbGwgZW5oYW5jZSB5b3VyIGV4aXN0aW5nIERpZ2l0YWwgRGF0YSBBbmFseXNpcyBkYXNoYm9hcmQgYnkgaW1wbGVtZW50aW5nIHRoZSBzcGVjaWZpYyBpbXByb3ZlbWVudHMgeW91IHJlcXVlc3RlZDpcblxuMS4gKipVbmlmeSAmIEVucmljaCBNZXRyaWNzKio6XG4gICAtIEFkZCBuZXcgbWFya2V0aW5nIG1ldHJpY3MgbGlrZSBDUEEgKENvc3QgUGVyIEFjcXVpc2l0aW9uKSwgQ1ZSIChDb252ZXJzaW9uIFJhdGUpLCBBT1YgKEF2ZXJhZ2UgT3JkZXIgVmFsdWUpLCBMVFYgKExpZmV0aW1lIFZhbHVlKSwgYmxlbmRlZCBST0FTIChSZXR1cm4gb24gQWQgU3BlbmQpLCBhbmQgQ0FDIChDdXN0b21lciBBY3F1aXNpdGlvbiBDb3N0KVxuICAgLSBOb3JtYWxpemUgY2hhbm5lbCBuYW1lcyBhY3Jvc3MgZGlmZmVyZW50IHBsYXRmb3JtcyBzbyB0aGV5J3JlIGNvbnNpc3RlbnQgKGUuZy4sIFwiR29vZ2xlIEFkc1wiIHZzIFwiR29vZ2xlIENQQ1wiIHZzIFwiR29vZ2xlXCIpXG4gICAtIEVuc3VyZSBjdXJyZW5jaWVzIGFyZSBjb25zaXN0ZW50IGZvciBhY2N1cmF0ZSBjcm9zcy1wbGF0Zm9ybSB0b3RhbHNcblxuMi4gKipEcmlsbC1Eb3duICYgSW50ZXJhY3Rpdml0eSoqOlxuICAgLSBBZGQgZ2xvYmFsIGZpbHRlcnMgZm9yIGRhdGUgcmFuZ2VzLCBjaGFubmVscywgYW5kIGNhbXBhaWduc1xuICAgLSBFbmFibGUgY2xpY2stdGhyb3VnaCBmdW5jdGlvbmFsaXR5IGZyb20gaGlnaC1sZXZlbCBLUElzIHRvIGRldGFpbGVkIGRhdGEgdGFibGVzXG4gICAtIEFkZCB0b29sdGlwcyB0aGF0IGhpZ2hsaWdodCBzdGF0aXN0aWNhbCBzaWduaWZpY2FuY2Ugb3IgYW5vbWFsaWVzIGluIHRoZSBkYXRhXG5cbldvdWxkIHlvdSBsaWtlIG1lIHRvIHN0YXJ0IGltcGxlbWVudGluZyB0aGVzZSBjaGFuZ2VzIHRvIHlvdXIgRGphbmdvIHByb2plY3Q/IEknbGwgYmVnaW4gYnkgZW5oYW5jaW5nIHRoZSBkYXRhIGFuYWx5c2lzIG1vZHVsZSB0byBpbmNsdWRlIHRoZXNlIG5ldyBtZXRyaWNzIGFuZCBub3JtYWxpemF0aW9uIGZlYXR1cmVzLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJ3aGF0IGRvIHlvdSBtZWFuIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjExLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6IkkgYXBvbG9naXplIGZvciB0aGUgY29uZnVzaW9uLiBMZXQgbWUgY2xhcmlmeSB3aGF0IEknbSBwcm9wb3NpbmcgdG8gZG86XG5cbkknbGwgZW5oYW5jZSB5b3VyIGV4aXN0aW5nIERpZ2l0YWwgRGF0YSBBbmFseXNpcyBkYXNoYm9hcmQgYnkgaW1wbGVtZW50aW5nIHRoZSBzcGVjaWZpYyBpbXByb3ZlbWVudHMgeW91IHJlcXVlc3RlZDpcblxuMS4gKipVbmlmeSAmIEVucmljaCBNZXRyaWNzKio6XG4gICAtIEFkZCBuZXcgbWFya2V0aW5nIG1ldHJpY3MgbGlrZSBDUEEgKENvc3QgUGVyIEFjcXVpc2l0aW9uKSwgQ1ZSIChDb252ZXJzaW9uIFJhdGUpLCBBT1YgKEF2ZXJhZ2UgT3JkZXIgVmFsdWUpLCBMVFYgKExpZmV0aW1lIFZhbHVlKSwgYmxlbmRlZCBST0FTIChSZXR1cm4gb24gQWQgU3BlbmQpLCBhbmQgQ0FDIChDdXN0b21lciBBY3F1aXNpdGlvbiBDb3N0KVxuICAgLSBOb3JtYWxpemUgY2hhbm5lbCBuYW1lcyBhY3Jvc3MgZGlmZmVyZW50IHBsYXRmb3JtcyBzbyB0aGV5J3JlIGNvbnNpc3RlbnQgKGUuZy4sIFwiR29vZ2xlIEFkc1wiIHZzIFwiR29vZ2xlIENQQ1wiIHZzIFwiR29vZ2xlXCIpXG4gICAtIEVuc3VyZSBjdXJyZW5jaWVzIGFyZSBjb25zaXN0ZW50IGZvciBhY2N1cmF0ZSBjcm9zcy1wbGF0Zm9ybSB0b3RhbHNcblxuMi4gKipEcmlsbC1Eb3duICYgSW50ZXJhY3Rpdml0eSoqOlxuICAgLSBBZGQgZ2xvYmFsIGZpbHRlcnMgZm9yIGRhdGUgcmFuZ2VzLCBjaGFubmVscywgYW5kIGNhbXBhaWduc1xuICAgLSBFbmFibGUgY2xpY2stdGhyb3VnaCBmdW5jdGlvbmFsaXR5IGZyb20gaGlnaC1sZXZlbCBLUElzIHRvIGRldGFpbGVkIGRhdGEgdGFibGVzXG4gICAtIEFkZCB0b29sdGlwcyB0aGF0IGhpZ2hsaWdodCBzdGF0aXN0aWNhbCBzaWduaWZpY2FuY2Ugb3IgYW5vbWFsaWVzIGluIHRoZSBkYXRhXG5cbldvdWxkIHlvdSBsaWtlIG1lIHRvIHN0YXJ0IGltcGxlbWVudGluZyB0aGVzZSBjaGFuZ2VzIHRvIHlvdXIgRGphbmdvIHByb2plY3Q/IEknbGwgYmVnaW4gYnkgZW5oYW5jaW5nIHRoZSBkYXRhIGFuYWx5c2lzIG1vZHVsZSB0byBpbmNsdWRlIHRoZXNlIG5ldyBtZXRyaWNzIGFuZCBub3JtYWxpemF0aW9uIGZlYXR1cmVzLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiYTRkNGU3YTgtNWU5NC00MjQ2LWJhZGItMzU3MjJjMDViZTllIiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhYTEwZWNmNC02ZTE2LTRmMGItYTBiNC0yYTc2MTlkNTQ5MjEiLCJyZXF1ZXN0X21lc3NhZ2UiOiJ5ZXMiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoieWVzIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJHcmVhdCEgTGV0J3Mgc3RhcnQgaW1wbGVtZW50aW5nIHRoZSBlbmhhbmNlZCBkYXNoYm9hcmQuIEknbGwgYmVnaW4gYnkgdXBkYXRpbmcgdGhlIGRhdGEgYW5hbHlzaXMgbW9kdWxlIHRvIGluY2x1ZGUgdW5pZmllZCBtZXRyaWNzIGFuZCBub3JtYWxpemF0aW9uLlxuXG5GaXJzdCwgbGV0J3MgY3JlYXRlIGFuIGVuaGFuY2VkIHZlcnNpb24gb2YgeW91ciBkYXRhIGFuYWx5c2lzIG1vZHVsZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoieWVzIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcyIsImZvbGRlclJvb3QiOiIvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjExLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMifX19XSwicmVzcG9uc2VfdGV4dCI6IkdyZWF0ISBMZXQncyBzdGFydCBpbXBsZW1lbnRpbmcgdGhlIGVuaGFuY2VkIGRhc2hib2FyZC4gSSdsbCBiZWdpbiBieSB1cGRhdGluZyB0aGUgZGF0YSBhbmFseXNpcyBtb2R1bGUgdG8gaW5jbHVkZSB1bmlmaWVkIG1ldHJpY3MgYW5kIG5vcm1hbGl6YXRpb24uXG5cbkZpcnN0LCBsZXQncyBjcmVhdGUgYW4gZW5oYW5jZWQgdmVyc2lvbiBvZiB5b3VyIGRhdGEgYW5hbHlzaXMgbW9kdWxlOlxuXG5JJ20gc29ycnkuIEkgdHJpZWQgdG8gY2FsbCBhIHRvb2wsIGJ1dCBwcm92aWRlZCB0b28gbGFyZ2Ugb2YgYW4gaW5wdXQuIEhvdyB3b3VsZCB5b3UgbGlrZSB0byBwcm9jZWVkP1xuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX1dLCJmZWVkYmFja1N0YXRlcyI6eyJ0ZW1wLWZlLTBmNTY5N2IzLTc2MTItNGI3YS1iNjA1LTU5Y2RlMWZjYzQwNiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZjkwNTQxZTQtNDA2ZC00ZTZmLTg2N2QtYzk5NjhiOThhMTFlIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS02MjVlZGJlZS1kZTcxLTRjYTItYjg1MC0yMzc3M2Y2NzlmODciOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWE2YzVjMDc5LTllYTctNGY2ZS04NDRmLTVkNDkzODJkMDZlZiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOGZkZWE3NjEtZTk5NS00NzRkLThmYjQtMGNjM2Y1Nzc4MWMwIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS04Yzg0NzBkYi1hMzg5LTQyNTEtYjRlNy04NGVhYTJhNDdhYzIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTY0ZDVkYzFkLWUzZjItNDE0Yi04NTM5LTIwYWQxNGZhOTM5NCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYmRmMzFhMDgtZjZjOS00ZGNmLWE1OTEtNmFmZWFiZjhkN2IzIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1kNTVhNjNjMC01ZWU2LTQ0ZGItODdjNy05NDdhNWUyMzY2YTAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTA2ZDZjYTY5LTNkZDEtNDk4Yi1iMGIxLTNmYzEwNTkzYWI5MiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZDFjOTU4ZjMtMmUxYy00NGYyLTk3MDItMzljNmQ1Yzk0ZWFjIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1mMjA3NzU4Yy03ZjQ3LTQ1YWItOWYxZC1iODIxYzQxZjllMDQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTExYTAxNWEyLWFmZWQtNDc1OC04NDdiLWNjYjcwYjNhMDIxYyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOGZjMGI4OTctM2YzOS00ZjU2LWJjMjYtNzFmNjkyZWE4MGFjIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0yNDlmMTM4Ni1jMTEyLTQ2YTQtOWFmZC1mNzcwMDZiNzY0NjUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTFjOTQ3YWJhLWJhNDItNDhmNi1hNDZhLWYzZmQ0NjcwNGJkYiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZWFiMjlhMmYtZWM5Mi00MmI2LWI2NjktYjI3MTk1YmVhODU4Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1jNjA3OGY3MC1hZDhjLTQ0Y2YtYjM5NS1iMjkxMTU3ODliNzQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTkyODIwNTg0LTQ0ZDYtNDQ1ZC1iZjI1LTAwYzM0NGYzZmFjZSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNmJjNmU0ODYtN2MyMC00ZGQ1LTgxNmYtYTlkNzk1N2VlZmM1Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1jNTc4MjRmOC00OGU3LTQ4NzMtYWVhOC1hNjNjNmM5NThmZDEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTQ4YjQxY2EyLTExOGUtNDZiMi05MzY4LTc5MDU4YzYwZDVjOSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNGM3OTQ5YTAtMGY3Mi00NzdiLTljYTUtYTdiMTNmOTVlNzY5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS05NjZjMWExOC04MTA4LTRjMzUtYjgzMC1lYmIwZTUyZTBiNGYiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTBjNDdjYWFmLTRlNzYtNDExNS05Y2EzLWJmNzY2NWExMWYxNCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtM2Q3MTc3NGQtMDAxMy00OWYzLTliYWMtNjJlMGEyOTY4MTczIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1iNGMwY2MxZC04ODZmLTRiZTctOTQ2My1mMWViYThhN2Q2ZTAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWVjNTk4MDgyLTdkZDktNDg4OS04NmI4LTM5NTYyZDFkNTQ2MiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYzlmMDBjOTUtMWU2OS00ZDI2LTkyNDUtMjQwNzI2MWFiZjc0Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1iZmRlZTE3My05NGNkLTRiMDctYWMzYy0wNDg0ZjBhOTNlNjAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTVkM2Q4Y2RkLTFlNDAtNGUzYS04ZjU4LTM3OTEyYWM5MTlhOCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNDIzODhjMzAtOTJiZC00M2I1LThiMTQtZjk4MTY4MDNmYzg2Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0xM2RiMGRmMS01NDIwLTQ3NTctOTM1YS04M2M5MmRmOTQyYmQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTk5ZWNkNjFlLTBhNzMtNDIxNi05YjYwLTg4MmVhMTFlNDQ4NCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYWI0MTZjNWMtYTE5Ny00NDFhLWFlOTYtZWVkMTQ1MTdmZDExIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1lOTQ2MzlhZC04NTNlLTQ5NGMtOTUzYS1iMmU2MWQxN2U5NDUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTNkOGU3M2EyLTc0ZGQtNDczNC05ZmI5LTc3YjA4OTQ3NTA0NSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNWYyNzFlMWMtZjlhMi00MDEwLThhNTgtZDZlZjJjMWExNzFhIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1jZWFhOTdkYS05YjM5LTQ4ZDUtOGFjZi05ZWViNjJhYmZlNzAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTFhYTg4YzllLTVhODYtNDBiMS05ZWY5LTkwZDMyNjFmNTAwMSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtM2Y0N2RkYjktMDA0YS00ZTljLTlhYWQtMjdlNmU5MDRjZDZlIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wOTlhZTAwZi04OGQzLTRiNzYtODA5OC05M2NlMWEyMGUzMTkiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWVjYmUxMmRiLTRiMDgtNDgwMy1hMGMwLWFkNWJmMDc5YjgzOSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNWEwZmI4NDItOTIzMS00NDg2LWI1NDAtODJiY2UyZjM2NTFhIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS04ZDZmYmYyMi1hNjhmLTQ4YTItYWZkYi1hMDMxZDA5MTdlMzgiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWQ4ZTZlMzU3LWE5ODMtNDY2Zi04MjI3LTI2M2Q1NjBiM2RlMyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZWIxNjJhZGItNGQzMC00MTUwLTg5ODctMTEzMWI2YzZmNzkwIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS04ZDRmMzkyOC1lMmU5LTQ3NzItOTNhMS00OTE5YzY5OWFiOGMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTY2NjAzOTU4LWM1YzgtNGY4ZC1hNmNjLWQ3MTMwMWI4N2IyZSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYjVkZWNiNDItOWM0NC00ODcyLTg2NjEtMDU5OWM0NzU4NzQxIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wNWU0ZmFmMC0zZWJiLTRlMDktOGQwMi1lN2FmMTA3ZTY0MmIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9fSwidG9vbFVzZVN0YXRlcyI6eyI4MWNmODQ4Yy1mYTA0LTQwNDMtYjY5ZS1hNjMzZDllMDllZjA7dG9vbHVfdnJ0eF8wMTRjYlpITGZXV3RIeGVkRlNIdFVFWW4iOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvZ29vZ2xlX2FuYWx5dGljc19kYXRhLmNzdlxuZGF0ZSxzb3VyY2UsbWVkaXVtLGNoYW5uZWxfZ3JvdXBpbmcsZGV2aWNlX2NhdGVnb3J5LGxhbmRpbmdfcGFnZSxzZXNzaW9ucyxuZXdfdXNlcnMsYm91bmNlX3JhdGUscGFnZXNfcGVyX3Nlc3Npb24sYXZnX3Nlc3Npb25fZHVyYXRpb24sdHJhbnNhY3Rpb25zLHJldmVudWUsY29udmVyc2lvbl9yYXRlXG4yMDI0LTAxLTAxLGdvb2dsZSxvcmdhbmljLE9yZ2FuaWMgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDM0NSwxODcsMC4zMiwzLjUsMjQ1LDEyLDg0MC4wMCwwLjAzNDhcbjIwMjQtMDEtMDEsZ29vZ2xlLGNwYyxQYWlkIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywxODcsOTgsMC4yOCw0LjIsMzEyLDgsNTYwLjAwLDAuMDQyOFxuMjAyNC0wMS0wMSxmYWNlYm9vayxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTU2LDg3LDAuMzUsMi44LDE5OCw1LDM1MC4wMCwwLjAzMjFcbjIwMjQtMDEtMDEsaW5zdGFncmFtLHJlZmVycmFsLFNvY2lhbCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywxMjMsNzYsMC4zOCwyLjUsMTc2LDMsMjEwLjAwLDAuMDI0NFxuMjAyNC0wMS0wMSxkaXJlY3Qsbm9uZSxEaXJlY3QsZGVza3RvcCwvLDIzNCwxMTIsMC4yNSw1LjYsNDIzLDE1LDEwNTAuMDAsMC4wNjQxXG4yMDI0LTAxLTAxLGdvb2dsZSxvcmdhbmljLE9yZ2FuaWMgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLDI2NywxNDMsMC4zNCwzLjIsMjMyLDksNjMwLjAwLDAuMDMzN1xuMjAyNC0wMS0wMSxnb29nbGUsY3BjLFBhaWQgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLDEzMiw3NiwwLjMwLDMuOCwyODcsNSwzNTAuMDAsMC4wMzc5XG4yMDI0LTAxLTAxLGZhY2Vib29rLHJlZmVycmFsLFNvY2lhbCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cyw5OCw1NCwwLjM3LDIuNiwxODcsMiwxNDAuMDAsMC4wMjA0XG4yMDI0LTAxLTAyLGdvb2dsZSxvcmdhbmljLE9yZ2FuaWMgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDM3OCwyMDEsMC4zMCwzLjcsMjU2LDE1LDEwNTAuMDAsMC4wMzk3XG4yMDI0LTAxLTAyLGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMjAxLDExMiwwLjI2LDQuNSwzMjQsMTAsNzAwLjAwLDAuMDQ5OFxuMjAyNC0wMS0wMixmYWNlYm9vayxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTc2LDk4LDAuMzMsMy4wLDIxMCw3LDQ5MC4wMCwwLjAzOThcbjIwMjQtMDEtMDIsaW5zdGFncmFtLHJlZmVycmFsLFNvY2lhbCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywxNDUsODcsMC4zNiwyLjcsMTg5LDUsMzUwLjAwLDAuMDM0NVxuMjAyNC0wMS0wMixkaXJlY3Qsbm9uZSxEaXJlY3QsZGVza3RvcCwvLDI1NiwxMzIsMC4yMyw1LjgsNDQ1LDE4LDEyNjAuMDAsMC4wNzAzXG4yMDI0LTAxLTAyLGdvb2dsZSxvcmdhbmljLE9yZ2FuaWMgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLDI4OSwxNTYsMC4zMiwzLjQsMjQ1LDExLDc3MC4wMCwwLjAzODFcbjIwMjQtMDEtMDIsZ29vZ2xlLGNwYyxQYWlkIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywxNTYsODksMC4yOCw0LjAsMjk4LDcsNDkwLjAwLDAuMDQ0OVxuMjAyNC0wMS0wMixmYWNlYm9vayxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsMTEyLDY3LDAuMzUsMi44LDE5OCw0LDI4MC4wMCwwLjAzNTdcbjIwMjQtMDEtMDMsZ29vZ2xlLG9yZ2FuaWMsT3JnYW5pYyBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsNDEyLDIyMywwLjI4LDMuOSwyNjcsMTgsMTI2MC4wMCwwLjA0MzdcbjIwMjQtMDEtMDMsZ29vZ2xlLGNwYyxQYWlkIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywyMjMsMTMyLDAuMjQsNC43LDMzNiwxMyw5MTAuMDAsMC4wNTgzXG4uLi5cbjIwMjQtMDEtMDUsZGlyZWN0LG5vbmUsRGlyZWN0LGRlc2t0b3AsLywzMjMsMTk4LDAuMTcsNi40LDUxMiwyOSwyMDMwLjAwLDAuMDg5OFxuMjAyNC0wMS0wNSxnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywzNTYsMTg5LDAuMjYsNC4wLDI3OCwyMCwxNDAwLjAwLDAuMDU2MlxuMjAyNC0wMS0wNSxnb29nbGUsY3BjLFBhaWQgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLDIyMywxMzIsMC4yMiw0LjYsMzMyLDE0LDk4MC4wMCwwLjA2MjhcbjIwMjQtMDEtMDUsZmFjZWJvb2sscmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLDE3NiwxMDEsMC4yOSwzLjQsMjMyLDEwLDcwMC4wMCwwLjA1Njhcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvY3VzdG9tZXJfZGF0YS5jc3ZcbmN1c3RvbWVyX2lkLGZpcnN0X25hbWUsbGFzdF9uYW1lLGVtYWlsLGdlbmRlcixhZ2UsY2l0eSxzdGF0ZSxzaWdudXBfZGF0ZSxjdXN0b21lcl9zZWdtZW50LHRvdGFsX29yZGVycyx0b3RhbF9zcGVuZCxhdmdfb3JkZXJfdmFsdWUsbGFzdF9wdXJjaGFzZV9kYXRlLGRheXNfc2luY2VfbGFzdF9wdXJjaGFzZSxmYXZvcml0ZV9jYXRlZ29yeSxmYXZvcml0ZV9wcm9kdWN0LGVtYWlsX3N1YnNjcmliZXIsbW9iaWxlX2FwcF91c2VyLGxveWFsdHlfdGllclxuMTAwMSxKb2huLFNtaXRoLGpvaG4uc21pdGhAZW1haWwuY29tLE0sMzQsTmV3IFlvcmssTlksMjAyMy0wMS0xNSxIaWdoIFZhbHVlLDEyLDEyNTAuNDUsMTA0LjIwLDIwMjQtMDEtMDIsNSxNZW4ncyBTaGlydHMsU3VtbWVyIExpbmVuIFNoaXJ0LFRSVUUsVFJVRSxHb2xkXG4xMDAyLEVtaWx5LEpvaG5zb24sZW1pbHkuakBlbWFpbC5jb20sRiwyOSxMb3MgQW5nZWxlcyxDQSwyMDIzLTAyLTAzLFJlZ3VsYXIsOCw2NDUuNzUsODAuNzIsMjAyNC0wMS0wMyw0LFdvbWVuJ3MgRHJlc3NlcyxGbG9yYWwgU3VtbWVyIERyZXNzLFRSVUUsVFJVRSxTaWx2ZXJcbjEwMDMsTWljaGFlbCxXaWxsaWFtcyxtLndpbGxpYW1zQGVtYWlsLmNvbSxNLDQyLENoaWNhZ28sSUwsMjAyMy0wMS0yMixIaWdoIFZhbHVlLDE1LDE4NzYuMzAsMTI1LjA5LDIwMjQtMDEtMDEsNixNZW4ncyBPdXRlcndlYXIsV2ludGVyIENvYXQgQ2xhc3NpYyxUUlVFLEZBTFNFLEdvbGRcbjEwMDQsSmVzc2ljYSxCcm93bixqZXNzLmJyb3duQGVtYWlsLmNvbSxGLDMxLEhvdXN0b24sVFgsMjAyMy0wMy0xMSxSZWd1bGFyLDYsNDg3LjIwLDgxLjIwLDIwMjQtMDEtMDQsMyxXb21lbidzIEFjY2Vzc29yaWVzLFNwcmluZyBTY2FyZiBTZXQsRkFMU0UsVFJVRSxCcm9uemVcbjEwMDUsRGF2aWQsSm9uZXMsZGF2aWQuakBlbWFpbC5jb20sTSwyNyxQaGlsYWRlbHBoaWEsUEEsMjAyMy0wMi0xOCxBdCBSaXNrLDMsMjEwLjQ1LDcwLjE1LDIwMjMtMTEtMTUsNTMsTWVuJ3MgU2hpcnRzLEJhc2ljIFRlZSAzLVBhY2ssVFJVRSxGQUxTRSxCcm9uemVcbjEwMDYsU2FyYWgsR2FyY2lhLHMuZ2FyY2lhQGVtYWlsLmNvbSxGLDM4LFBob2VuaXgsQVosMjAyMy0wMS0wNSxIaWdoIFZhbHVlLDE4LDIxNDUuNjAsMTE5LjIwLDIwMjQtMDEtMDIsNSxXb21lbidzIERyZXNzZXMsU3VtbWVyIE1heGkgRHJlc3MsVFJVRSxUUlVFLFBsYXRpbnVtXG4xMDA3LFJvYmVydCxNaWxsZXIscm9iLm1pbGxlckBlbWFpbC5jb20sTSw0NSxTYW4gQW50b25pbyxUWCwyMDIzLTA0LTAyLFJlZ3VsYXIsNyw1OTguNDAsODUuNDksMjAyMy0xMi0xMiwyNixNZW4ncyBBY2Nlc3NvcmllcyxMZWF0aGVyIEJlbHQsRkFMU0UsRkFMU0UsU2lsdmVyXG4xMDA4LEplbm5pZmVyLERhdmlzLGplbi5kYXZpc0BlbWFpbC5jb20sRiwzMyxTYW4gRGllZ28sQ0EsMjAyMy0wMi0yNyxSZWd1bGFyLDksNzIzLjE1LDgwLjM1LDIwMjQtMDEtMDUsMixXb21lbidzIE91dGVyd2VhcixTcHJpbmcgSmFja2V0LFRSVUUsVFJVRSxTaWx2ZXJcbjEwMDksSmFtZXMsUm9kcmlndWV6LGoucm9kcmlndWV6QGVtYWlsLmNvbSxNLDI5LERhbGxhcyxUWCwyMDIzLTAzLTE1LEF0IFJpc2ssNCwyNjcuODAsNjYuOTUsMjAyMy0xMS0wMiw2NixNZW4ncyBTaGlydHMsR3JhcGhpYyBUZWUgQ29sbGVjdGlvbixGQUxTRSxUUlVFLEJyb256ZVxuMTAxMCxMaXNhLE1hcnRpbmV6LGxpc2EubUBlbWFpbC5jb20sRiwzNixTYW4gSm9zZSxDQSwyMDIzLTAxLTE4LEhpZ2ggVmFsdWUsMTQsMTY1NC4yNSwxMTguMTYsMjAyNC0wMS0wMyw0LFdvbWVuJ3MgRHJlc3NlcyxFdmVuaW5nIENvY2t0YWlsIERyZXNzLFRSVUUsVFJVRSxHb2xkXG4xMDExLFRob21hcyxIZXJuYW5kZXosdC5oZXJuYW5kZXpAZW1haWwuY29tLE0sNDEsQXVzdGluLFRYLDIwMjMtMDItMDksUmVndWxhciw4LDY4Ny4zNSw4NS45MiwyMDIzLTEyLTI4LDEwLE1lbidzIE91dGVyd2VhcixMaWdodHdlaWdodCBKYWNrZXQsVFJVRSxGQUxTRSxTaWx2ZXJcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvaW5zdGFncmFtX2Fkc19kYXRhLmNzdlxuZGF0ZSxjYW1wYWlnbl9pZCxjYW1wYWlnbl9uYW1lLGFkX3NldF9pZCxhZF9zZXRfbmFtZSxhZF9pZCxhZF9uYW1lLG9iamVjdGl2ZSxpbXByZXNzaW9ucyxyZWFjaCxjbGlja3MsY3RyLGNwYyxzcGVuZCxjb252ZXJzaW9ucyxjb252ZXJzaW9uX3ZhbHVlLGNvc3RfcGVyX2NvbnZlcnNpb24scm9hc1xuMjAyNC0wMS0wMSwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDExLFdvbWVuJ3MgRHJlc3NlcywzMDAxMTEsU3VtbWVyIERyZXNzIENhcm91c2VsLENPTlZFUlNJT05TLDI4NzYsMTk4NywxMjMsMC4wNDI4LDAuOTAsMTEwLjcwLDQsMjgwLjAwLDI3LjY4LDIuNTNcbjIwMjQtMDEtMDEsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMixNZW4ncyBTaGlydHMsMzAwMTIxLFN1bW1lciBTaGlydCBTdGF0aWMsQ09OVkVSU0lPTlMsMjM0NSwxNjU0LDk4LDAuMDQxOCwwLjkwLDg4LjIwLDMsMjEwLjAwLDI5LjQwLDIuMzhcbjIwMjQtMDEtMDEsMzAwMixXaW50ZXJfU2FsZV9JRywzMDAyMSxXaW50ZXIgQ29hdHMsMzAwMjExLFdpbnRlciBDb2F0IFZpZGVvLENPTlZFUlNJT05TLDE4NzYsMTM0NSw3NiwwLjA0MDUsMC45NSw3Mi4yMCwyLDE2MC4wMCwzNi4xMCwyLjIyXG4yMDI0LTAxLTAxLDMwMDMsRXZlcnlkYXlfQmFzaWNzX0lHLDMwMDMxLEJhc2ljIFRlZXMsMzAwMzExLEJhc2ljIFRlZSBDb2xsZWN0aW9uLENPTlZFUlNJT05TLDE2NTQsMTIzNCw2NSwwLjAzOTMsMC44NSw1NS4yNSwxLDUwLjAwLDU1LjI1LDAuOTFcbjIwMjQtMDEtMDIsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzMDEyLDIxMzQsMTQ1LDAuMDQ4MSwwLjkwLDEzMC41MCw2LDQyMC4wMCwyMS43NSwzLjIyXG4yMDI0LTAxLTAyLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTIsTWVuJ3MgU2hpcnRzLDMwMDEyMSxTdW1tZXIgU2hpcnQgU3RhdGljLENPTlZFUlNJT05TLDI1NjcsMTg3NiwxMTIsMC4wNDM2LDAuOTAsMTAwLjgwLDQsMjgwLjAwLDI1LjIwLDIuNzhcbjIwMjQtMDEtMDIsMzAwMixXaW50ZXJfU2FsZV9JRywzMDAyMSxXaW50ZXIgQ29hdHMsMzAwMjExLFdpbnRlciBDb2F0IFZpZGVvLENPTlZFUlNJT05TLDE5ODcsMTQ1Niw4NywwLjA0MzgsMC45NSw4Mi42NSwzLDI0MC4wMCwyNy41NSwyLjkwXG4yMDI0LTAxLTAyLDMwMDMsRXZlcnlkYXlfQmFzaWNzX0lHLDMwMDMxLEJhc2ljIFRlZXMsMzAwMzExLEJhc2ljIFRlZSBDb2xsZWN0aW9uLENPTlZFUlNJT05TLDE3NjUsMTM0NSw3OCwwLjA0NDIsMC44NSw2Ni4zMCwyLDEwMC4wMCwzMy4xNSwxLjUxXG4yMDI0LTAxLTAzLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTEsV29tZW4ncyBEcmVzc2VzLDMwMDExMSxTdW1tZXIgRHJlc3MgQ2Fyb3VzZWwsQ09OVkVSU0lPTlMsMzI0NSwyMjQ1LDE2NywwLjA1MTUsMC45MCwxNTAuMzAsOCw1NjAuMDAsMTguNzksMy43M1xuMjAyNC0wMS0wMywzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyNzg5LDE5ODcsMTMyLDAuMDQ3MywwLjkwLDExOC44MCw1LDM1MC4wMCwyMy43NiwyLjk1XG4yMDI0LTAxLTAzLDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxODc2LDE0MzIsNzgsMC4wNDE2LDAuOTUsNzQuMTAsMiwxNjAuMDAsMzcuMDUsMi4xNlxuMjAyNC0wMS0wMywzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxOTg3LDE1NDMsODksMC4wNDQ4LDAuODUsNzUuNjUsMywxNTAuMDAsMjUuMjIsMS45OFxuMjAyNC0wMS0wNCwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDExLFdvbWVuJ3MgRHJlc3NlcywzMDAxMTEsU3VtbWVyIERyZXNzIENhcm91c2VsLENPTlZFUlNJT05TLDM0NTYsMjM0NSwxODksMC4wNTQ3LDAuOTAsMTcwLjEwLDEwLDcwMC4wMCwxNy4wMSw0LjEyXG4yMDI0LTAxLTA0LDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTIsTWVuJ3MgU2hpcnRzLDMwMDEyMSxTdW1tZXIgU2hpcnQgU3RhdGljLENPTlZFUlNJT05TLDI5ODcsMjEzNCwxNDMsMC4wNDc5LDAuOTAsMTI4LjcwLDYsNDIwLjAwLDIxLjQ1LDMuMjZcbjIwMjQtMDEtMDQsMzAwMixXaW50ZXJfU2FsZV9JRywzMDAyMSxXaW50ZXIgQ29hdHMsMzAwMjExLFdpbnRlciBDb2F0IFZpZGVvLENPTlZFUlNJT05TLDE3NjUsMTMyMSw2NywwLjAzODAsMC45NSw2My42NSwxLDgwLjAwLDYzLjY1LDEuMjZcbjIwMjQtMDEtMDQsMzAwMyxFdmVyeWRheV9CYXNpY3NfSUcsMzAwMzEsQmFzaWMgVGVlIENvbGxlY3Rpb24sMzAwMzExLEJhc2ljIFRlZSBDb2xsZWN0aW9uLENPTlZFUlNJT05TLDIxMzQsMTY1NCwxMDEsMC4wNDczLDAuODUsODUuODUsNCwyMDAuMDAsMjEuNDYsMi4zM1xuMjAyNC0wMS0wNSwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDExLFdvbWVuJ3MgRHJlc3NlcywzMDAxMTEsU3VtbWVyIERyZXNzIENhcm91c2VsLENPTlZFUlNJT05TLDM2NzgsMjU2NywyMTIsMC4wNTc2LDAuOTAsMTkwLjgwLDEyLDg0MC4wMCwxNS45MCw0LjQwXG4yMDI0LTAxLTA1LDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTIsTWVuJ3MgU2hpcnRzLDMwMDEyMSxTdW1tZXIgU2hpcnQgU3RhdGljLENPTlZFUlNJT05TLDMyNDUsMjM0NSwxNjcsMC4wNTE1LDAuOTAsMTUwLjMwLDgsNTYwLjAwLDE4Ljc5LDMuNzNcbjIwMjQtMDEtMDUsMzAwMixXaW50ZXJfU2FsZV9JRywzMDAyMSxXaW50ZXIgQ29hdHMsMzAwMjExLFdpbnRlciBDb2F0IFZpZGVvLENPTlZFUlNJT05TLDE2NTQsMTIzNCw1NiwwLjAzMzksMC45NSw1My4yMCwwLDAuMDAsMC4wMCwwLjAwXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2ZhY2Vib29rX2Fkc19kYXRhLmNzdlxuZGF0ZSxjYW1wYWlnbl9pZCxjYW1wYWlnbl9uYW1lLGFkX3NldF9pZCxhZF9zZXRfbmFtZSxhZF9pZCxhZF9uYW1lLG9iamVjdGl2ZSxpbXByZXNzaW9ucyxyZWFjaCxjbGlja3MsY3RyLGNwYyxzcGVuZCxjb252ZXJzaW9ucyxjb252ZXJzaW9uX3ZhbHVlLGNvc3RfcGVyX2NvbnZlcnNpb24scm9hc1xuMjAyNC0wMS0wMSwyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLDIwMDExLFdvbWVuJ3MgRHJlc3NlcywyMDAxMTEsU3VtbWVyIERyZXNzIENhcm91c2VsLENPTlZFUlNJT05TLDM0NTYsMjM0NSwxODcsMC4wNTQxLDAuODUsMTU4Ljk1LDcsNDkwLjAwLDIyLjcxLDMuMDhcbjIwMjQtMDEtMDEsMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQiwyMDAxMixNZW4ncyBTaGlydHMsMjAwMTIxLFN1bW1lciBTaGlydCBTdGF0aWMsQ09OVkVSU0lPTlMsMjg3NiwxOTg3LDEzMiwwLjA0NTksMC44NSwxMTIuMjAsNCwyODAuMDAsMjguMDUsMi41MFxuMjAyNC0wMS0wMSwyMDAyLFdpbnRlcl9TYWxlX0ZCLDIwMDIxLFdpbnRlciBDb2F0cywyMDAyMTEsV2ludGVyIENvYXQgVmlkZW8sQ09OVkVSU0lPTlMsMjM0NSwxNjU0LDk4LDAuMDQxOCwwLjkwLDg4LjIwLDMsMjQwLjAwLDI5LjQwLDIuNzJcbjIwMjQtMDEtMDEsMjAwMyxFdmVyeWRheV9CYXNpY3NfRkIsMjAwMzEsQmFzaWMgVGVlcywyMDAzMTEsQmFzaWMgVGVlIENvbGxlY3Rpb24sQ09OVkVSU0lPTlMsMTk4NywxNDMyLDc2LDAuMDM4MiwwLjgwLDYwLjgwLDIsMTAwLjAwLDMwLjQwLDEuNjRcbjIwMjQtMDEtMDIsMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQiwyMDAxMSxXb21lbidzIERyZXNzZXMsMjAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzNjU0LDI0NTYsMjAxLDAuMDU1MCwwLjg1LDE3MC44NSw5LDYzMC4wMCwxOC45OCwzLjY5XG4yMDI0LTAxLTAyLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsMjAwMTIsTWVuJ3MgU2hpcnRzLDIwMDEyMSxTdW1tZXIgU2hpcnQgU3RhdGljLENPTlZFUlNJT05TLDMwMTIsMjEzNCwxNDUsMC4wNDgxLDAuODUsMTIzLjI1LDUsMzUwLjAwLDI0LjY1LDIuODRcbjIwMjQtMDEtMDIsMjAwMixXaW50ZXJfU2FsZV9GQiwyMDAyMSxXaW50ZXIgQ29hdHMsMjAwMjExLFdpbnRlciBDb2F0IFZpZGVvLENPTlZFUlNJT05TLDI0NTYsMTc2NSwxMTIsMC4wNDU2LDAuOTAsMTAwLjgwLDQsMzIwLjAwLDI1LjIwLDMuMTdcbjIwMjQtMDEtMDIsMjAwMyxFdmVyeWRheV9CYXNpY3NfRkIsMjAwMzEsQmFzaWMgVGVlcywyMDAzMTEsQmFzaWMgVGVlIENvbGxlY3Rpb24sQ09OVkVSU0lPTlMsMjEzNCwxNTY3LDg5LDAuMDQxNywwLjgwLDcxLjIwLDMsMTUwLjAwLDIzLjczLDIuMTFcbjIwMjQtMDEtMDMsMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQiwyMDAxMSxXb21lbidzIERyZXNzZXMsMjAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzODc2LDI1NjcsMjIzLDAuMDU3NSwwLjg1LDE4OS41NSwxMSw3NzAuMDAsMTcuMjMsNC4wNlxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9jdXN0b21lcl90b3VjaHBvaW50cy5jc3ZcbnRvdWNocG9pbnRfaWQsY3VzdG9tZXJfaWQsZGF0ZSxjaGFubmVsLHNvdXJjZSxjYW1wYWlnbl9pZCxjYW1wYWlnbl9uYW1lLGludGVyYWN0aW9uX3R5cGUsY29udmVyc2lvbixjb252ZXJzaW9uX3ZhbHVlLHByb2R1Y3RfY2F0ZWdvcnkscHJvZHVjdF9pZCxwcm9kdWN0X25hbWVcbjEwMDAxLDEwMDEsMjAyNC0wMS0wMSxQYWlkIFNlYXJjaCxHb29nbGUgQWRzLDEwMDEsU3VtbWVyX0NvbGxlY3Rpb25fMjAyNCxhZF9jbGljayxGQUxTRSwwLjAwLE1lbidzIFNoaXJ0cyxOVUxMLE5VTExcbjEwMDAyLDEwMDEsMjAyNC0wMS0wMSxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxNZW4ncyBTaGlydHMsTlVMTCxOVUxMXG4xMDAwMywxMDAxLDIwMjQtMDEtMDIsRW1haWwsTmV3c2xldHRlcixOVUxMLFdlZWtseV9EZWFscyxlbWFpbF9vcGVuLEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDA0LDEwMDEsMjAyNC0wMS0wMixQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLGFkX2NsaWNrLFRSVUUsODAuMDAsTWVuJ3MgU2hpcnRzLDIwMDEsU3VtbWVyIExpbmVuIFNoaXJ0XG4xMDAwNSwxMDAyLDIwMjQtMDEtMDEsUGFpZCBTb2NpYWwsSW5zdGFncmFtLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsYWRfaW1wcmVzc2lvbixGQUxTRSwwLjAwLFdvbWVuJ3MgRHJlc3NlcyxOVUxMLE5VTExcbjEwMDA2LDEwMDIsMjAyNC0wMS0wMSxQYWlkIFNvY2lhbCxJbnN0YWdyYW0sMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRyxhZF9jbGljayxGQUxTRSwwLjAwLFdvbWVuJ3MgRHJlc3NlcyxOVUxMLE5VTExcbjEwMDA3LDEwMDIsMjAyNC0wMS0wMixPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAwOCwxMDAyLDIwMjQtMDEtMDMsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsYWRfY2xpY2ssVFJVRSw3MC4wMCxXb21lbidzIERyZXNzZXMsMTAwMSxGbG9yYWwgU3VtbWVyIERyZXNzXG4xMDAwOSwxMDAzLDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAyLFdpbnRlcl9TYWxlXzIwMjQsYWRfY2xpY2ssRkFMU0UsMC4wMCxNZW4ncyBPdXRlcndlYXIsTlVMTCxOVUxMXG4xMDAxMCwxMDAzLDIwMjQtMDEtMDEsT3JnYW5pYyBTb2NpYWwsRmFjZWJvb2ssTlVMTCxOVUxMLHBhZ2VfdmlzaXQsRkFMU0UsMC4wMCxOVUxMLE5VTEwsTlVMTFxuMTAwMTEsMTAwMywyMDI0LTAxLTAxLFBhaWQgU29jaWFsLEZhY2Vib29rLDIwMDIsV2ludGVyX1NhbGVfRkIsYWRfY2xpY2ssVFJVRSw4MC4wMCxNZW4ncyBPdXRlcndlYXIsMzAwMSxXaW50ZXIgQ29hdCBDbGFzc2ljXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2dvb2dsZV9hZHNfZGF0YS5jc3ZcbmRhdGUsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxhZF9ncm91cF9pZCxhZF9ncm91cF9uYW1lLGtleXdvcmQsbWF0Y2hfdHlwZSxkZXZpY2UsaW1wcmVzc2lvbnMsY2xpY2tzLGNvc3QsY29udmVyc2lvbnMsY29udmVyc2lvbl92YWx1ZSxjdHIsY3BjLHJvYXNcbjIwMjQtMDEtMDEsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LDEwMDExLFdvbWVuJ3MgRHJlc3NlcyxzdW1tZXIgZHJlc3MsYnJvYWQsbW9iaWxlLDEyNDUsNzgsMTU2LjAwLDMsMjEwLjAwLDAuMDYyNiwyLjAwLDEuMzVcbjIwMjQtMDEtMDEsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LDEwMDEyLE1lbidzIFNoaXJ0cyxzdW1tZXIgc2hpcnQsYnJvYWQsbW9iaWxlLDk4Nyw0NSw5MC4wMCwxLDgwLjAwLDAuMDQ1NiwyLjAwLDAuODlcbjIwMjQtMDEtMDEsMTAwMixXaW50ZXJfU2FsZV8yMDI0LDEwMDIxLFdpbnRlciBDb2F0cyx3aW50ZXIgY29hdCBzYWxlLGV4YWN0LGRlc2t0b3AsODc2LDY1LDE2Mi41MCw0LDMyMC4wMCwwLjA3NDIsMi41MCwxLjk3XG4yMDI0LTAxLTAxLDEwMDMsRXZlcnlkYXlfRXNzZW50aWFscywxMDAzMSxCYXNpYyBUZWVzLGJhc2ljIHQtc2hpcnQscGhyYXNlLHRhYmxldCw2NTQsMzIsNDguMDAsMiwxMDAuMDAsMC4wNDg5LDEuNTAsMi4wOFxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9nb29nbGVfc2VhcmNoX2NvbnNvbGVfZGF0YS5jc3ZcbmRhdGUscXVlcnkscGFnZSxkZXZpY2UsY291bnRyeSxpbXByZXNzaW9ucyxjbGlja3MsY3RyLHBvc2l0aW9uXG4yMDI0LTAxLTAxLHN1bW1lciBkcmVzc2VzLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsbW9iaWxlLFVTLDIzNDUsMTg3LDAuMDc5NywzLjJcbjIwMjQtMDEtMDEsc3VtbWVyIHNoaXJ0cyBtZW4sL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cyxtb2JpbGUsVVMsMTg3NiwxMzIsMC4wNzA0LDQuMVxuMjAyNC0wMS0wMSx3aW50ZXIgY29hdHMgc2FsZSwvY29sbGVjdGlvbnMvd2ludGVyLXNhbGUvY29hdHMsZGVza3RvcCxVUywxNTQzLDk4LDAuMDYzNSwyLjhcbjIwMjQtMDEtMDEsYmFzaWMgdC1zaGlydHMsL2NvbGxlY3Rpb25zL2Jhc2ljcy90ZWVzLHRhYmxldCxVUywxMjM0LDc2LDAuMDYxNiw1LjJcbjIwMjQtMDEtMDIsc3VtbWVyIGRyZXNzZXMsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3Nlcyxtb2JpbGUsVVMsMjQ1NiwyMDEsMC4wODE4LDMuMVxuMjAyNC0wMS0wMixzdW1tZXIgc2hpcnRzIG1lbiwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLG1vYmlsZSxVUywxOTIzLDE0NSwwLjA3NTQsMy45XG4yMDI0LTAxLTAyLHdpbnRlciBjb2F0cyBzYWxlLC9jb2xsZWN0aW9ucy93aW50ZXItc2FsZS9jb2F0cyxkZXNrdG9wLFVTLDE2MjEsMTEyLDAuMDY5MSwyLjdcbjIwMjQtMDEtMDIsYmFzaWMgdC1zaGlydHMsL2NvbGxlY3Rpb25zL2Jhc2ljcy90ZWVzLHRhYmxldCxVUywxMzQ1LDg5LDAuMDY2Miw0Ljhcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX3ZlbmRvci9wZXA1MTcvZW52YnVpbGQucHlcblwiXCJcIkJ1aWxkIHdoZWVscy9zZGlzdHMgYnkgaW5zdGFsbGluZyBidWlsZCBkZXBzIHRvIGEgdGVtcG9yYXJ5IGVudmlyb25tZW50LlxuXCJcIlwiXG5cbmltcG9ydCBpb1xuaW1wb3J0IG9zXG5pbXBvcnQgbG9nZ2luZ1xuaW1wb3J0IHNodXRpbFxuZnJvbSBzdWJwcm9jZXNzIGltcG9ydCBjaGVja19jYWxsXG5pbXBvcnQgc3lzXG5mcm9tIHN5c2NvbmZpZyBpbXBvcnQgZ2V0X3BhdGhzXG5mcm9tIHRlbXBmaWxlIGltcG9ydCBta2R0ZW1wXG5cbmZyb20gLmNvbXBhdCBpbXBvcnQgdG9tbF9sb2FkXG5mcm9tIC53cmFwcGVycyBpbXBvcnQgUGVwNTE3SG9va0NhbGxlciwgTG9nZ2VyV3JhcHBlclxuXG5sb2cgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXylcblxuXG5kZWYgX2xvYWRfcHlwcm9qZWN0KHNvdXJjZV9kaXIpOlxuICAgIHdpdGggaW8ub3BlbihcbiAgICAgICAgICAgIG9zLnBhdGguam9pbihzb3VyY2VfZGlyLCAncHlwcm9qZWN0LnRvbWwnKSxcbiAgICAgICAgICAgICdyYicsXG4gICAgICAgICAgICApIGFzIGY6XG4gICAgICAgIHB5cHJvamVjdF9kYXRhID0gdG9tbF9sb2FkKGYpXG4gICAgYnVpbGRzeXMgPSBweXByb2plY3RfZGF0YVsnYnVpbGQtc3lzdGVtJ11cbiAgICByZXR1cm4gKFxuICAgICAgICBidWlsZHN5c1sncmVxdWlyZXMnXSxcbiAgICAgICAgYnVpbGRzeXNbJ2J1aWxkLWJhY2tlbmQnXSxcbiAgICAgICAgYnVpbGRzeXMuZ2V0KCdiYWNrZW5kLXBhdGgnKSxcbiAgICApXG5cblxuY2xhc3MgQnVpbGRFbnZpcm9ubWVudChvYmplY3QpOlxuICAgIFwiXCJcIkNvbnRleHQgbWFuYWdlciB0byBpbnN0YWxsIGJ1aWxkIGRlcHMgaW4gYSBzaW1wbGUgdGVtcG9yYXJ5IGVudmlyb25tZW50XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL192ZW5kb3IvcGVwNTE3L2NoZWNrLnB5XG5cIlwiXCJDaGVjayBhIHByb2plY3QgYW5kIGJhY2tlbmQgYnkgYXR0ZW1wdGluZyB0byBidWlsZCB1c2luZyBQRVAgNTE3IGhvb2tzLlxuXCJcIlwiXG5pbXBvcnQgYXJncGFyc2VcbmltcG9ydCBpb1xuaW1wb3J0IGxvZ2dpbmdcbmltcG9ydCBvc1xuZnJvbSBvcy5wYXRoIGltcG9ydCBpc2ZpbGUsIGpvaW4gYXMgcGpvaW5cbmltcG9ydCBzaHV0aWxcbmZyb20gc3VicHJvY2VzcyBpbXBvcnQgQ2FsbGVkUHJvY2Vzc0Vycm9yXG5pbXBvcnQgc3lzXG5pbXBvcnQgdGFyZmlsZVxuZnJvbSB0ZW1wZmlsZSBpbXBvcnQgbWtkdGVtcFxuaW1wb3J0IHppcGZpbGVcblxuZnJvbSAuY29sb3Jsb2cgaW1wb3J0IGVuYWJsZV9jb2xvdXJmdWxfb3V0cHV0XG5mcm9tIC5jb21wYXQgaW1wb3J0IFRPTUxEZWNvZGVFcnJvciwgdG9tbF9sb2FkXG5mcm9tIC5lbnZidWlsZCBpbXBvcnQgQnVpbGRFbnZpcm9ubWVudFxuZnJvbSAud3JhcHBlcnMgaW1wb3J0IFBlcDUxN0hvb2tDYWxsZXJcblxubG9nID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pXG4uLi5cblxuXG5kZWYgY2hlY2soc291cmNlX2Rpcik6XG4gICAgcHlwcm9qZWN0ID0gcGpvaW4oc291cmNlX2RpciwgJ3B5cHJvamVjdC50b21sJylcbiAgICBpZiBpc2ZpbGUocHlwcm9qZWN0KTpcbiAgICAgICAgbG9nLmluZm8oJ0ZvdW5kIHB5cHJvamVjdC50b21sJylcbiAgICBlbHNlOlxuICAgICAgICBsb2cuZXJyb3IoJ01pc3NpbmcgcHlwcm9qZWN0LnRvbWwnKVxuICAgICAgICByZXR1cm4gRmFsc2VcblxuICAgIHRyeTpcbiAgICAgICAgd2l0aCBpby5vcGVuKHB5cHJvamVjdCwgJ3JiJykgYXMgZjpcbiAgICAgICAgICAgIHB5cHJvamVjdF9kYXRhID0gdG9tbF9sb2FkKGYpXG4gICAgICAgICMgRW5zdXJlIHRoZSBtYW5kYXRvcnkgZGF0YSBjYW4gYmUgbG9hZGVkXG4gICAgICAgIGJ1aWxkc3lzID0gcHlwcm9qZWN0X2RhdGFbJ2J1aWxkLXN5c3RlbSddXG4gICAgICAgIHJlcXVpcmVzID0gYnVpbGRzeXNbJ3JlcXVpcmVzJ11cbiAgICAgICAgYmFja2VuZCA9IGJ1aWxkc3lzWydidWlsZC1iYWNrZW5kJ11cbiAgICAgICAgYmFja2VuZF9wYXRoID0gYnVpbGRzeXMuZ2V0KCdiYWNrZW5kLXBhdGgnKVxuICAgICAgICBsb2cuaW5mbygnTG9hZGVkIHB5cHJvamVjdC50b21sJylcbiAgICBleGNlcHQgKFRPTUxEZWNvZGVFcnJvciwgS2V5RXJyb3IpOlxuICAgICAgICBsb2cuZXJyb3IoXCJJbnZhbGlkIHB5cHJvamVjdC50b21sXCIsIGV4Y19pbmZvPVRydWUpXG4gICAgICAgIHJldHVybiBGYWxzZVxuXG4gICAgaG9va3MgPSBQZXA1MTdIb29rQ2FsbGVyKHNvdXJjZV9kaXIsIGJhY2tlbmQsIGJhY2tlbmRfcGF0aClcblxuICAgIHNkaXN0X29rID0gY2hlY2tfYnVpbGRfc2Rpc3QoaG9va3MsIHJlcXVpcmVzKVxuICAgIHdoZWVsX29rID0gY2hlY2tfYnVpbGRfd2hlZWwoaG9va3MsIHJlcXVpcmVzKVxuXG4gICAgaWYgbm90IHNkaXN0X29rOlxuICAgICAgICBsb2cud2FybmluZygnU2Rpc3QgY2hlY2tzIGZhaWxlZDsgc2Nyb2xsIHVwIHRvIHNlZScpXG4gICAgaWYgbm90IHdoZWVsX29rOlxuICAgICAgICBsb2cud2FybmluZygnV2hlZWwgY2hlY2tzIGZhaWxlZCcpXG5cbiAgICByZXR1cm4gc2Rpc3Rfb2tcblxuXG5kZWYgbWFpbihhcmd2PU5vbmUpOlxuICAgIGxvZy53YXJuaW5nKCdwZXA1MTcuY2hlY2sgaXMgZGVwcmVjYXRlZC4gJ1xuICAgICAgICAgICAgICAgICdDb25zaWRlciBzd2l0Y2hpbmcgdG8gaHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L2J1aWxkLycpXG5cbiAgICBhcCA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKClcbiAgICBhcC5hZGRfYXJndW1lbnQoXG4gICAgICAgICdzb3VyY2VfZGlyJyxcbiAgICAgICAgaGVscD1cIkEgZGlyZWN0b3J5IGNvbnRhaW5pbmcgcHlwcm9qZWN0LnRvbWxcIilcbiAgICBhcmdzID0gYXAucGFyc2VfYXJncyhhcmd2KVxuXG4gICAgZW5hYmxlX2NvbG91cmZ1bF9vdXRwdXQoKVxuXG4gICAgb2sgPSBjaGVjayhhcmdzLnNvdXJjZV9kaXIpXG5cbiAgICBpZiBvazpcbiAgICAgICAgcHJpbnQoYW5zaSgnQ2hlY2tzIHBhc3NlZCcsICdncmVlbicpKVxuICAgIGVsc2U6XG4gICAgICAgIHByaW50KGFuc2koJ0NoZWNrcyBmYWlsZWQnLCAncmVkJykpXG4gICAgICAgIHN5cy5leGl0KDEpXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGtnX3Jlc291cmNlcy90ZXN0cy9kYXRhL215LXRlc3QtcGFja2FnZS1zb3VyY2Uvc2V0dXAucHlcbmltcG9ydCBzZXR1cHRvb2xzXG5zZXR1cHRvb2xzLnNldHVwKFxuICAgIG5hbWU9XCJteS10ZXN0LXBhY2thZ2VcIixcbiAgICB2ZXJzaW9uPVwiMS4wXCIsXG4gICAgemlwX3NhZmU9VHJ1ZSxcbilcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX3ZlbmRvci9kaXN0bGliL3V0aWwucHlcbi4uLlxuXG4jIGRlZiBfZ2V0X3B5cGlyY19jb21tYW5kKCk6XG4gICAgIyBcIlwiXCJcbiAgICAjIEdldCB0aGUgZGlzdHV0aWxzIGNvbW1hbmQgZm9yIGludGVyYWN0aW5nIHdpdGggUHlQSSBjb25maWd1cmF0aW9ucy5cbiAgICAjIDpyZXR1cm46IHRoZSBjb21tYW5kLlxuICAgICMgXCJcIlwiXG4gICAgIyBmcm9tIGRpc3R1dGlscy5jb3JlIGltcG9ydCBEaXN0cmlidXRpb25cbiAgICAjIGZyb20gZGlzdHV0aWxzLmNvbmZpZyBpbXBvcnQgUHlQSVJDQ29tbWFuZFxuICAgICMgZCA9IERpc3RyaWJ1dGlvbigpXG4gICAgIyByZXR1cm4gUHlQSVJDQ29tbWFuZChkKVxuXG5jbGFzcyBQeVBJUkNGaWxlKG9iamVjdCk6XG5cbiAgICBERUZBVUxUX1JFUE9TSVRPUlkgPSAnaHR0cHM6Ly91cGxvYWQucHlwaS5vcmcvbGVnYWN5LydcbiAgICBERUZBVUxUX1JFQUxNID0gJ3B5cGknXG5cbiAgICBkZWYgX19pbml0X18oc2VsZiwgZm49Tm9uZSwgdXJsPU5vbmUpOlxuICAgICAgICBpZiBmbiBpcyBOb25lOlxuICAgICAgICAgICAgZm4gPSBvcy5wYXRoLmpvaW4ob3MucGF0aC5leHBhbmR1c2VyKCd+JyksICcucHlwaXJjJylcbiAgICAgICAgc2VsZi5maWxlbmFtZSA9IGZuXG4gICAgICAgIHNlbGYudXJsID0gdXJsXG5cbiAgICBkZWYgcmVhZChzZWxmKTpcbiAgICAgICAgcmVzdWx0ID0ge31cblxuICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhzZWxmLmZpbGVuYW1lKTpcbiAgICAgICAgICAgIHJlcG9zaXRvcnkgPSBzZWxmLnVybCBvciBzZWxmLkRFRkFVTFRfUkVQT1NJVE9SWVxuXG4gICAgICAgICAgICBjb25maWcgPSBjb25maWdwYXJzZXIuUmF3Q29uZmlnUGFyc2VyKClcbiAgICAgICAgICAgIGNvbmZpZy5yZWFkKHNlbGYuZmlsZW5hbWUpXG4gICAgICAgICAgICBzZWN0aW9ucyA9IGNvbmZpZy5zZWN0aW9ucygpXG4gICAgICAgICAgICBpZiAnZGlzdHV0aWxzJyBpbiBzZWN0aW9uczpcbiAgICAgICAgICAgICAgICAjIGxldCdzIGdldCB0aGUgbGlzdCBvZiBzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgaW5kZXhfc2VydmVycyA9IGNvbmZpZy5nZXQoJ2Rpc3R1dGlscycsICdpbmRleC1zZXJ2ZXJzJylcbiAgICAgICAgICAgICAgICBfc2VydmVycyA9IFtzZXJ2ZXIuc3RyaXAoKSBmb3Igc2VydmVyIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhfc2VydmVycy5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzZXJ2ZXIuc3RyaXAoKSAhPSAnJ11cbiAgICAgICAgICAgICAgICBpZiBfc2VydmVycyA9PSBbXTpcbiAgICAgICAgICAgICAgICAgICAgIyBub3RoaW5nIHNldCwgbGV0J3MgdHJ5IHRvIGdldCB0aGUgZGVmYXVsdCBweXBpXG4gICAgICAgICAgICAgICAgICAgIGlmICdweXBpJyBpbiBzZWN0aW9uczpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXJ2ZXJzID0gWydweXBpJ11cbiAgICAgICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgICAgICBmb3Igc2VydmVyIGluIF9zZXJ2ZXJzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0geydzZXJ2ZXInOiBzZXJ2ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ3VzZXJuYW1lJ10gPSBjb25maWcuZ2V0KHNlcnZlciwgJ3VzZXJuYW1lJylcblxuICAgICAgICAgICAgICAgICAgICAgICAgIyBvcHRpb25hbCBwYXJhbXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBrZXksIGRlZmF1bHQgaW4gKCgncmVwb3NpdG9yeScsIHNlbGYuREVGQVVMVF9SRVBPU0lUT1JZKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgncmVhbG0nLCBzZWxmLkRFRkFVTFRfUkVBTE0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCdwYXNzd29yZCcsIE5vbmUpKTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBjb25maWcuaGFzX29wdGlvbihzZXJ2ZXIsIGtleSk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gY29uZmlnLmdldChzZXJ2ZXIsIGtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IGRlZmF1bHRcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX3ZlbmRvci9wZXA1MTcvYnVpbGQucHlcbi4uLlxuXG5cbmRlZiBsb2FkX3N5c3RlbShzb3VyY2VfZGlyKTpcbiAgICBcIlwiXCJcbiAgICBMb2FkIHRoZSBidWlsZCBzeXN0ZW0gZnJvbSBhIHNvdXJjZSBkaXIgKHB5cHJvamVjdC50b21sKS5cbiAgICBcIlwiXCJcbiAgICBweXByb2plY3QgPSBvcy5wYXRoLmpvaW4oc291cmNlX2RpciwgJ3B5cHJvamVjdC50b21sJylcbiAgICB3aXRoIGlvLm9wZW4ocHlwcm9qZWN0LCAncmInKSBhcyBmOlxuICAgICAgICBweXByb2plY3RfZGF0YSA9IHRvbWxfbG9hZChmKVxuICAgIHJldHVybiBweXByb2plY3RfZGF0YVsnYnVpbGQtc3lzdGVtJ11cblxuXG5kZWYgY29tcGF0X3N5c3RlbShzb3VyY2VfZGlyKTpcbiAgICBcIlwiXCJcbiAgICBHaXZlbiBhIHNvdXJjZSBkaXIsIGF0dGVtcHQgdG8gZ2V0IGEgYnVpbGQgc3lzdGVtIGJhY2tlbmRcbiAgICBhbmQgcmVxdWlyZW1lbnRzIGZyb20gcHlwcm9qZWN0LnRvbWwuIEZhbGxiYWNrIHRvXG4gICAgc2V0dXB0b29scyBidXQgb25seSBpZiB0aGUgZmlsZSB3YXMgbm90IGZvdW5kIG9yIGEgYnVpbGRcbiAgICBzeXN0ZW0gd2FzIG5vdCBpbmRpY2F0ZWQuXG4gICAgXCJcIlwiXG4gICAgdHJ5OlxuICAgICAgICBzeXN0ZW0gPSBsb2FkX3N5c3RlbShzb3VyY2VfZGlyKVxuICAgIGV4Y2VwdCAoRmlsZU5vdEZvdW5kRXJyb3IsIEtleUVycm9yKTpcbiAgICAgICAgc3lzdGVtID0ge31cbiAgICBzeXN0ZW0uc2V0ZGVmYXVsdChcbiAgICAgICAgJ2J1aWxkLWJhY2tlbmQnLFxuICAgICAgICAnc2V0dXB0b29scy5idWlsZF9tZXRhOl9fbGVnYWN5X18nLFxuICAgIClcbiAgICBzeXN0ZW0uc2V0ZGVmYXVsdCgncmVxdWlyZXMnLCBbJ3NldHVwdG9vbHMnLCAnd2hlZWwnXSlcbiAgICByZXR1cm4gc3lzdGVtXG4uLi5cblxuXG5kZWYgYnVpbGQoc291cmNlX2RpciwgZGlzdCwgZGVzdD1Ob25lLCBzeXN0ZW09Tm9uZSk6XG4gICAgc3lzdGVtID0gc3lzdGVtIG9yIGxvYWRfc3lzdGVtKHNvdXJjZV9kaXIpXG4gICAgZGVzdCA9IG9zLnBhdGguam9pbihzb3VyY2VfZGlyLCBkZXN0IG9yICdkaXN0JylcbiAgICBta2Rpcl9wKGRlc3QpXG5cbiAgICB2YWxpZGF0ZV9zeXN0ZW0oc3lzdGVtKVxuICAgIGhvb2tzID0gUGVwNTE3SG9va0NhbGxlcihcbiAgICAgICAgc291cmNlX2Rpciwgc3lzdGVtWydidWlsZC1iYWNrZW5kJ10sIHN5c3RlbS5nZXQoJ2JhY2tlbmQtcGF0aCcpXG4gICAgKVxuXG4gICAgd2l0aCBCdWlsZEVudmlyb25tZW50KCkgYXMgZW52OlxuICAgICAgICBlbnYucGlwX2luc3RhbGwoc3lzdGVtWydyZXF1aXJlcyddKVxuICAgICAgICBfZG9fYnVpbGQoaG9va3MsIGVudiwgZGlzdCwgZGVzdClcblxuXG5wYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigpXG5wYXJzZXIuYWRkX2FyZ3VtZW50KFxuICAgICdzb3VyY2VfZGlyJyxcbiAgICBoZWxwPVwiQSBkaXJlY3RvcnkgY29udGFpbmluZyBweXByb2plY3QudG9tbFwiLFxuKVxucGFyc2VyLmFkZF9hcmd1bWVudChcbiAgICAnLS1iaW5hcnknLCAnLWInLFxuICAgIGFjdGlvbj0nc3RvcmVfdHJ1ZScsXG4gICAgZGVmYXVsdD1GYWxzZSxcbilcbnBhcnNlci5hZGRfYXJndW1lbnQoXG4gICAgJy0tc291cmNlJywgJy1zJyxcbiAgICBhY3Rpb249J3N0b3JlX3RydWUnLFxuICAgIGRlZmF1bHQ9RmFsc2UsXG4pXG5wYXJzZXIuYWRkX2FyZ3VtZW50KFxuICAgICctLW91dC1kaXInLCAnLW8nLFxuICAgIGhlbHA9XCJEZXN0aW5hdGlvbiBpbiB3aGljaCB0byBzYXZlIHRoZSBidWlsZHMgcmVsYXRpdmUgdG8gc291cmNlIGRpclwiLFxuKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BrZ19yZXNvdXJjZXMvX3ZlbmRvci9hcHBkaXJzLnB5XG4jIS91c3IvYmluL2VudiBweXRob25cbiMgLSotIGNvZGluZzogdXRmLTggLSotXG4jIENvcHlyaWdodCAoYykgMjAwNS0yMDEwIEFjdGl2ZVN0YXRlIFNvZnR3YXJlIEluYy5cbiMgQ29weXJpZ2h0IChjKSAyMDEzIEVkZHkgUGV0cmnImW9yXG5cblwiXCJcIlV0aWxpdGllcyBmb3IgZGV0ZXJtaW5pbmcgYXBwbGljYXRpb24tc3BlY2lmaWMgZGlycy5cblxuU2VlIDxodHRwOi8vZ2l0aHViLmNvbS9BY3RpdmVTdGF0ZS4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjM3M2QwMmNkLTkwMTgtNGNhOC1iNzllLTk5MDAzMmE5MWMzZTt0b29sdV92cnR4XzAxU3FMMzhpcmg3R1V2N3o2VG9IdDhGcCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9nb29nbGVfYW5hbHl0aWNzX2RhdGEuY3N2XG5kYXRlLHNvdXJjZSxtZWRpdW0sY2hhbm5lbF9ncm91cGluZyxkZXZpY2VfY2F0ZWdvcnksbGFuZGluZ19wYWdlLHNlc3Npb25zLG5ld191c2Vycyxib3VuY2VfcmF0ZSxwYWdlc19wZXJfc2Vzc2lvbixhdmdfc2Vzc2lvbl9kdXJhdGlvbix0cmFuc2FjdGlvbnMscmV2ZW51ZSxjb252ZXJzaW9uX3JhdGVcbjIwMjQtMDEtMDEsZ29vZ2xlLG9yZ2FuaWMsT3JnYW5pYyBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMzQ1LDE4NywwLjMyLDMuNSwyNDUsMTIsODQwLjAwLDAuMDM0OFxuMjAyNC0wMS0wMSxnb29nbGUsY3BjLFBhaWQgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDE4Nyw5OCwwLjI4LDQuMiwzMTIsOCw1NjAuMDAsMC4wNDI4XG4yMDI0LTAxLTAxLGZhY2Vib29rLHJlZmVycmFsLFNvY2lhbCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywxNTYsODcsMC4zNSwyLjgsMTk4LDUsMzUwLjAwLDAuMDMyMVxuMjAyNC0wMS0wMSxpbnN0YWdyYW0scmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDEyMyw3NiwwLjM4LDIuNSwxNzYsMywyMTAuMDAsMC4wMjQ0XG4yMDI0LTAxLTAxLGRpcmVjdCxub25lLERpcmVjdCxkZXNrdG9wLC8sMjM0LDExMiwwLjI1LDUuNiw0MjMsMTUsMTA1MC4wMCwwLjA2NDFcbjIwMjQtMDEtMDEsZ29vZ2xlLG9yZ2FuaWMsT3JnYW5pYyBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsMjY3LDE0MywwLjM0LDMuMiwyMzIsOSw2MzAuMDAsMC4wMzM3XG4yMDI0LTAxLTAxLGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsMTMyLDc2LDAuMzAsMy44LDI4Nyw1LDM1MC4wMCwwLjAzNzlcbjIwMjQtMDEtMDEsZmFjZWJvb2sscmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLDk4LDU0LDAuMzcsMi42LDE4NywyLDE0MC4wMCwwLjAyMDRcbjIwMjQtMDEtMDIsZ29vZ2xlLG9yZ2FuaWMsT3JnYW5pYyBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMzc4LDIwMSwwLjMwLDMuNywyNTYsMTUsMTA1MC4wMCwwLjAzOTdcbjIwMjQtMDEtMDIsZ29vZ2xlLGNwYyxQYWlkIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywyMDEsMTEyLDAuMjYsNC41LDMyNCwxMCw3MDAuMDAsMC4wNDk4XG4yMDI0LTAxLTAyLGZhY2Vib29rLHJlZmVycmFsLFNvY2lhbCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywxNzYsOTgsMC4zMywzLjAsMjEwLDcsNDkwLjAwLDAuMDM5OFxuMjAyNC0wMS0wMixpbnN0YWdyYW0scmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDE0NSw4NywwLjM2LDIuNywxODksNSwzNTAuMDAsMC4wMzQ1XG4yMDI0LTAxLTAyLGRpcmVjdCxub25lLERpcmVjdCxkZXNrdG9wLC8sMjU2LDEzMiwwLjIzLDUuOCw0NDUsMTgsMTI2MC4wMCwwLjA3MDNcbjIwMjQtMDEtMDIsZ29vZ2xlLG9yZ2FuaWMsT3JnYW5pYyBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsMjg5LDE1NiwwLjMyLDMuNCwyNDUsMTEsNzcwLjAwLDAuMDM4MVxuMjAyNC0wMS0wMixnb29nbGUsY3BjLFBhaWQgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLDE1Niw4OSwwLjI4LDQuMCwyOTgsNyw0OTAuMDAsMC4wNDQ5XG4yMDI0LTAxLTAyLGZhY2Vib29rLHJlZmVycmFsLFNvY2lhbCxtb2JpbGUsL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cywxMTIsNjcsMC4zNSwyLjgsMTk4LDQsMjgwLjAwLDAuMDM1N1xuMjAyNC0wMS0wMyxnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3Nlcyw0MTIsMjIzLDAuMjgsMy45LDI2NywxOCwxMjYwLjAwLDAuMDQzN1xuMjAyNC0wMS0wMyxnb29nbGUsY3BjLFBhaWQgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDIyMywxMzIsMC4yNCw0LjcsMzM2LDEzLDkxMC4wMCwwLjA1ODNcbi4uLlxuMjAyNC0wMS0wNSxkaXJlY3Qsbm9uZSxEaXJlY3QsZGVza3RvcCwvLDMyMywxOTgsMC4xNyw2LjQsNTEyLDI5LDIwMzAuMDAsMC4wODk4XG4yMDI0LTAxLTA1LGdvb2dsZSxvcmdhbmljLE9yZ2FuaWMgU2VhcmNoLG1vYmlsZSwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLDM1NiwxODksMC4yNiw0LjAsMjc4LDIwLDE0MDAuMDAsMC4wNTYyXG4yMDI0LTAxLTA1LGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsMjIzLDEzMiwwLjIyLDQuNiwzMzIsMTQsOTgwLjAwLDAuMDYyOFxuMjAyNC0wMS0wNSxmYWNlYm9vayxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy9tZW5zL3N1bW1lci1zaGlydHMsMTc2LDEwMSwwLjI5LDMuNCwyMzIsMTAsNzAwLjAwLDAuMDU2OFxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9pbnN0YWdyYW1fYWRzX2RhdGEuY3N2XG5kYXRlLGNhbXBhaWduX2lkLGNhbXBhaWduX25hbWUsYWRfc2V0X2lkLGFkX3NldF9uYW1lLGFkX2lkLGFkX25hbWUsb2JqZWN0aXZlLGltcHJlc3Npb25zLHJlYWNoLGNsaWNrcyxjdHIsY3BjLHNwZW5kLGNvbnZlcnNpb25zLGNvbnZlcnNpb25fdmFsdWUsY29zdF9wZXJfY29udmVyc2lvbixyb2FzXG4yMDI0LTAxLTAxLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTEsV29tZW4ncyBEcmVzc2VzLDMwMDExMSxTdW1tZXIgRHJlc3MgQ2Fyb3VzZWwsQ09OVkVSU0lPTlMsMjg3NiwxOTg3LDEyMywwLjA0MjgsMC45MCwxMTAuNzAsNCwyODAuMDAsMjcuNjgsMi41M1xuMjAyNC0wMS0wMSwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyMzQ1LDE2NTQsOTgsMC4wNDE4LDAuOTAsODguMjAsMywyMTAuMDAsMjkuNDAsMi4zOFxuMjAyNC0wMS0wMSwzMDAyLFdpbnRlcl9TYWxlX0lHLDMwMDIxLFdpbnRlciBDb2F0cywzMDAyMTEsV2ludGVyIENvYXQgVmlkZW8sQ09OVkVSU0lPTlMsMTg3NiwxMzQ1LDc2LDAuMDQwNSwwLjk1LDcyLjIwLDIsMTYwLjAwLDM2LjEwLDIuMjJcbjIwMjQtMDEtMDEsMzAwMyxFdmVyeWRheV9CYXNpY3NfSUcsMzAwMzEsQmFzaWMgVGVlcywzMDAzMTEsQmFzaWMgVGVlIENvbGxlY3Rpb24sQ09OVkVSU0lPTlMsMTY1NCwxMjM0LDY1LDAuMDM5MywwLjg1LDU1LjI1LDEsNTAuMDAsNTUuMjUsMC45MVxuMjAyNC0wMS0wMiwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDExLFdvbWVuJ3MgRHJlc3NlcywzMDAxMTEsU3VtbWVyIERyZXNzIENhcm91c2VsLENPTlZFUlNJT05TLDMwMTIsMjEzNCwxNDUsMC4wNDgxLDAuOTAsMTMwLjUwLDYsNDIwLjAwLDIxLjc1LDMuMjJcbjIwMjQtMDEtMDIsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMixNZW4ncyBTaGlydHMsMzAwMTIxLFN1bW1lciBTaGlydCBTdGF0aWMsQ09OVkVSU0lPTlMsMjU2NywxODc2LDExMiwwLjA0MzYsMC45MCwxMDAuODAsNCwyODAuMDAsMjUuMjAsMi43OFxuMjAyNC0wMS0wMiwzMDAyLFdpbnRlcl9TYWxlX0lHLDMwMDIxLFdpbnRlciBDb2F0cywzMDAyMTEsV2ludGVyIENvYXQgVmlkZW8sQ09OVkVSU0lPTlMsMTk4NywxNDU2LDg3LDAuMDQzOCwwLjk1LDgyLjY1LDMsMjQwLjAwLDI3LjU1LDIuOTBcbjIwMjQtMDEtMDIsMzAwMyxFdmVyeWRheV9CYXNpY3NfSUcsMzAwMzEsQmFzaWMgVGVlcywzMDAzMTEsQmFzaWMgVGVlIENvbGxlY3Rpb24sQ09OVkVSU0lPTlMsMTc2NSwxMzQ1LDc4LDAuMDQ0MiwwLjg1LDY2LjMwLDIsMTAwLjAwLDMzLjE1LDEuNTFcbjIwMjQtMDEtMDMsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzMjQ1LDIyNDUsMTY3LDAuMDUxNSwwLjkwLDE1MC4zMCw4LDU2MC4wMCwxOC43OSwzLjczXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9iaW4vcGlwM1xuIyEvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9weXRob25cbiMgLSotIGNvZGluZzogdXRmLTggLSotXG5pbXBvcnQgcmVcbmltcG9ydCBzeXNcbmZyb20gcGlwLl9pbnRlcm5hbC5jbGkubWFpbiBpbXBvcnQgbWFpblxuaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzpcbiAgICBzeXMuYXJndlswXSA9IHJlLnN1YihyJygtc2NyaXB0XFwucHl3fFxcLmV4ZSk/JCcsICcnLCBzeXMuYXJndlswXSlcbiAgICBzeXMuZXhpdChtYWluKCkpXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9iaW4vcGlwXG4jIS9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvYmluL3B5dGhvblxuIyAtKi0gY29kaW5nOiB1dGYtOCAtKi1cbmltcG9ydCByZVxuaW1wb3J0IHN5c1xuZnJvbSBwaXAuX2ludGVybmFsLmNsaS5tYWluIGltcG9ydCBtYWluXG5pZiBfX25hbWVfXyA9PSAnX19tYWluX18nOlxuICAgIHN5cy5hcmd2WzBdID0gcmUuc3ViKHInKC1zY3JpcHRcXC5weXd8XFwuZXhlKT8kJywgJycsIHN5cy5hcmd2WzBdKVxuICAgIHN5cy5leGl0KG1haW4oKSlcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9waXAzLjlcbiMhL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9iaW4vcHl0aG9uXG4jIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuaW1wb3J0IHJlXG5pbXBvcnQgc3lzXG5mcm9tIHBpcC5faW50ZXJuYWwuY2xpLm1haW4gaW1wb3J0IG1haW5cbmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6XG4gICAgc3lzLmFyZ3ZbMF0gPSByZS5zdWIocicoLXNjcmlwdFxcLnB5d3xcXC5leGUpPyQnLCAnJywgc3lzLmFyZ3ZbMF0pXG4gICAgc3lzLmV4aXQobWFpbigpKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9mYWNlYm9va19hZHNfZGF0YS5jc3ZcbmRhdGUsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxhZF9zZXRfaWQsYWRfc2V0X25hbWUsYWRfaWQsYWRfbmFtZSxvYmplY3RpdmUsaW1wcmVzc2lvbnMscmVhY2gsY2xpY2tzLGN0cixjcGMsc3BlbmQsY29udmVyc2lvbnMsY29udmVyc2lvbl92YWx1ZSxjb3N0X3Blcl9jb252ZXJzaW9uLHJvYXNcbjIwMjQtMDEtMDEsMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQiwyMDAxMSxXb21lbidzIERyZXNzZXMsMjAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzNDU2LDIzNDUsMTg3LDAuMDU0MSwwLjg1LDE1OC45NSw3LDQ5MC4wMCwyMi43MSwzLjA4XG4yMDI0LTAxLTAxLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsMjAwMTIsTWVuJ3MgU2hpcnRzLDIwMDEyMSxTdW1tZXIgU2hpcnQgU3RhdGljLENPTlZFUlNJT05TLDI4NzYsMTk4NywxMzIsMC4wNDU5LDAuODUsMTEyLjIwLDQsMjgwLjAwLDI4LjA1LDIuNTBcbjIwMjQtMDEtMDEsMjAwMixXaW50ZXJfU2FsZV9GQiwyMDAyMSxXaW50ZXIgQ29hdHMsMjAwMjExLFdpbnRlciBDb2F0IFZpZGVvLENPTlZFUlNJT05TLDIzNDUsMTY1NCw5OCwwLjA0MTgsMC45MCw4OC4yMCwzLDI0MC4wMCwyOS40MCwyLjcyXG4yMDI0LTAxLTAxLDIwMDMsRXZlcnlkYXlfQmFzaWNzX0ZCLDIwMDMxLEJhc2ljIFRlZXMsMjAwMzExLEJhc2ljIFRlZSBDb2xsZWN0aW9uLENPTlZFUlNJT05TLDE5ODcsMTQzMiw3NiwwLjAzODIsMC44MCw2MC44MCwyLDEwMC4wMCwzMC40MCwxLjY0XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2N1c3RvbWVyX2RhdGEuY3N2XG5jdXN0b21lcl9pZCxmaXJzdF9uYW1lLGxhc3RfbmFtZSxlbWFpbCxnZW5kZXIsYWdlLGNpdHksc3RhdGUsc2lnbnVwX2RhdGUsY3VzdG9tZXJfc2VnbWVudCx0b3RhbF9vcmRlcnMsdG90YWxfc3BlbmQsYXZnX29yZGVyX3ZhbHVlLGxhc3RfcHVyY2hhc2VfZGF0ZSxkYXlzX3NpbmNlX2xhc3RfcHVyY2hhc2UsZmF2b3JpdGVfY2F0ZWdvcnksZmF2b3JpdGVfcHJvZHVjdCxlbWFpbF9zdWJzY3JpYmVyLG1vYmlsZV9hcHBfdXNlcixsb3lhbHR5X3RpZXJcbjEwMDEsSm9obixTbWl0aCxqb2huLnNtaXRoQGVtYWlsLmNvbSxNLDM0LE5ldyBZb3JrLE5ZLDIwMjMtMDEtMTUsSGlnaCBWYWx1ZSwxMiwxMjUwLjQ1LDEwNC4yMCwyMDI0LTAxLTAyLDUsTWVuJ3MgU2hpcnRzLFN1bW1lciBMaW5lbiBTaGlydCxUUlVFLFRSVUUsR29sZFxuMTAwMixFbWlseSxKb2huc29uLGVtaWx5LmpAZW1haWwuY29tLEYsMjksTG9zIEFuZ2VsZXMsQ0EsMjAyMy0wMi0wMyxSZWd1bGFyLDgsNjQ1Ljc1LDgwLjcyLDIwMjQtMDEtMDMsNCxXb21lbidzIERyZXNzZXMsRmxvcmFsIFN1bW1lciBEcmVzcyxUUlVFLFRSVUUsU2lsdmVyXG4xMDAzLE1pY2hhZWwsV2lsbGlhbXMsbS53aWxsaWFtc0BlbWFpbC5jb20sTSw0MixDaGljYWdvLElMLDIwMjMtMDEtMjIsSGlnaCBWYWx1ZSwxNSwxODc2LjMwLDEyNS4wOSwyMDI0LTAxLTAxLDYsTWVuJ3MgT3V0ZXJ3ZWFyLFdpbnRlciBDb2F0IENsYXNzaWMsVFJVRSxGQUxTRSxHb2xkXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9weXZlbnYuY2ZnXG5ob21lID0gL29wdC9hbmFjb25kYTMvYmluXG5pbmNsdWRlLXN5c3RlbS1zaXRlLXBhY2thZ2VzID0gZmFsc2VcbnZlcnNpb24gPSAzLjkuMTNcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2XG50b3VjaHBvaW50X2lkLGN1c3RvbWVyX2lkLGRhdGUsY2hhbm5lbCxzb3VyY2UsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxpbnRlcmFjdGlvbl90eXBlLGNvbnZlcnNpb24sY29udmVyc2lvbl92YWx1ZSxwcm9kdWN0X2NhdGVnb3J5LHByb2R1Y3RfaWQscHJvZHVjdF9uYW1lXG4xMDAwMSwxMDAxLDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsYWRfY2xpY2ssRkFMU0UsMC4wMCxNZW4ncyBTaGlydHMsTlVMTCxOVUxMXG4xMDAwMiwxMDAxLDIwMjQtMDEtMDEsT3JnYW5pYyBTZWFyY2gsR29vZ2xlLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwMDMsMTAwMSwyMDI0LTAxLTAyLEVtYWlsLE5ld3NsZXR0ZXIsTlVMTCxXZWVrbHlfRGVhbHMsZW1haWxfb3BlbixGQUxTRSwwLjAwLE5VTEwsTlVMTCxOVUxMXG4xMDAwNCwxMDAxLDIwMjQtMDEtMDIsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQixhZF9jbGljayxUUlVFLDgwLjAwLE1lbidzIFNoaXJ0cywyMDAxLFN1bW1lciBMaW5lbiBTaGlydFxuMTAwMDUsMTAwMiwyMDI0LTAxLTAxLFBhaWQgU29jaWFsLEluc3RhZ3JhbSwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2dvb2dsZV9hZHNfZGF0YS5jc3ZcbmRhdGUsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxhZF9ncm91cF9pZCxhZF9ncm91cF9uYW1lLGtleXdvcmQsbWF0Y2hfdHlwZSxkZXZpY2UsaW1wcmVzc2lvbnMsY2xpY2tzLGNvc3QsY29udmVyc2lvbnMsY29udmVyc2lvbl92YWx1ZSxjdHIsY3BjLHJvYXNcbjIwMjQtMDEtMDEsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LDEwMDExLFdvbWVuJ3MgRHJlc3NlcyxzdW1tZXIgZHJlc3MsYnJvYWQsbW9iaWxlLDEyNDUsNzgsMTU2LjAwLDMsMjEwLjAwLDAuMDYyNiwyLjAwLDEuMzVcbjIwMjQtMDEtMDEsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LDEwMDEyLE1lbidzIFNoaXJ0cyxzdW1tZXIgc2hpcnQsYnJvYWQsbW9iaWxlLDk4Nyw0NSw5MC4wMCwxLDgwLjAwLDAuMDQ1NiwyLjAwLDAuODlcbjIwMjQtMDEtMDEsMTAwMixXaW50ZXJfU2FsZV8yMDI0LDEwMDIxLFdpbnRlciBDb2F0cyx3aW50ZXIgY29hdCBzYWxlLGV4YWN0LGRlc2t0b3AsODc2LDY1LDE2Mi41MCw0LDMyMC4wMCwwLjA3NDIsMi41MCwxLjk3XG4yMDI0LTAxLTAxLDEwMDMsRXZlcnlkYXlfRXNzZW50aWFscywxMDAzMSxCYXNpYyBUZWVzLGJhc2ljIHQtc2hpcnQscGhyYXNlLHRhYmxldCw2NTQsMzIsNDguMDAsMiwxMDAuMDAsMC4wNDg5LDEuNTAsMi4wOFxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9nb29nbGVfc2VhcmNoX2NvbnNvbGVfZGF0YS5jc3ZcbmRhdGUscXVlcnkscGFnZSxkZXZpY2UsY291bnRyeSxpbXByZXNzaW9ucyxjbGlja3MsY3RyLHBvc2l0aW9uXG4yMDI0LTAxLTAxLHN1bW1lciBkcmVzc2VzLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsbW9iaWxlLFVTLDIzNDUsMTg3LDAuMDc5NywzLjJcbjIwMjQtMDEtMDEsc3VtbWVyIHNoaXJ0cyBtZW4sL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cyxtb2JpbGUsVVMsMTg3NiwxMzIsMC4wNzA0LDQuMVxuMjAyNC0wMS0wMSx3aW50ZXIgY29hdHMgc2FsZSwvY29sbGVjdGlvbnMvd2ludGVyLXNhbGUvY29hdHMsZGVza3RvcCxVUywxNTQzLDk4LDAuMDYzNSwyLjhcbjIwMjQtMDEtMDEsYmFzaWMgdC1zaGlydHMsL2NvbGxlY3Rpb25zL2Jhc2ljcy90ZWVzLHRhYmxldCxVUywxMjM0LDc2LDAuMDYxNiw1LjJcbjIwMjQtMDEtMDIsc3VtbWVyIGRyZXNzZXMsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3Nlcyxtb2JpbGUsVVMsMjQ1NiwyMDEsMC4wODE4LDMuMVxuMjAyNC0wMS0wMixzdW1tZXIgc2hpcnRzIG1lbiwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLG1vYmlsZSxVUywxOTIzLDE0NSwwLjA3NTQsMy45XG4yMDI0LTAxLTAyLHdpbnRlciBjb2F0cyBzYWxlLC9jb2xsZWN0aW9ucy93aW50ZXItc2FsZS9jb2F0cyxkZXNrdG9wLFVTLDE2MjEsMTEyLDAuMDY5MSwyLjdcbjIwMjQtMDEtMDIsYmFzaWMgdC1zaGlydHMsL2NvbGxlY3Rpb25zL2Jhc2ljcy90ZWVzLHRhYmxldCxVUywxMzQ1LDg5LDAuMDY2Miw0Ljhcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX3ZlbmRvci9weWdtZW50cy9tb2RlbGluZS5weVxuXCJcIlwiXG4gICAgcHlnbWVudHMubW9kZWxpbmVcbiAgICB+fn5+fn5+fn5+fn5+fn5+flxuXG4gICAgQSBzaW1wbGUgbW9kZWxpbmUgcGFyc2VyIChiYXNlZCBvbiBweW1vZGVsaW5lKS5cblxuICAgIDpjb3B5cmlnaHQ6IENvcHlyaWdodCAyMDA2LTIwMjEgYnkgdGhlIFB5Z21lbnRzIHRlYW0sIHNlZSBBVVRIT1JTLlxuICAgIDpsaWNlbnNlOiBCU0QsIHNlZSBMSUNFTlNFIGZvciBkZXRhaWxzLlxuXCJcIlwiXG5cbmltcG9ydCByZVxuXG5fX2FsbF9fID0gWydnZXRfZmlsZXR5cGVfZnJvbV9idWZmZXInXVxuXG5cbm1vZGVsaW5lX3JlID0gcmUuY29tcGlsZShyJycnXG4gICAgKD86IHZpIHwgdmltIHwgZXggKSAoPzogWzw9Pl0/IFxcZCogKT8gOlxuICAgIC4qICg/OiBmdCB8IGZpbGV0eXBlIHwgc3luIHwgc3ludGF4ICkgPSAoIFteOlxcc10rIClcbicnJywgcmUuVkVSQk9TRSlcblxuXG5kZWYgZ2V0X2ZpbGV0eXBlX2Zyb21fbGluZShsKTpcbiAgICBtID0gbW9kZWxpbmVfcmUuc2VhcmNoKGwpXG4gICAgaWYgbTpcbiAgICAgICAgcmV0dXJuIG0uZ3JvdXAoMSlcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9BY3RpdmF0ZS5wczFcbjwjXG4uU3lub3BzaXNcbkFjdGl2YXRlIGEgUHl0aG9uIHZpcnR1YWwgZW52aXJvbm1lbnQgZm9yIHRoZSBjdXJyZW50IFBvd2VyU2hlbGwgc2Vzc2lvbi5cblxuLkRlc2NyaXB0aW9uXG5QdXNoZXMgdGhlIHB5dGhvbiBleGVjdXRhYmxlIGZvciBhIHZpcnR1YWwgZW52aXJvbm1lbnQgdG8gdGhlIGZyb250IG9mIHRoZVxuJEVudjpQQVRIIGVudmlyb25tZW50IHZhcmlhYmxlIGFuZCBzZXRzIHRoZSBwcm9tcHQgdG8gc2lnbmlmeSB0aGF0IHlvdSBhcmVcbmluIGEgUHl0aG9uIHZpcnR1YWwgZW52aXJvbm1lbnQuIE1ha2VzIHVzZSBvZiB0aGUgY29tbWFuZCBsaW5lIHN3aXRjaGVzIGFzXG53ZWxsIGFzIHRoZSBgcHl2ZW52LmNmZ2AgZmlsZSB2YWx1ZXMgcHJlc2VudCBpbiB0aGUgdmlydHVhbCBlbnZpcm9ubWVudC5cblxuLlBhcmFtZXRlciBWZW52RGlyXG5QYXRoIHRvIHRoZSBkaXJlY3RvcnkgdGhhdCBjb250YWlucyB0aGUgdmlydHVhbCBlbnZpcm9ubWVudCB0byBhY3RpdmF0ZS4gVGhlXG5kZWZhdWx0IHZhbHVlIGZvciB0aGlzIGlzIHRoZSBwYXJlbnQgb2YgdGhlIGRpcmVjdG9yeSB0aGF0IHRoZSBBY3RpdmF0ZS5wczFcbnNjcmlwdCBpcyBsb2NhdGVkIHdpdGhpbi5cbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9hY3RpdmF0ZVxuIyBUaGlzIGZpbGUgbXVzdCBiZSB1c2VkIHdpdGggXCJzb3VyY2UgYmluL2FjdGl2YXRlXCIgKmZyb20gYmFzaCpcbiMgeW91IGNhbm5vdCBydW4gaXQgZGlyZWN0bHlcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX3ZlbmRvci9kaXN0bGliL3NjcmlwdHMucHlcbiMgLSotIGNvZGluZzogdXRmLTggLSotXG4jXG4jIENvcHlyaWdodCAoQykgMjAxMy0yMDE1IFZpbmF5IFNhamlwLlxuIyBMaWNlbnNlZCB0byB0aGUgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24gdW5kZXIgYSBjb250cmlidXRvciBhZ3JlZW1lbnQuXG4jIFNlZSBMSUNFTlNFLnR4dCBhbmQgQ09OVFJJQlVUT1JTLnR4dC5cbiNcbmZyb20gaW8gaW1wb3J0IEJ5dGVzSU9cbmltcG9ydCBsb2dnaW5nXG5pbXBvcnQgb3NcbmltcG9ydCByZVxuaW1wb3J0IHN0cnVjdFxuaW1wb3J0IHN5c1xuXG5mcm9tIC5jb21wYXQgaW1wb3J0IHN5c2NvbmZpZywgZGV0ZWN0X2VuY29kaW5nLCBaaXBGaWxlXG5mcm9tIC5yZXNvdXJjZXMgaW1wb3J0IGZpbmRlclxuZnJvbSAudXRpbCBpbXBvcnQgKEZpbGVPcGVyYXRvciwgZ2V0X2V4cG9ydF9lbnRyeSwgY29udmVydF9wYXRoLFxuICAgICAgICAgICAgICAgICAgIGdldF9leGVjdXRhYmxlLCBnZXRfcGxhdGZvcm0sIGluX3ZlbnYpXG4uLi5cblxuIyBjaGVjayBpZiBQeXRob24gaXMgY2FsbGVkIG9uIHRoZSBmaXJzdCBsaW5lIHdpdGggdGhpcyBleHByZXNzaW9uXG5GSVJTVF9MSU5FX1JFID0gcmUuY29tcGlsZShiJ14jIS4qcHl0aG9udz9bMC05Ll0qKFsgXFx0XS4qKT8kJylcblNDUklQVF9URU1QTEFURSA9IHInJycjIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuaW1wb3J0IHJlXG5pbXBvcnQgc3lzXG5mcm9tICUobW9kdWxlKXMgaW1wb3J0ICUoaW1wb3J0X25hbWUpc1xuaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzpcbiAgICBzeXMuYXJndlswXSA9IHJlLnN1YihyJygtc2NyaXB0XFwucHl3fFxcLmV4ZSk/JCcsICcnLCBzeXMuYXJndlswXSlcbiAgICBzeXMuZXhpdCglKGZ1bmMpcygpKVxuJycnXG4uLi5cblxuICAgICMgUHVibGljIEFQSSBmb2xsb3dzXG5cbiAgICBkZWYgbWFrZShzZWxmLCBzcGVjaWZpY2F0aW9uLCBvcHRpb25zPU5vbmUpOlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgTWFrZSBhIHNjcmlwdC5cblxuICAgICAgICA6cGFyYW0gc3BlY2lmaWNhdGlvbjogVGhlIHNwZWNpZmljYXRpb24sIHdoaWNoIGlzIGVpdGhlciBhIHZhbGlkIGV4cG9ydFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkgc3BlY2lmaWNhdGlvbiAodG8gbWFrZSBhIHNjcmlwdCBmcm9tIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxhYmxlKSBvciBhIGZpbGVuYW1lICh0byBtYWtlIGEgc2NyaXB0IGJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5aW5nIGZyb20gYSBzb3VyY2UgbG9jYXRpb24pLlxuICAgICAgICA6cGFyYW0gb3B0aW9uczogQSBkaWN0aW9uYXJ5IG9mIG9wdGlvbnMgY29udHJvbGxpbmcgc2NyaXB0IGdlbmVyYXRpb24uXG4gICAgICAgIDpyZXR1cm46IEEgbGlzdCBvZiBhbGwgYWJzb2x1dGUgcGF0aG5hbWVzIHdyaXR0ZW4gdG8uXG4gICAgICAgIFwiXCJcIlxuICAgICAgICBmaWxlbmFtZXMgPSBbXVxuICAgICAgICBlbnRyeSA9IGdldF9leHBvcnRfZW50cnkoc3BlY2lmaWNhdGlvbilcbiAgICAgICAgaWYgZW50cnkgaXMgTm9uZTpcbiAgICAgICAgICAgIHNlbGYuX2NvcHlfc2NyaXB0KHNwZWNpZmljYXRpb24sIGZpbGVuYW1lcylcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIHNlbGYuX21ha2Vfc2NyaXB0KGVudHJ5LCBmaWxlbmFtZXMsIG9wdGlvbnM9b3B0aW9ucylcbiAgICAgICAgcmV0dXJuIGZpbGVuYW1lc1xuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL3JpY2gvc2NvcGUucHlcbmZyb20gY29sbGVjdGlvbnMuYWJjIGltcG9ydCBNYXBwaW5nXG5mcm9tIHR5cGluZyBpbXBvcnQgVFlQRV9DSEVDS0lORywgQW55LCBPcHRpb25hbCwgVHVwbGVcblxuZnJvbSAuaGlnaGxpZ2h0ZXIgaW1wb3J0IFJlcHJIaWdobGlnaHRlclxuZnJvbSAucGFuZWwgaW1wb3J0IFBhbmVsXG5mcm9tIC5wcmV0dHkgaW1wb3J0IFByZXR0eVxuZnJvbSAudGFibGUgaW1wb3J0IFRhYmxlXG5mcm9tIC50ZXh0IGltcG9ydCBUZXh0LCBUZXh0VHlwZVxuXG5pZiBUWVBFX0NIRUNLSU5HOlxuICAgIGZyb20gLmNvbnNvbGUgaW1wb3J0IENvbnNvbGVSZW5kZXJhYmxlXG5cblxuZGVmIHJlbmRlcl9zY29wZShcbiAgICBzY29wZTogXCJNYXBwaW5nW3N0ciwgQW55XVwiLFxuICAgICosXG4gICAgdGl0bGU6IE9wdGlvbmFsW1RleHRUeXBlXSA9IE5vbmUsXG4gICAgc29ydF9rZXlzOiBib29sID0gVHJ1ZSxcbiAgICBpbmRlbnRfZ3VpZGVzOiBib29sID0gRmFsc2UsXG4gICAgbWF4X2xlbmd0aDogT3B0aW9uYWxbaW50XSA9IE5vbmUsXG4gICAgbWF4X3N0cmluZzogT3B0aW9uYWxbaW50XSA9IE5vbmUsXG4pIC0+IFwiQ29uc29sZVJlbmRlcmFibGVcIjpcbiAgICBcIlwiXCJSZW5kZXIgcHl0aG9uIHZhcmlhYmxlcyBpbiBhIGdpdmVuIHNjb3BlLlxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL3JpY2gvanVweXRlci5weVxuZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgRGljdCwgSXRlcmFibGUsIExpc3RcblxuZnJvbSAuIGltcG9ydCBnZXRfY29uc29sZVxuZnJvbSAuc2VnbWVudCBpbXBvcnQgU2VnbWVudFxuZnJvbSAudGVybWluYWxfdGhlbWUgaW1wb3J0IERFRkFVTFRfVEVSTUlOQUxfVEhFTUVcblxuSlVQWVRFUl9IVE1MX0ZPUk1BVCA9IFwiXCJcIlxcXG48cHJlIHN0eWxlPVwid2hpdGUtc3BhY2U6cHJlO292ZXJmbG93LXg6YXV0bztsaW5lLWhlaWdodDpub3JtYWw7Zm9udC1mYW1pbHk6TWVubG8sJ0RlamFWdSBTYW5zIE1vbm8nLGNvbnNvbGFzLCdDb3VyaWVyIE5ldycsbW9ub3NwYWNlXCI+e2NvZGV9PC9wcmU+XG5cIlwiXCJcblxuXG5jbGFzcyBKdXB5dGVyUmVuZGVyYWJsZTpcbiAgICBcIlwiXCJBIHNoaW0gdG8gd3JpdGUgaHRtbCB0byBKdXB5dGVyIG5vdGVib29rLlwiXCJcIlxuXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGh0bWw6IHN0ciwgdGV4dDogc3RyKSAtPiBOb25lOlxuICAgICAgICBzZWxmLmh0bWwgPSBodG1sXG4gICAgICAgIHNlbGYudGV4dCA9IHRleHRcblxuICAgIGRlZiBfcmVwcl9taW1lYnVuZGxlXyhcbiAgICAgICAgc2VsZiwgaW5jbHVkZTogSXRlcmFibGVbc3RyXSwgZXhjbHVkZTogSXRlcmFibGVbc3RyXSwgKiprd2FyZ3M6IEFueVxuICAgICkgLT4gRGljdFtzdHIsIHN0cl06XG4gICAgICAgIGRhdGEgPSB7XCJ0ZXh0L3BsYWluXCI6IHNlbGYudGV4dCwgXCJ0ZXh0L2h0bWxcIjogc2VsZi5odG1sfVxuICAgICAgICBpZiBpbmNsdWRlOlxuICAgICAgICAgICAgZGF0YSA9IHtrOiB2IGZvciAoaywgdikgaW4gZGF0YS5pdGVtcygpIGlmIGsgaW4gaW5jbHVkZX1cbiAgICAgICAgaWYgZXhjbHVkZTpcbiAgICAgICAgICAgIGRhdGEgPSB7azogdiBmb3IgKGssIHYpIGluIGRhdGEuaXRlbXMoKSBpZiBrIG5vdCBpbiBleGNsdWRlfVxuICAgICAgICByZXR1cm4gZGF0YVxuXG5cbmNsYXNzIEp1cHl0ZXJNaXhpbjpcbiAgICBcIlwiXCJBZGQgdG8gYW4gUmljaCByZW5kZXJhYmxlIHRvIG1ha2UgaXQgcmVuZGVyIGluIEp1cHl0ZXIgbm90ZWJvb2suXCJcIlwiXG5cbiAgICBfX3Nsb3RzX18gPSAoKVxuXG4gICAgZGVmIF9yZXByX21pbWVidW5kbGVfKFxuICAgICAgICBzZWxmLCBpbmNsdWRlOiBJdGVyYWJsZVtzdHJdLCBleGNsdWRlOiBJdGVyYWJsZVtzdHJdLCAqKmt3YXJnczogQW55XG4gICAgKSAtPiBEaWN0W3N0ciwgc3RyXTpcbiAgICAgICAgY29uc29sZSA9IGdldF9jb25zb2xlKClcbiAgICAgICAgc2VnbWVudHMgPSBsaXN0KGNvbnNvbGUucmVuZGVyKHNlbGYsIGNvbnNvbGUub3B0aW9ucykpICAjIHR5cGU6IGlnbm9yZVxuICAgICAgICBodG1sID0gX3JlbmRlcl9zZWdtZW50cyhzZWdtZW50cylcbiAgICAgICAgdGV4dCA9IGNvbnNvbGUuX3JlbmRlcl9idWZmZXIoc2VnbWVudHMpXG4gICAgICAgIGRhdGEgPSB7XCJ0ZXh0L3BsYWluXCI6IHRleHQsIFwidGV4dC9odG1sXCI6IGh0bWx9XG4gICAgICAgIGlmIGluY2x1ZGU6XG4gICAgICAgICAgICBkYXRhID0ge2s6IHYgZm9yIChrLCB2KSBpbiBkYXRhLml0ZW1zKCkgaWYgayBpbiBpbmNsdWRlfVxuICAgICAgICBpZiBleGNsdWRlOlxuICAgICAgICAgICAgZGF0YSA9IHtrOiB2IGZvciAoaywgdikgaW4gZGF0YS5pdGVtcygpIGlmIGsgbm90IGluIGV4Y2x1ZGV9XG4gICAgICAgIHJldHVybiBkYXRhXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL192ZW5kb3IvcmljaC9qc29uLnB5XG4uLi5cblxuXG5pZiBfX25hbWVfXyA9PSBcIl9fbWFpbl9fXCI6XG5cbiAgICBpbXBvcnQgYXJncGFyc2VcbiAgICBpbXBvcnQgc3lzXG5cbiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcihkZXNjcmlwdGlvbj1cIlByZXR0eSBwcmludCBqc29uXCIpXG4gICAgcGFyc2VyLmFkZF9hcmd1bWVudChcbiAgICAgICAgXCJwYXRoXCIsXG4gICAgICAgIG1ldGF2YXI9XCJQQVRIXCIsXG4gICAgICAgIGhlbHA9XCJwYXRoIHRvIGZpbGUsIG9yIC0gZm9yIHN0ZGluXCIsXG4gICAgKVxuICAgIHBhcnNlci5hZGRfYXJndW1lbnQoXG4gICAgICAgIFwiLWlcIixcbiAgICAgICAgXCItLWluZGVudFwiLFxuICAgICAgICBtZXRhdmFyPVwiU1BBQ0VTXCIsXG4gICAgICAgIHR5cGU9aW50LFxuICAgICAgICBoZWxwPVwiTnVtYmVyIG9mIHNwYWNlcyBpbiBhbiBpbmRlbnRcIixcbiAgICAgICAgZGVmYXVsdD0yLFxuICAgIClcbiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKVxuXG4gICAgZnJvbSBwaXAuX3ZlbmRvci5yaWNoLmNvbnNvbGUgaW1wb3J0IENvbnNvbGVcblxuICAgIGNvbnNvbGUgPSBDb25zb2xlKClcbiAgICBlcnJvcl9jb25zb2xlID0gQ29uc29sZShzdGRlcnI9VHJ1ZSlcblxuICAgIHRyeTpcbiAgICAgICAgaWYgYXJncy5wYXRoID09IFwiLVwiOlxuICAgICAgICAgICAganNvbl9kYXRhID0gc3lzLnN0ZGluLnJlYWQoKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgd2l0aCBvcGVuKGFyZ3MucGF0aCwgXCJydFwiKSBhcyBqc29uX2ZpbGU6XG4gICAgICAgICAgICAgICAganNvbl9kYXRhID0ganNvbl9maWxlLnJlYWQoKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXJyb3I6XG4gICAgICAgIGVycm9yX2NvbnNvbGUucHJpbnQoZlwiVW5hYmxlIHRvIHJlYWQge2FyZ3MucGF0aCFyfTsge2Vycm9yfVwiKVxuICAgICAgICBzeXMuZXhpdCgtMSlcblxuICAgIGNvbnNvbGUucHJpbnQoSlNPTihqc29uX2RhdGEsIGluZGVudD1hcmdzLmluZGVudCksIHNvZnRfd3JhcD1UcnVlKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3NldHVwdG9vbHMvbGF1bmNoLnB5XG5cIlwiXCJcbkxhdW5jaCB0aGUgUHl0aG9uIHNjcmlwdCBvbiB0aGUgY29tbWFuZCBsaW5lIGFmdGVyXG5zZXR1cHRvb2xzIGlzIGJvb3RzdHJhcHBlZCB2aWEgaW1wb3J0LlxuXCJcIlwiXG5cbiMgTm90ZSB0aGF0IHNldHVwdG9vbHMgZ2V0cyBpbXBvcnRlZCBpbXBsaWNpdGx5IGJ5IHRoZVxuIyBpbnZvY2F0aW9uIG9mIHRoaXMgc2NyaXB0IHVzaW5nIHB5dGhvbiAtbSBzZXR1cHRvb2xzLmxhdW5jaFxuXG5pbXBvcnQgdG9rZW5pemVcbmltcG9ydCBzeXNcblxuXG5kZWYgcnVuKCk6XG4gICAgXCJcIlwiXG4gICAgUnVuIHRoZSBzY3JpcHQgaW4gc3lzLmFyZ3ZbMV0gYXMgaWYgaXQgaGFkXG4gICAgYmVlbiBpbnZva2VkIG5hdHVyYWxseS5cbiAgICBcIlwiXCJcbiAgICBfX2J1aWx0aW5zX19cbiAgICBzY3JpcHRfbmFtZSA9IHN5cy5hcmd2WzFdXG4gICAgbmFtZXNwYWNlID0gZGljdChcbiAgICAgICAgX19maWxlX189c2NyaXB0X25hbWUsXG4gICAgICAgIF9fbmFtZV9fPSdfX21haW5fXycsXG4gICAgICAgIF9fZG9jX189Tm9uZSxcbiAgICApXG4gICAgc3lzLmFyZ3ZbOl0gPSBzeXMuYXJndlsxOl1cblxuICAgIG9wZW5fID0gZ2V0YXR0cih0b2tlbml6ZSwgJ29wZW4nLCBvcGVuKVxuICAgIHdpdGggb3Blbl8oc2NyaXB0X25hbWUpIGFzIGZpZDpcbiAgICAgICAgc2NyaXB0ID0gZmlkLnJlYWQoKVxuICAgIG5vcm1fc2NyaXB0ID0gc2NyaXB0LnJlcGxhY2UoJ1xcXFxyXFxcXG4nLCAnXFxcXG4nKVxuICAgIGNvZGUgPSBjb21waWxlKG5vcm1fc2NyaXB0LCBzY3JpcHRfbmFtZSwgJ2V4ZWMnKVxuICAgIGV4ZWMoY29kZSwgbmFtZXNwYWNlKVxuXG5cbmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6XG4gICAgcnVuKClcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX3ZlbmRvci9yaWNoL3Byb2dyZXNzX2Jhci5weVxuaW1wb3J0IG1hdGhcbmZyb20gZnVuY3Rvb2xzIGltcG9ydCBscnVfY2FjaGVcbmZyb20gdGltZSBpbXBvcnQgbW9ub3RvbmljXG5mcm9tIHR5cGluZyBpbXBvcnQgSXRlcmFibGUsIExpc3QsIE9wdGlvbmFsXG5cbmZyb20gLmNvbG9yIGltcG9ydCBDb2xvciwgYmxlbmRfcmdiXG5mcm9tIC5jb2xvcl90cmlwbGV0IGltcG9ydCBDb2xvclRyaXBsZXRcbmZyb20gLmNvbnNvbGUgaW1wb3J0IENvbnNvbGUsIENvbnNvbGVPcHRpb25zLCBSZW5kZXJSZXN1bHRcbmZyb20gLmp1cHl0ZXIgaW1wb3J0IEp1cHl0ZXJNaXhpblxuZnJvbSAubWVhc3VyZSBpbXBvcnQgTWVhc3VyZW1lbnRcbmZyb20gLnNlZ21lbnQgaW1wb3J0IFNlZ21lbnRcbmZyb20gLnN0eWxlIGltcG9ydCBTdHlsZSwgU3R5bGVUeXBlXG5cbiMgTnVtYmVyIG9mIGNoYXJhY3RlcnMgYmVmb3JlICdwdWxzZScgYW5pbWF0aW9uIHJlcGVhdHNcblBVTFNFX1NJWkUgPSAyMFxuXG5cbmNsYXNzIFByb2dyZXNzQmFyKEp1cHl0ZXJNaXhpbik6XG4gICAgXCJcIlwiUmVuZGVycyBhIChwcm9ncmVzcykgYmFyLiBVc2VkIGJ5IHJpY2gucHJvZ3Jlc3MuXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvc2V0dXB0b29scy9fZGlzdHV0aWxzL2NvbW1hbmQvYnVpbGRfc2NyaXB0cy5weVxuXCJcIlwiZGlzdHV0aWxzLmNvbW1hbmQuYnVpbGRfc2NyaXB0c1xuXG5JbXBsZW1lbnRzIHRoZSBEaXN0dXRpbHMgJ2J1aWxkX3NjcmlwdHMnIGNvbW1hbmQuXCJcIlwiXG5cbmltcG9ydCBvcywgcmVcbmZyb20gc3RhdCBpbXBvcnQgU1RfTU9ERVxuZnJvbSBkaXN0dXRpbHMgaW1wb3J0IHN5c2NvbmZpZ1xuZnJvbSBkaXN0dXRpbHMuY29yZSBpbXBvcnQgQ29tbWFuZFxuZnJvbSBkaXN0dXRpbHMuZGVwX3V0aWwgaW1wb3J0IG5ld2VyXG5mcm9tIGRpc3R1dGlscy51dGlsIGltcG9ydCBjb252ZXJ0X3BhdGhcbmZyb20gZGlzdHV0aWxzIGltcG9ydCBsb2dcbmltcG9ydCB0b2tlbml6ZVxuXG4jIGNoZWNrIGlmIFB5dGhvbiBpcyBjYWxsZWQgb24gdGhlIGZpcnN0IGxpbmUgd2l0aCB0aGlzIGV4cHJlc3Npb25cbmZpcnN0X2xpbmVfcmUgPSByZS5jb21waWxlKGInXiMhLipweXRob25bMC05Ll0qKFsgXFx0XS4qKT8kJylcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX3ZlbmRvci9yaWNoL2xpdmUucHlcbi4uLlxuXG4gICAgICAgICAgICBmb3IgZXhjaGFuZ2UgaW4gZXhjaGFuZ2VzOlxuICAgICAgICAgICAgICAgIGlmIGV4Y2hhbmdlID09IHNlbGVjdF9leGNoYW5nZTpcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDAuNClcbiAgICAgICAgICAgICAgICBpZiByYW5kb20ucmFuZGludCgwLCAxMCkgPCAxOlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhuZXh0KGV4YW1wbGVzKSlcbiAgICAgICAgICAgICAgICBleGNoYW5nZV9yYXRlX2RpY3RbKHNlbGVjdF9leGNoYW5nZSwgZXhjaGFuZ2UpXSA9IDIwMCAvIChcbiAgICAgICAgICAgICAgICAgICAgKHJhbmRvbS5yYW5kb20oKSAqIDMyMCkgKyAxXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmIGxlbihleGNoYW5nZV9yYXRlX2RpY3QpID4gbGVuKGV4Y2hhbmdlcykgLSAxOlxuICAgICAgICAgICAgICAgICAgICBleGNoYW5nZV9yYXRlX2RpY3QucG9wKGxpc3QoZXhjaGFuZ2VfcmF0ZV9kaWN0LmtleXMoKSlbMF0pXG4gICAgICAgICAgICAgICAgdGFibGUgPSBUYWJsZSh0aXRsZT1cIkV4Y2hhbmdlIFJhdGVzXCIpXG5cbiAgICAgICAgICAgICAgICB0YWJsZS5hZGRfY29sdW1uKFwiU291cmNlIEN1cnJlbmN5XCIpXG4gICAgICAgICAgICAgICAgdGFibGUuYWRkX2NvbHVtbihcIkRlc3RpbmF0aW9uIEN1cnJlbmN5XCIpXG4gICAgICAgICAgICAgICAgdGFibGUuYWRkX2NvbHVtbihcIkV4Y2hhbmdlIFJhdGVcIilcblxuICAgICAgICAgICAgICAgIGZvciAoKHNvdXJjZSwgZGVzdCksIGV4Y2hhbmdlX3JhdGUpIGluIGV4Y2hhbmdlX3JhdGVfZGljdC5pdGVtcygpOlxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5hZGRfcm93KFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZlwie2V4Y2hhbmdlX3JhdGU6LjRmfVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPVwicmVkXCIgaWYgZXhjaGFuZ2VfcmF0ZSA8IDEuMCBlbHNlIFwiZ3JlZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgIGxpdmVfdGFibGUudXBkYXRlKEFsaWduLmNlbnRlcih0YWJsZSkpXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL192ZW5kb3IvcmljaC9kZWZhdWx0X3N0eWxlcy5weVxuLi4uXG5cblxuaWYgX19uYW1lX18gPT0gXCJfX21haW5fX1wiOiAgIyBwcmFnbWE6IG5vIGNvdmVyXG4gICAgaW1wb3J0IGFyZ3BhcnNlXG4gICAgaW1wb3J0IGlvXG5cbiAgICBmcm9tIHBpcC5fdmVuZG9yLnJpY2guY29uc29sZSBpbXBvcnQgQ29uc29sZVxuICAgIGZyb20gcGlwLl92ZW5kb3IucmljaC50YWJsZSBpbXBvcnQgVGFibGVcbiAgICBmcm9tIHBpcC5fdmVuZG9yLnJpY2gudGV4dCBpbXBvcnQgVGV4dFxuXG4gICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoKVxuICAgIHBhcnNlci5hZGRfYXJndW1lbnQoXCItLWh0bWxcIiwgYWN0aW9uPVwic3RvcmVfdHJ1ZVwiLCBoZWxwPVwiRXhwb3J0IGFzIEhUTUwgdGFibGVcIilcbiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKVxuICAgIGh0bWw6IGJvb2wgPSBhcmdzLmh0Li4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZWVlMjk2MjgtYjJhOC00ZGNlLTk3ZDctODBlZGMxODMyNmI4O3Rvb2x1X3ZydHhfMDEzMUtMcFdDZTR1QncyOFlNcjk5OGczIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL192ZW5kb3IvcGVwNTE3L2NoZWNrLnB5XG4uLi5cblxuXG5kZWYgY2hlY2soc291cmNlX2Rpcik6XG4gICAgcHlwcm9qZWN0ID0gcGpvaW4oc291cmNlX2RpciwgJ3B5cHJvamVjdC50b21sJylcbiAgICBpZiBpc2ZpbGUocHlwcm9qZWN0KTpcbiAgICAgICAgbG9nLmluZm8oJ0ZvdW5kIHB5cHJvamVjdC50b21sJylcbiAgICBlbHNlOlxuICAgICAgICBsb2cuZXJyb3IoJ01pc3NpbmcgcHlwcm9qZWN0LnRvbWwnKVxuICAgICAgICByZXR1cm4gRmFsc2VcblxuICAgIHRyeTpcbiAgICAgICAgd2l0aCBpby5vcGVuKHB5cHJvamVjdCwgJ3JiJykgYXMgZjpcbiAgICAgICAgICAgIHB5cHJvamVjdF9kYXRhID0gdG9tbF9sb2FkKGYpXG4gICAgICAgICMgRW5zdXJlIHRoZSBtYW5kYXRvcnkgZGF0YSBjYW4gYmUgbG9hZGVkXG4gICAgICAgIGJ1aWxkc3lzID0gcHlwcm9qZWN0X2RhdGFbJ2J1aWxkLXN5c3RlbSddXG4gICAgICAgIHJlcXVpcmVzID0gYnVpbGRzeXNbJ3JlcXVpcmVzJ11cbiAgICAgICAgYmFja2VuZCA9IGJ1aWxkc3lzWydidWlsZC1iYWNrZW5kJ11cbiAgICAgICAgYmFja2VuZF9wYXRoID0gYnVpbGRzeXMuZ2V0KCdiYWNrZW5kLXBhdGgnKVxuICAgICAgICBsb2cuaW5mbygnTG9hZGVkIHB5cHJvamVjdC50b21sJylcbiAgICBleGNlcHQgKFRPTUxEZWNvZGVFcnJvciwgS2V5RXJyb3IpOlxuICAgICAgICBsb2cuZXJyb3IoXCJJbnZhbGlkIHB5cHJvamVjdC50b21sXCIsIGV4Y19pbmZvPVRydWUpXG4gICAgICAgIHJldHVybiBGYWxzZVxuXG4gICAgaG9va3MgPSBQZXA1MTdIb29rQ2FsbGVyKHNvdXJjZV9kaXIsIGJhY2tlbmQsIGJhY2tlbmRfcGF0aClcblxuICAgIHNkaXN0X29rID0gY2hlY2tfYnVpbGRfc2Rpc3QoaG9va3MsIHJlcXVpcmVzKVxuICAgIHdoZWVsX29rID0gY2hlY2tfYnVpbGRfd2hlZWwoaG9va3MsIHJlcXVpcmVzKVxuXG4gICAgaWYgbm90IHNkaXN0X29rOlxuICAgICAgICBsb2cud2FybmluZygnU2Rpc3QgY2hlY2tzIGZhaWxlZDsgc2Nyb2xsIHVwIHRvIHNlZScpXG4gICAgaWYgbm90IHdoZWVsX29rOlxuICAgICAgICBsb2cud2FybmluZygnV2hlZWwgY2hlY2tzIGZhaWxlZCcpXG5cbiAgICByZXR1cm4gc2Rpc3Rfb2tcblxuXG5kZWYgbWFpbihhcmd2PU5vbmUpOlxuICAgIGxvZy53YXJuaW5nKCdwZXA1MTcuY2hlY2sgaXMgZGVwcmVjYXRlZC4gJ1xuICAgICAgICAgICAgICAgICdDb25zaWRlciBzd2l0Y2hpbmcgdG8gaHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L2J1aWxkLycpXG5cbiAgICBhcCA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKClcbiAgICBhcC5hZGRfYXJndW1lbnQoXG4gICAgICAgICdzb3VyY2VfZGlyJyxcbiAgICAgICAgaGVscD1cIkEgZGlyZWN0b3J5IGNvbnRhaW5pbmcgcHlwcm9qZWN0LnRvbWxcIilcbiAgICBhcmdzID0gYXAucGFyc2VfYXJncyhhcmd2KVxuXG4gICAgZW5hYmxlX2NvbG91cmZ1bF9vdXRwdXQoKVxuXG4gICAgb2sgPSBjaGVjayhhcmdzLnNvdXJjZV9kaXIpXG5cbiAgICBpZiBvazpcbiAgICAgICAgcHJpbnQoYW5zaSgnQ2hlY2tzIHBhc3NlZCcsICdncmVlbicpKVxuICAgIGVsc2U6XG4gICAgICAgIHByaW50KGFuc2koJ0NoZWNrcyBmYWlsZWQnLCAncmVkJykpXG4gICAgICAgIHN5cy5leGl0KDEpXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9weXZlbnYuY2ZnXG5ob21lID0gL29wdC9hbmFjb25kYTMvYmluXG5pbmNsdWRlLXN5c3RlbS1zaXRlLXBhY2thZ2VzID0gZmFsc2VcbnZlcnNpb24gPSAzLjkuMTNcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX2ludGVybmFsL3B5cHJvamVjdC5weVxuaW1wb3J0IG9zXG5mcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBuYW1lZHR1cGxlXG5mcm9tIHR5cGluZyBpbXBvcnQgQW55LCBMaXN0LCBPcHRpb25hbFxuXG5mcm9tIHBpcC5fdmVuZG9yIGltcG9ydCB0b21saVxuZnJvbSBwaXAuX3ZlbmRvci5wYWNrYWdpbmcucmVxdWlyZW1lbnRzIGltcG9ydCBJbnZhbGlkUmVxdWlyZW1lbnQsIFJlcXVpcmVtZW50XG5cbmZyb20gcGlwLl9pbnRlcm5hbC5leGNlcHRpb25zIGltcG9ydCAoXG4gICAgSW5zdGFsbGF0aW9uRXJyb3IsXG4gICAgSW52YWxpZFB5UHJvamVjdEJ1aWxkUmVxdWlyZXMsXG4gICAgTWlzc2luZ1B5UHJvamVjdEJ1aWxkUmVxdWlyZXMsXG4pXG5cblxuZGVmIF9pc19saXN0X29mX3N0cihvYmo6IEFueSkgLT4gYm9vbDpcbiAgICByZXR1cm4gaXNpbnN0YW5jZShvYmosIGxpc3QpIGFuZCBhbGwoaXNpbnN0YW5jZShpdGVtLCBzdHIpIGZvciBpdGVtIGluIG9iailcblxuXG5kZWYgbWFrZV9weXByb2plY3RfcGF0aCh1bnBhY2tlZF9zb3VyY2VfZGlyZWN0b3J5OiBzdHIpIC0+IHN0cjpcbiAgICByZXR1cm4gb3MucGF0aC5qb2luKHVucGFja2VkX3NvdXJjZV9kaXJlY3RvcnksIFwicHlwcm9qZWN0LnRvbWxcIilcblxuXG5CdWlsZFN5c3RlbURldGFpbHMgPSBuYW1lZHR1cGxlKFxuICAgIFwiQnVpbGRTeXN0ZW1EZXRhaWxzXCIsIFtcInJlcXVpcmVzXCIsIFwiYmFja2VuZFwiLCBcImNoZWNrXCIsIFwiYmFja2VuZF9wYXRoXCJdXG4pXG5cblxuZGVmIGxvYWRfcHlwcm9qZWN0X3RvbWwoXG4gICAgdXNlX3BlcDUxNzogT3B0aW9uYWxbYm9vbF0sIHB5cHJvamVjdF90b21sOiBzdHIsIHNldHVwX3B5OiBzdHIsIHJlcV9uYW1lOiBzdHJcbikgLT4gT3B0aW9uYWxbQnVpbGRTeXN0ZW1EZXRhaWxzXTpcbiAgICBcIlwiXCJMb2FkIHRoZSBweXByb2plY3QudG9tbCBmaWxlLlxuXG4gICAgUGFyYW1ldGVyczpcbiAgICAgICAgdXNlX3BlcDUxNyAtIEhhcyB0aGUgdXNlciByZXF1ZXN0ZWQgUEVQIDUxNyBwcm9jZXNzaW5nPyBOb25lXG4gICAgICAgICAgICAgICAgICAgICBtZWFucyB0aGUgdXNlciBoYXNuJ3QgZXhwbGljaXRseSBzcGVjaWZpZWQuXG4gICAgICAgIHB5cHJvamVjdF90b21sIC0gTG9jYXRpb24gb2YgdGhlIHByb2plY3QncyBweXByb2plY3QudG9tbCBmaWxlXG4gICAgICAgIHNldHVwX3B5IC0gTG9jYXRpb24gb2YgdGhlIHByb2plY3QncyBzZXR1cC5weSBmaWxlXG4gICAgICAgIHJlcV9uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHJlcXVpcmVtZW50IHdlJ3JlIHByb2Nlc3NpbmcgKGZvclxuICAgICAgICAgICAgICAgICAgIGVycm9yIHJlcG9ydGluZylcblxuICAgIFJldHVybnM6XG4gICAgICAgIE5vbmUgaWYgd2Ugc2hvdWxkIHVzZSB0aGUgbGVnYWN5IGNvZGUgcGF0aCwgb3RoZXJ3aXNlIGEgdHVwbGVcbiAgICAgICAgKFxuICAgICAgICAgICAgcmVxdWlyZW1lbnRzIGZyb20gcHlwcm9qZWN0LnRvbWwsXG4gICAgICAgICAgICBuYW1lIG9mIFBFUCA1MTcgYmFja2VuZCxcbiAgICAgICAgICAgIHJlcXVpcmVtZW50cyB3ZSBzaG91bGQgY2hlY2sgYXJlIGluc3RhbGxlZCBhZnRlciBzZXR0aW5nXG4gICAgICAgICAgICAgICAgdXAgdGhlIGJ1aWxkIGVudmlyb25tZW50XG4gICAgICAgICAgICBkaXJlY3RvcnkgcGF0aHMgdG8gaW1wb3J0IHRoZSBiYWNrZW5kIGZyb20gKGJhY2tlbmQtcGF0aCksXG4gICAgICAgICAgICAgICAgcmVsYXRpdmUgdG8gdGhlIHByb2plY3Qgcm9vdC5cbiAgICAgICAgKVxuICAgIFwiXCJcIlxuICAgIGhhc19weXByb2plY3QgPSBvcy5wYXRoLmlzZmlsZShweXByb2plY3RfdG9tbClcbiAgICBoYXNfc2V0dXAgPSBvcy5wYXRoLmlzZmlsZShzZXR1cF9weSlcblxuICAgIGlmIG5vdCBoYXNfcHlwcm9qZWN0IGFuZCBub3QgaGFzX3NldHVwOlxuICAgICAgICByYWlzZSBJbnN0YWxsYXRpb25FcnJvcihcbiAgICAgICAgICAgIGZcIntyZXFfbmFtZX0gZG9lcyBub3QgYXBwZWFyIHRvIGJlIGEgUHl0aG9uIHByb2plY3Q6IFwiXG4gICAgICAgICAgICBmXCJuZWl0aGVyICdzZXR1cC5weScgbm9yICdweXByb2plY3QudG9tbCcgZm91bmQuXCJcbiAgICAgICAgKVxuXG4gICAgaWYgaGFzX3B5cHJvamVjdDpcbiAgICAgICAgd2l0aCBvcGVuKHB5cHJvamVjdF90b21sLCBlbmNvZGluZz1cInV0Zi04XCIpIGFzIGY6XG4gICAgICAgICAgICBwcF90b21sID0gdG9tbGkubG9hZHMoZi5yZWFkKCkpXG4gICAgICAgIGJ1aWxkX3N5c3RlbSA9IHBwX3RvbWwuZ2V0KFwiYnVpbGQtc3lzdGVtXCIpXG4gICAgZWxzZTpcbiAgICAgICAgYnVpbGRfc3lzdGVtID0gTm9uZVxuLi4uXG5cbiAgICBpZiBidWlsZF9zeXN0ZW0gaXMgTm9uZTpcbiAgICAgICAgIyBFaXRoZXIgdGhlIHVzZXIgaGFzIGEgcHlwcm9qZWN0LnRvbWwgd2l0aCBubyBidWlsZC1zeXN0ZW1cbiAgICAgICAgIyBzZWN0aW9uLCBvciB0aGUgdXNlciBoYXMgbm8gcHlwcm9qZWN0LnRvbWwsIGJ1dCBoYXMgb3B0ZWQgaW5cbiAgICAgICAgIyBleHBsaWNpdGx5IHZpYSAtLXVzZS1wZXA1MTcuXG4gICAgICAgICMgSW4gdGhlIGFic2VuY2Ugb2YgYW55IGV4cGxpY2l0IGJhY2tlbmQgc3BlY2lmaWNhdGlvbiwgd2VcbiAgICAgICAgIyBhc3N1bWUgdGhlIHNldHVwdG9vbHMgYmFja2VuZCB0aGF0IG1vc3QgY2xvc2VseSBlbXVsYXRlcyB0aGVcbiAgICAgICAgIyB0cmFkaXRpb25hbCBkaXJlY3Qgc2V0dXAucHkgZXhlY3V0aW9uLCBhbmQgcmVxdWlyZSB3aGVlbCBhbmRcbiAgICAgICAgIyBhIHZlcnNpb24gb2Ygc2V0dXB0b29scyB0aGF0IHN1cHBvcnRzIHRoYXQgYmFja2VuZC5cblxuICAgICAgICBidWlsZF9zeXN0ZW0gPSB7XG4gICAgICAgICAgICBcInJlcXVpcmVzXCI6IFtcInNldHVwdG9vbHM+PTQwLjguMFwiLCBcIndoZWVsXCJdLFxuICAgICAgICAgICAgXCJidWlsZC1iYWNrZW5kXCI6IFwic2V0dXB0b29scy5idWlsZF9tZXRhOl9fbGVnYWN5X19cIixcbiAgICAgICAgfVxuLi4uXG4gICAgICAgICMgZXhlY3V0ZSBzZXR1cC5weSwgYnV0IG5ldmVyIGNvbnNpZGVyZWQgbmVlZGluZyB0byBtZW50aW9uIHRoZSBidWlsZFxuICAgICAgICAjIHRvb2xzIHRoZW1zZWx2ZXMuIFRoZSBvcmlnaW5hbCBQRVAgNTE4IGNvZGUgaGFkIGEgc2ltaWxhciBjaGVjayAoYnV0XG4gICAgICAgICMgaW1wbGVtZW50ZWQgaW4gYSBkaWZmZXJlbnQgd2F5KS5cbiAgICAgICAgYmFja2VuZCA9IFwic2V0dXB0b29scy5idWlsZF9tZXRhOl9fbGVnYWN5X19cIlxuICAgICAgICBjaGVjayA9IFtcInNldHVwdG9vbHM+PTQwLjguMFwiLCBcIndoZWVsXCJdXG5cbiAgICByZXR1cm4gQnVpbGRTeXN0ZW1EZXRhaWxzKHJlcXVpcmVzLCBiYWNrZW5kLCBjaGVjaywgYmFja2VuZF9wYXRoKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvYmluL3BpcFxuIyEvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9weXRob25cbiMgLSotIGNvZGluZzogdXRmLTggLSotXG5pbXBvcnQgcmVcbmltcG9ydCBzeXNcbmZyb20gcGlwLl9pbnRlcm5hbC5jbGkubWFpbiBpbXBvcnQgbWFpblxuaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzpcbiAgICBzeXMuYXJndlswXSA9IHJlLnN1YihyJygtc2NyaXB0XFwucHl3fFxcLmV4ZSk/JCcsICcnLCBzeXMuYXJndlswXSlcbiAgICBzeXMuZXhpdChtYWluKCkpXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvX2Rpc3R1dGlsc19oYWNrL19faW5pdF9fLnB5XG4uLi5cblxuXG5kZWYgY2xlYXJfZGlzdHV0aWxzKCk6XG4gICAgaWYgJ2Rpc3R1dGlscycgbm90IGluIHN5cy5tb2R1bGVzOlxuICAgICAgICByZXR1cm5cbiAgICB3YXJuaW5ncy53YXJuKFwiU2V0dXB0b29scyBpcyByZXBsYWNpbmcgZGlzdHV0aWxzLlwiKVxuICAgIG1vZHMgPSBbbmFtZSBmb3IgbmFtZSBpbiBzeXMubW9kdWxlcyBpZiByZS5tYXRjaChyJ2Rpc3R1dGlsc1xcYicsIG5hbWUpXVxuICAgIGZvciBuYW1lIGluIG1vZHM6XG4gICAgICAgIGRlbCBzeXMubW9kdWxlc1tuYW1lXVxuXG5cbmRlZiBlbmFibGVkKCk6XG4gICAgXCJcIlwiXG4gICAgQWxsb3cgc2VsZWN0aW9uIG9mIGRpc3R1dGlscyBieSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAgICBcIlwiXCJcbiAgICB3aGljaCA9IG9zLmVudmlyb24uZ2V0KCdTRVRVUFRPT0xTX1VTRV9ESVNUVVRJTFMnLCAnc3RkbGliJylcbiAgICByZXR1cm4gd2hpY2ggPT0gJ2xvY2FsJ1xuXG5cbmRlZiBlbnN1cmVfbG9jYWxfZGlzdHV0aWxzKCk6XG4gICAgY2xlYXJfZGlzdHV0aWxzKClcbiAgICBkaXN0dXRpbHMgPSBpbXBvcnRsaWIuaW1wb3J0X21vZHVsZSgnc2V0dXB0b29scy5fZGlzdHV0aWxzJylcbiAgICBkaXN0dXRpbHMuX19uYW1lX18gPSAnZGlzdHV0aWxzJ1xuICAgIHN5cy5tb2R1bGVzWydkaXN0dXRpbHMnXSA9IGRpc3R1dGlsc1xuXG4gICAgIyBzYW5pdHkgY2hlY2sgdGhhdCBzdWJtb2R1bGVzIGxvYWQgYXMgZXhwZWN0ZWRcbiAgICBjb3JlID0gaW1wb3J0bGliLmltcG9ydF9tb2R1bGUoJ2Rpc3R1dGlscy5jb3JlJylcbiAgICBhc3NlcnQgJ19kaXN0dXRpbHMnIGluIGNvcmUuX19maWxlX18sIGNvcmUuX19maWxlX19cbi4uLlxuXG4gICAgQHN0YXRpY21ldGhvZFxuICAgIGRlZiBwaXBfaW1wb3J0ZWRfZHVyaW5nX2J1aWxkKCk6XG4gICAgICAgIFwiXCJcIlxuICAgICAgICBEZXRlY3QgaWYgcGlwIGlzIGJlaW5nIGltcG9ydGVkIGluIGEgYnVpbGQgc2NyaXB0LiBSZWYgIzIzNTUuXG4gICAgICAgIFwiXCJcIlxuICAgICAgICBpbXBvcnQgdHJhY2ViYWNrXG4gICAgICAgIHJldHVybiBhbnkoXG4gICAgICAgICAgICBmcmFtZS5mX2dsb2JhbHNbJ19fZmlsZV9fJ10uZW5kc3dpdGgoJ3NldHVwLnB5JylcbiAgICAgICAgICAgIGZvciBmcmFtZSwgbGluZSBpbiB0cmFjZWJhY2sud2Fsa19zdGFjayhOb25lKVxuICAgICAgICApXG5cblxuRElTVFVUSUxTX0ZJTkRFUiA9IERpc3R1dGlsc01ldGFGaW5kZXIoKVxuXG5cbmRlZiBhZGRfc2hpbSgpOlxuICAgIHN5cy5tZXRhX3BhdGguaW5zZXJ0KDAsIERJU1RVVElMU19GSU5ERVIpXG5cblxuZGVmIHJlbW92ZV9zaGltKCk6XG4gICAgdHJ5OlxuICAgICAgICBzeXMubWV0YV9wYXRoLnJlbW92ZShESVNUVVRJTFNfRklOREVSKVxuICAgIGV4Y2VwdCBWYWx1ZUVycm9yOlxuICAgICAgICBwYXNzXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvc2V0dXB0b29scy9zY3JpcHQudG1wbFxuIyBFQVNZLUlOU1RBTEwtU0NSSVBUOiAlKHNwZWMpciwlKHNjcmlwdF9uYW1lKXJcbl9fcmVxdWlyZXNfXyA9ICUoc3BlYylyXG5fX2ltcG9ydF9fKCdwa2dfcmVzb3VyY2VzJykucnVuX3NjcmlwdCglKHNwZWMpciwgJShzY3JpcHRfbmFtZSlyKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL3BlcDUxNy9idWlsZC5weVxuLi4uXG5cblxuZGVmIGxvYWRfc3lzdGVtKHNvdXJjZV9kaXIpOlxuICAgIFwiXCJcIlxuICAgIExvYWQgdGhlIGJ1aWxkIHN5c3RlbSBmcm9tIGEgc291cmNlIGRpciAocHlwcm9qZWN0LnRvbWwpLlxuICAgIFwiXCJcIlxuICAgIHB5cHJvamVjdCA9IG9zLnBhdGguam9pbihzb3VyY2VfZGlyLCAncHlwcm9qZWN0LnRvbWwnKVxuICAgIHdpdGggaW8ub3BlbihweXByb2plY3QsICdyYicpIGFzIGY6XG4gICAgICAgIHB5cHJvamVjdF9kYXRhID0gdG9tbF9sb2FkKGYpXG4gICAgcmV0dXJuIHB5cHJvamVjdF9kYXRhWydidWlsZC1zeXN0ZW0nXVxuXG5cbmRlZiBjb21wYXRfc3lzdGVtKHNvdXJjZV9kaXIpOlxuICAgIFwiXCJcIlxuICAgIEdpdmVuIGEgc291cmNlIGRpciwgYXR0ZW1wdCB0byBnZXQgYSBidWlsZCBzeXN0ZW0gYmFja2VuZFxuICAgIGFuZCByZXF1aXJlbWVudHMgZnJvbSBweXByb2plY3QudG9tbC4gRmFsbGJhY2sgdG9cbiAgICBzZXR1cHRvb2xzIGJ1dCBvbmx5IGlmIHRoZSBmaWxlIHdhcyBub3QgZm91bmQgb3IgYSBidWlsZFxuICAgIHN5c3RlbSB3YXMgbm90IGluZGljYXRlZC5cbiAgICBcIlwiXCJcbiAgICB0cnk6XG4gICAgICAgIHN5c3RlbSA9IGxvYWRfc3lzdGVtKHNvdXJjZV9kaXIpXG4gICAgZXhjZXB0IChGaWxlTm90Rm91bmRFcnJvciwgS2V5RXJyb3IpOlxuICAgICAgICBzeXN0ZW0gPSB7fVxuICAgIHN5c3RlbS5zZXRkZWZhdWx0KFxuICAgICAgICAnYnVpbGQtYmFja2VuZCcsXG4gICAgICAgICdzZXR1cHRvb2xzLmJ1aWxkX21ldGE6X19sZWdhY3lfXycsXG4gICAgKVxuICAgIHN5c3RlbS5zZXRkZWZhdWx0KCdyZXF1aXJlcycsIFsnc2V0dXB0b29scycsICd3aGVlbCddKVxuICAgIHJldHVybiBzeXN0ZW1cbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9waXAzXG4jIS9Vc2Vycy9ob3NzZWluLmdsbS9Qcm9qZWN0cy9EamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvYmluL3B5dGhvblxuIyAtKi0gY29kaW5nOiB1dGYtOCAtKi1cbmltcG9ydCByZVxuaW1wb3J0IHN5c1xuZnJvbSBwaXAuX2ludGVybmFsLmNsaS5tYWluIGltcG9ydCBtYWluXG5pZiBfX25hbWVfXyA9PSAnX19tYWluX18nOlxuICAgIHN5cy5hcmd2WzBdID0gcmUuc3ViKHInKC1zY3JpcHRcXC5weXd8XFwuZXhlKT8kJywgJycsIHN5cy5hcmd2WzBdKVxuICAgIHN5cy5leGl0KG1haW4oKSlcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9BY3RpdmF0ZS5wczFcbi4uLlxuXG4uUGFyYW1ldGVyIENvbmZpZ0RpclxuUGF0aCB0byB0aGUgZGlyZWN0b3J5IHRoYXQgY29udGFpbnMgdGhlIGBweXZlbnYuY2ZnYCBmaWxlLlxuIz5cbmZ1bmN0aW9uIEdldC1QeVZlbnZDb25maWcoXG4gICAgW1N0cmluZ11cbiAgICAkQ29uZmlnRGlyXG4pIHtcbiAgICBXcml0ZS1WZXJib3NlIFwiR2l2ZW4gQ29uZmlnRGlyPSRDb25maWdEaXIsIG9idGFpbiB2YWx1ZXMgaW4gcHl2ZW52LmNmZ1wiXG5cbiAgICAjIEVuc3VyZSB0aGUgZmlsZSBleGlzdHMsIGFuZCBpc3N1ZSBhIHdhcm5pbmcgaWYgaXQgZG9lc24ndCAoYnV0IHN0aWxsIGFsbG93IHRoZSBmdW5jdGlvbiB0byBjb250aW51ZSkuXG4gICAgJHB5dmVudkNvbmZpZ1BhdGggPSBKb2luLVBhdGggLVJlc29sdmUgLVBhdGggJENvbmZpZ0RpciAtQ2hpbGRQYXRoICdweXZlbnYuY2ZnJyAtRXJyb3JBY3Rpb24gQ29udGludWVcblxuICAgICMgQW4gZW1wdHkgbWFwIHdpbGwgYmUgcmV0dXJuZWQgaWYgbm8gY29uZmlnIGZpbGUgaXMgZm91bmQuXG4gICAgJHB5dmVudkNvbmZpZyA9IEB7IH1cbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2Jpbi9waXAzLjlcbiMhL1VzZXJzL2hvc3NlaW4uZ2xtL1Byb2plY3RzL0RqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9iaW4vcHl0aG9uXG4jIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuaW1wb3J0IHJlXG5pbXBvcnQgc3lzXG5mcm9tIHBpcC5faW50ZXJuYWwuY2xpLm1haW4gaW1wb3J0IG1haW5cbmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6XG4gICAgc3lzLmFyZ3ZbMF0gPSByZS5zdWIocicoLXNjcmlwdFxcLnB5d3xcXC5leGUpPyQnLCAnJywgc3lzLmFyZ3ZbMF0pXG4gICAgc3lzLmV4aXQobWFpbigpKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3NldHVwdG9vbHMvc2NyaXB0IChkZXYpLnRtcGxcbiMgRUFTWS1JTlNUQUxMLURFVi1TQ1JJUFQ6ICUoc3BlYylyLCUoc2NyaXB0X25hbWUpclxuX19yZXF1aXJlc19fID0gJShzcGVjKXJcbl9faW1wb3J0X18oJ3BrZ19yZXNvdXJjZXMnKS5yZXF1aXJlKCUoc3BlYylyKVxuX19maWxlX18gPSAlKGRldl9wYXRoKXJcbndpdGggb3BlbihfX2ZpbGVfXykgYXMgZjpcbiAgICBleGVjKGNvbXBpbGUoZi5yZWFkKCksIF9fZmlsZV9fLCAnZXhlYycpKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9fdmVuZG9yL2Rpc3RsaWIvdXRpbC5weVxuLi4uXG5cbl9leHRlcm5hbF9kYXRhX2Jhc2VfdXJsID0gJ2h0dHBzOi8vd3d3LnJlZC1kb3ZlLmNvbS9weXBpL3Byb2plY3RzLydcblxuZGVmIGdldF9wcm9qZWN0X2RhdGEobmFtZSk6XG4gICAgdXJsID0gJyVzLyVzL3Byb2plY3QuanNvbicgJSAobmFtZVswXS51cHBlcigpLCBuYW1lKVxuICAgIHVybCA9IHVybGpvaW4oX2V4dGVybmFsX2RhdGFfYmFzZV91cmwsIHVybClcbiAgICByZXN1bHQgPSBfZ2V0X2V4dGVybmFsX2RhdGEodXJsKVxuICAgIHJldHVybiByZXN1bHRcblxuZGVmIGdldF9wYWNrYWdlX2RhdGEobmFtZSwgdmVyc2lvbik6XG4gICAgdXJsID0gJyVzLyVzL3BhY2thZ2UtJXMuanNvbicgJSAobmFtZVswXS51cHBlcigpLCBuYW1lLCB2ZXJzaW9uKVxuICAgIHVybCA9IHVybGpvaW4oX2V4dGVybmFsX2RhdGFfYmFzZV91cmwsIHVybClcbiAgICByZXR1cm4gX2dldF9leHRlcm5hbF9kYXRhKHVybClcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL2NvbW1hbmQvc2V0b3B0LnB5XG4uLi5cblxuXG5kZWYgY29uZmlnX2ZpbGUoa2luZD1cImxvY2FsXCIpOlxuICAgIFwiXCJcIkdldCB0aGUgZmlsZW5hbWUgb2YgdGhlIGRpc3R1dGlscywgbG9jYWwsIGdsb2JhbCwgb3IgcGVyLXVzZXIgY29uZmlnXG5cbiAgICBga2luZGAgbXVzdCBiZSBvbmUgb2YgXCJsb2NhbFwiLCBcImdsb2JhbFwiLCBvciBcInVzZXJcIlxuICAgIFwiXCJcIlxuICAgIGlmIGtpbmQgPT0gJ2xvY2FsJzpcbiAgICAgICAgcmV0dXJuICdzZXR1cC5jZmcnXG4gICAgaWYga2luZCA9PSAnZ2xvYmFsJzpcbiAgICAgICAgcmV0dXJuIG9zLnBhdGguam9pbihcbiAgICAgICAgICAgIG9zLnBhdGguZGlybmFtZShkaXN0dXRpbHMuX19maWxlX18pLCAnZGlzdHV0aWxzLmNmZydcbiAgICAgICAgKVxuICAgIGlmIGtpbmQgPT0gJ3VzZXInOlxuICAgICAgICBkb3QgPSBvcy5uYW1lID09ICdwb3NpeCcgYW5kICcuJyBvciAnJ1xuICAgICAgICByZXR1cm4gb3MucGF0aC5leHBhbmR1c2VyKGNvbnZlcnRfcGF0aChcIn4vJXNweWRpc3R1dGlscy5jZmdcIiAlIGRvdCkpXG4gICAgcmFpc2UgVmFsdWVFcnJvcihcbiAgICAgICAgXCJjb25maWdfZmlsZSgpIHR5cGUgbXVzdCBiZSAnbG9jYWwnLCAnZ2xvYmFsJywgb3IgJ3VzZXInXCIsIGtpbmRcbiAgICApXG5cblxuZGVmIGVkaXRfY29uZmlnKGZpbGVuYW1lLCBzZXR0aW5ncywgZHJ5X3J1bj1GYWxzZSk6XG4gICAgXCJcIlwiRWRpdCBhIGNvbmZpZ3VyYXRpb24gZmlsZSB0byBpbmNsdWRlIGBzZXR0aW5nc2Bcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9waXAvX2ludGVybmFsL3V0aWxzL3VybHMucHlcbmltcG9ydCBvc1xuaW1wb3J0IHN0cmluZ1xuaW1wb3J0IHVybGxpYi5wYXJzZVxuaW1wb3J0IHVybGxpYi5yZXF1ZXN0XG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWxcblxuZnJvbSAuY29tcGF0IGltcG9ydCBXSU5ET1dTXG5cblxuZGVmIGdldF91cmxfc2NoZW1lKHVybDogc3RyKSAtPiBPcHRpb25hbFtzdHJdOlxuICAgIGlmIFwiOlwiIG5vdCBpbiB1cmw6XG4gICAgICAgIHJldHVybiBOb25lXG4gICAgcmV0dXJuIHVybC5zcGxpdChcIjpcIiwgMSlbMF0ubG93ZXIoKVxuXG5cbmRlZiBwYXRoX3RvX3VybChwYXRoOiBzdHIpIC0+IHN0cjpcbiAgICBcIlwiXCJcbiAgICBDb252ZXJ0IGEgcGF0aCB0byBhIGZpbGU6IFVSTC4gIFRoZSBwYXRoIHdpbGwgYmUgbWFkZSBhYnNvbHV0ZSBhbmQgaGF2ZVxuICAgIHF1b3RlZCBwYXRoIHBhcnRzLlxuICAgIFwiXCJcIlxuICAgIHBhdGggPSBvcy5wYXRoLm5vcm1wYXRoKG9zLnBhdGguYWJzcGF0aChwYXRoKSlcbiAgICB1cmwgPSB1cmxsaWIucGFyc2UudXJsam9pbihcImZpbGU6XCIsIHVybGxpYi5yZXF1ZXN0LnBhdGhuYW1lMnVybChwYXRoKSlcbiAgICByZXR1cm4gdXJsXG5cblxuZGVmIHVybF90b19wYXRoKHVybDogc3RyKSAtPiBzdHI6XG4gICAgXCJcIlwiXG4gICAgQ29udmVydCBhIGZpbGU6IFVSTCB0byBhIHBhdGguXG4gICAgXCJcIlwiXG4gICAgYXNzZXJ0IHVybC5zdGFydHN3aXRoKFxuICAgICAgICBcImZpbGU6XCJcbiAgICApLCBmXCJZb3UgY2FuIG9ubHkgdHVybiBmaWxlOiB1cmxzIGludG8gZmlsZW5hbWVzIChub3Qge3VybCFyfSlcIlxuXG4gICAgXywgbmV0bG9jLCBwYXRoLCBfLCBfID0gdXJsbGliLnBhcnNlLnVybHNwbGl0KHVybClcblxuICAgIGlmIG5vdCBuZXRsb2Mgb3IgbmV0bG9jID09IFwibG9jYWxob3N0XCI6XG4gICAgICAgICMgQWNjb3JkaW5nIHRvIFJGQyA4MDg5LCBzYW1lIGFzIGVtcHR5IGF1dGhvcml0eS5cbiAgICAgICAgbmV0bG9jID0gXCJcIlxuICAgIGVsaWYgV0lORE9XUzpcbiAgICAgICAgIyBJZiB3ZSBoYXZlIGEgVU5DIHBhdGgsIHByZXBlbmQgVU5DIHNoYXJlIG5vdGF0aW9uLlxuICAgICAgICBuZXRsb2MgPSBcIlxcXFxcXFxcXCIgKyBuZXRsb2NcbiAgICBlbHNlOlxuICAgICAgICByYWlzZSBWYWx1ZUVycm9yKFxuICAgICAgICAgICAgZlwibm9uLWxvY2FsIGZpbGUgVVJJcyBhcmUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtOiB7dXJsIXJ9XCJcbiAgICAgICAgKVxuXG4gICAgcGF0aCA9IHVybGxpYi5yZXF1ZXN0LnVybDJwYXRobmFtZShuZXRsb2MgKyBwYXRoKVxuXG4gICAgIyBPbiBXaW5kb3dzLCB1cmxzcGxpdCBwYXJzZXMgdGhlIHBhdGggYXMgc29tZXRoaW5nIGxpa2UgXCIvQzovVXNlcnMvZm9vXCIuXG4gICAgIyBUaGlzIGNyZWF0ZXMgaXNzdWVzIGZvciBwYXRoLXJlbGF0ZWQgZnVuY3Rpb25zIGxpa2UgaW8ub3BlbigpLCBzbyB3ZSB0cnlcbiAgICAjIHRvIGRldGVjdCBhbmQgc3RyaXAgdGhlIGxlYWRpbmcgc2xhc2guXG4gICAgaWYgKFxuICAgICAgICBXSU5ET1dTXG4gICAgICAgIGFuZCBub3QgbmV0bG9jICAjIE5vdCBVTkMuXG4gICAgICAgIGFuZCBsZW4ocGF0aCkgPj0gM1xuICAgICAgICBhbmQgcGF0aFswXSA9PSBcIi9cIiAgIyBMZWFkaW5nIHNsYXNoIHRvIHN0cmlwLlxuICAgICAgICBhbmQgcGF0aFsxXSBpbiBzdHJpbmcuYXNjaWlfbGV0dGVycyAgIyBEcml2ZSBsZXR0ZXIuXG4gICAgICAgIGFuZCBwYXRoWzI6NF0gaW4gKFwiOlwiLCBcIjovXCIpICAjIENvbG9uICsgZW5kIG9mIHN0cmluZywgb3IgY29sb24gKyBhYnNvbHV0ZSBwYXRoLlxuICAgICk6XG4gICAgICAgIHBhdGggPSBwYXRoWzE6XVxuXG4gICAgcmV0dXJuIHBhdGhcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL19kaXN0dXRpbHMvY29uZmlnLnB5XG5cIlwiXCJkaXN0dXRpbHMucHlwaXJjXG5cblByb3ZpZGVzIHRoZSBQeVBJUkNDb21tYW5kIGNsYXNzLCB0aGUgYmFzZSBjbGFzcyBmb3IgdGhlIGNvbW1hbmQgY2xhc3Nlc1xudGhhdCB1c2VzIC5weXBpcmMgaW4gdGhlIGRpc3R1dGlscy5jb21tYW5kIHBhY2thZ2UuXG5cIlwiXCJcbmltcG9ydCBvc1xuZnJvbSBjb25maWdwYXJzZXIgaW1wb3J0IFJhd0NvbmZpZ1BhcnNlclxuXG5mcm9tIGRpc3R1dGlscy5jbWQgaW1wb3J0IENvbW1hbmRcblxuREVGQVVMVF9QWVBJUkMgPSBcIlwiXCJcXFxuW2Rpc3R1dGlsc11cbmluZGV4LXNlcnZlcnMgPVxuICAgIHB5cGlcblxuW3B5cGldXG51c2VybmFtZTolc1xucGFzc3dvcmQ6JXNcblwiXCJcIlxuLi4uXG5cbiAgICAgICAgICAgIGNvbmZpZyA9IFJhd0NvbmZpZ1BhcnNlcigpXG4gICAgICAgICAgICBjb25maWcucmVhZChyYylcbiAgICAgICAgICAgIHNlY3Rpb25zID0gY29uZmlnLnNlY3Rpb25zKClcbiAgICAgICAgICAgIGlmICdkaXN0dXRpbHMnIGluIHNlY3Rpb25zOlxuICAgICAgICAgICAgICAgICMgbGV0J3MgZ2V0IHRoZSBsaXN0IG9mIHNlcnZlcnNcbiAgICAgICAgICAgICAgICBpbmRleF9zZXJ2ZXJzID0gY29uZmlnLmdldCgnZGlzdHV0aWxzJywgJ2luZGV4LXNlcnZlcnMnKVxuICAgICAgICAgICAgICAgIF9zZXJ2ZXJzID0gW3NlcnZlci5zdHJpcCgpIGZvciBzZXJ2ZXIgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleF9zZXJ2ZXJzLnNwbGl0KCdcXG4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlcnZlci5zdHJpcCgpICE9ICcnXVxuICAgICAgICAgICAgICAgIGlmIF9zZXJ2ZXJzID09IFtdOlxuICAgICAgICAgICAgICAgICAgICAjIG5vdGhpbmcgc2V0LCBsZXQncyB0cnkgdG8gZ2V0IHRoZSBkZWZhdWx0IHB5cGlcbiAgICAgICAgICAgICAgICAgICAgaWYgJ3B5cGknIGluIHNlY3Rpb25zOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3NlcnZlcnMgPSBbJ3B5cGknXVxuICAgICAgICAgICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgICAgICAgICAgIyB0aGUgZmlsZSBpcyBub3QgcHJvcGVybHkgZGVmaW5lZCwgcmV0dXJuaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAjIGFuIGVtcHR5IGRpY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7fVxuICAgICAgICAgICAgICAgIGZvciBzZXJ2ZXIgaW4gX3NlcnZlcnM6XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB7J3NlcnZlcic6IHNlcnZlcn1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFsndXNlcm5hbWUnXSA9IGNvbmZpZy5nZXQoc2VydmVyLCAndXNlcm5hbWUnKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9faW50ZXJuYWwvY29uZmlndXJhdGlvbi5weVxuLi4uXG5mcm9tIHBpcC5faW50ZXJuYWwudXRpbHMgaW1wb3J0IGFwcGRpcnNcbmZyb20gcGlwLl9pbnRlcm5hbC51dGlscy5jb21wYXQgaW1wb3J0IFdJTkRPV1NcbmZyb20gcGlwLl9pbnRlcm5hbC51dGlscy5sb2dnaW5nIGltcG9ydCBnZXRMb2dnZXJcbmZyb20gcGlwLl9pbnRlcm5hbC51dGlscy5taXNjIGltcG9ydCBlbnN1cmVfZGlyLCBlbnVtXG5cblJhd0NvbmZpZ1BhcnNlciA9IGNvbmZpZ3BhcnNlci5SYXdDb25maWdQYXJzZXIgICMgU2hvcnRoYW5kXG5LaW5kID0gTmV3VHlwZShcIktpbmRcIiwgc3RyKVxuXG5DT05GSUdfQkFTRU5BTUUgPSBcInBpcC5pbmlcIiBpZiBXSU5ET1dTIGVsc2UgXCJwaXAuY29uZlwiXG5FTlZfTkFNRVNfSUdOT1JFRCA9IFwidmVyc2lvblwiLCBcImhlbHBcIlxuXG4jIFRoZSBraW5kcyBvZiBjb25maWd1cmF0aW9ucyB0aGVyZSBhcmUuXG5raW5kcyA9IGVudW0oXG4gICAgVVNFUj1cInVzZXJcIiwgICMgVXNlciBTcGVjaWZpY1xuICAgIEdMT0JBTD1cImdsb2JhbFwiLCAgIyBTeXN0ZW0gV2lkZVxuICAgIFNJVEU9XCJzaXRlXCIsICAjIFtWaXJ0dWFsXSBFbnZpcm9ubWVudCBTcGVjaWZpY1xuICAgIEVOVj1cImVudlwiLCAgIyBmcm9tIFBJUF9DT05GSUdfRklMRVxuICAgIEVOVl9WQVI9XCJlbnYtdmFyXCIsICAjIGZyb20gRW52aXJvbm1lbnQgVmFyaWFibGVzXG4pXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2N1c3RvbWVyX2RhdGEuY3N2XG5jdXN0b21lcl9pZCxmaXJzdF9uYW1lLGxhc3RfbmFtZSxlbWFpbCxnZW5kZXIsYWdlLGNpdHksc3RhdGUsc2lnbnVwX2RhdGUsY3VzdG9tZXJfc2VnbWVudCx0b3RhbF9vcmRlcnMsdG90YWxfc3BlbmQsYXZnX29yZGVyX3ZhbHVlLGxhc3RfcHVyY2hhc2VfZGF0ZSxkYXlzX3NpbmNlX2xhc3RfcHVyY2hhc2UsZmF2b3JpdGVfY2F0ZWdvcnksZmF2b3JpdGVfcHJvZHVjdCxlbWFpbF9zdWJzY3JpYmVyLG1vYmlsZV9hcHBfdXNlcixsb3lhbHR5X3RpZXJcbjEwMDEsSm9obixTbWl0aCxqb2huLnNtaXRoQGVtYWlsLmNvbSxNLDM0LE5ldyBZb3JrLE5ZLDIwMjMtMDEtMTUsSGlnaCBWYWx1ZSwxMiwxMjUwLjQ1LDEwNC4yMCwyMDI0LTAxLTAyLDUsTWVuJ3MgU2hpcnRzLFN1bW1lciBMaW5lbiBTaGlydCxUUlVFLFRSVUUsR29sZFxuMTAwMixFbWlseSxKb2huc29uLGVtaWx5LmpAZW1haWwuY29tLEYsMjksTG9zIEFuZ2VsZXMsQ0EsMjAyMy0wMi0wMyxSZWd1bGFyLDgsNjQ1Ljc1LDgwLjcyLDIwMjQtMDEtMDMsNCxXb21lbidzIERyZXNzZXMsRmxvcmFsIFN1bW1lciBEcmVzcyxUUlVFLFRSVUUsU2lsdmVyXG4xMDAzLE1pY2hhZWwsV2lsbGlhbXMsbS53aWxsaWFtc0BlbWFpbC5jb20sTSw0MixDaGljYWdvLElMLDIwMjMtMDEtMjIsSGlnaCBWYWx1ZSwxNSwxODc2LjMwLDEyNS4wOSwyMDI0LTAxLTAxLDYsTWVuJ3MgT3V0ZXJ3ZWFyLFdpbnRlciBDb2F0IENsYXNzaWMsVFJVRSxGQUxTRSxHb2xkXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9iaW4vYWN0aXZhdGVcbiMgVGhpcyBmaWxlIG11c3QgYmUgdXNlZCB3aXRoIFwic291cmNlIGJpbi9hY3RpdmF0ZVwiICpmcm9tIGJhc2gqXG4jIHlvdSBjYW5ub3QgcnVuIGl0IGRpcmVjdGx5XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvZGlzdHV0aWxzLXByZWNlZGVuY2UucHRoXG5pbXBvcnQgb3M7IHZhciA9ICdTRVRVUFRPT0xTX1VTRV9ESVNUVVRJTFMnOyBlbmFibGVkID0gb3MuZW52aXJvbi5nZXQodmFyLCAnc3RkbGliJykgPT0gJ2xvY2FsJzsgZW5hYmxlZCBhbmQgX19pbXBvcnRfXygnX2Rpc3R1dGlsc19oYWNrJykuYWRkX3NoaW0oKTsgXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvcGlwL19pbnRlcm5hbC9tb2RlbHMvZGlyZWN0X3VybC5weVxuXCJcIlwiIFBFUCA2MTAgXCJcIlwiXG5pbXBvcnQganNvblxuaW1wb3J0IHJlXG5pbXBvcnQgdXJsbGliLnBhcnNlXG5mcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0LCBJdGVyYWJsZSwgT3B0aW9uYWwsIFR5cGUsIFR5cGVWYXIsIFVuaW9uXG5cbl9fYWxsX18gPSBbXG4gICAgXCJEaXJlY3RVcmxcIixcbiAgICBcIkRpcmVjdFVybFZhbGlkYXRpb25FcnJvclwiLFxuICAgIFwiRGlySW5mb1wiLFxuICAgIFwiQXJjaGl2ZUluZm9cIixcbiAgICBcIlZjc0luZm9cIixcbl1cblxuVCA9IFR5cGVWYXIoXCJUXCIpXG5cbkRJUkVDVF9VUkxfTUVUQURBVEFfTkFNRSA9IFwiZGlyZWN0X3VybC5qc29uXCJcbkVOVl9WQVJfUkUgPSByZS5jb21waWxlKHJcIl5cXCRcXHtbQS1aYS16MC05LV9dK1xcfSg6XFwkXFx7W0EtWmEtejAtOS1fXStcXH0pPyRcIilcblxuXG5jbGFzcyBEaXJlY3RVcmxWYWxpZGF0aW9uRXJyb3IoRXhjZXB0aW9uKTpcbiAgICBwYXNzXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy8udmVudi9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMvc2V0dXB0b29scy9jb21tYW5kL2RldmVsb3AucHlcbi4uLlxuXG5cbmNsYXNzIGRldmVsb3AobmFtZXNwYWNlcy5EZXZlbG9wSW5zdGFsbGVyLCBlYXN5X2luc3RhbGwpOlxuICAgIFwiXCJcIlNldCB1cCBwYWNrYWdlIGZvciBkZXZlbG9wbWVudFwiXCJcIlxuXG4gICAgZGVzY3JpcHRpb24gPSBcImluc3RhbGwgcGFja2FnZSBpbiAnZGV2ZWxvcG1lbnQgbW9kZSdcIlxuXG4gICAgdXNlcl9vcHRpb25zID0gZWFzeV9pbnN0YWxsLnVzZXJfb3B0aW9ucyArIFtcbiAgICAgICAgKFwidW5pbnN0YWxsXCIsIFwidVwiLCBcIlVuaW5zdGFsbCB0aGlzIHNvdXJjZSBwYWNrYWdlXCIpLFxuICAgICAgICAoXCJlZ2ctcGF0aD1cIiwgTm9uZSwgXCJTZXQgdGhlIHBhdGggdG8gYmUgdXNlZCBpbiB0aGUgLmVnZy1saW5rIGZpbGVcIiksXG4gICAgXVxuXG4gICAgYm9vbGVhbl9vcHRpb25zID0gZWFzeV9pbnN0YWxsLmJvb2xlYW5fb3B0aW9ucyArIFsndW5pbnN0YWxsJ11cblxuICAgIGNvbW1hbmRfY29uc3VtZXNfYXJndW1lbnRzID0gRmFsc2UgICMgb3ZlcnJpZGUgYmFzZVxuXG4gICAgZGVmIHJ1bihzZWxmKTpcbiAgICAgICAgaWYgc2VsZi51bmluc3RhbGw6XG4gICAgICAgICAgICBzZWxmLm11bHRpX3ZlcnNpb24gPSBUcnVlXG4gICAgICAgICAgICBzZWxmLnVuaW5zdGFsbF9saW5rKClcbiAgICAgICAgICAgIHNlbGYudW5pbnN0YWxsX25hbWVzcGFjZXMoKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgc2VsZi5pbnN0YWxsX2Zvcl9kZXZlbG9wbWVudCgpXG4gICAgICAgIHNlbGYud2Fybl9kZXByZWNhdGVkX29wdGlvbnMoKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3NldHVwdG9vbHMvX2Rpc3R1dGlscy9zeXNjb25maWcucHlcblwiXCJcIlByb3ZpZGUgYWNjZXNzIHRvIFB5dGhvbidzIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uICBUaGUgc3BlY2lmaWNcbmNvbmZpZ3VyYXRpb24gdmFyaWFibGVzIGF2YWlsYWJsZSBkZXBlbmQgaGVhdmlseSBvbiB0aGUgcGxhdGZvcm0gYW5kXG5jb25maWd1cmF0aW9uLiAgVGhlIHZhbHVlcyBtYXkgYmUgcmV0cmlldmVkIHVzaW5nXG5nZXRfY29uZmlnX3ZhcihuYW1lKSwgYW5kIHRoZSBsaXN0IG9mIHZhcmlhYmxlcyBpcyBhdmFpbGFibGUgdmlhXG5nZXRfY29uZmlnX3ZhcnMoKS5rZXlzKCkuICBBZGRpdGlvbmFsIGNvbnZlbmllbmNlIGZ1bmN0aW9ucyBhcmUgYWxzb1xuYXZhaWxhYmxlLlxuXG5Xcml0dGVuIGJ5OiAgIEZyZWQgTC4gRHJha2UsIEpyLlxuRW1haWw6ICAgICAgICA8ZmRyYWtlQGFjbS5vcmc+XG5cIlwiXCJcblxuaW1wb3J0IF9pbXBcbmltcG9ydCBvc1xuaW1wb3J0IHJlXG5pbXBvcnQgc3lzXG5cbmZyb20gLmVycm9ycyBpbXBvcnQgRGlzdHV0aWxzUGxhdGZvcm1FcnJvclxuXG5JU19QWVBZID0gJ19fcHlweV9fJyBpbiBzeXMuYnVpbHRpbl9tb2R1bGVfbmFtZXNcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL19kaXN0dXRpbHMvZGVidWcucHlcbmltcG9ydCBvc1xuXG4jIElmIERJU1RVVElMU19ERUJVRyBpcyBhbnl0aGluZyBvdGhlciB0aGFuIHRoZSBlbXB0eSBzdHJpbmcsIHdlIHJ1biBpblxuIyBkZWJ1ZyBtb2RlLlxuREVCVUcgPSBvcy5lbnZpcm9uLmdldCgnRElTVFVUSUxTX0RFQlVHJylcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL2NvbW1hbmQvdXBsb2FkX2RvY3MucHlcbi4uLlxuXG5cbmNsYXNzIHVwbG9hZF9kb2NzKHVwbG9hZCk6XG4gICAgIyBvdmVycmlkZSB0aGUgZGVmYXVsdCByZXBvc2l0b3J5IGFzIHVwbG9hZF9kb2NzIGlzbid0XG4gICAgIyBzdXBwb3J0ZWQgYnkgV2FyZWhvdXNlIChhbmQgd29uJ3QgYmUpLlxuICAgIERFRkFVTFRfUkVQT1NJVE9SWSA9ICdodHRwczovL3B5cGkucHl0aG9uLm9yZy9weXBpLydcblxuICAgIGRlc2NyaXB0aW9uID0gJ1VwbG9hZCBkb2N1bWVudGF0aW9uIHRvIHNpdGVzIG90aGVyIHRoYW4gUHlQaSBzdWNoIGFzIGRldnBpJ1xuXG4gICAgdXNlcl9vcHRpb25zID0gW1xuICAgICAgICAoJ3JlcG9zaXRvcnk9JywgJ3InLFxuICAgICAgICAgXCJ1cmwgb2YgcmVwb3NpdG9yeSBbZGVmYXVsdDogJXNdXCIgJSB1cGxvYWQuREVGQVVMVF9SRVBPU0lUT1JZKSxcbiAgICAgICAgKCdzaG93LXJlc3BvbnNlJywgTm9uZSxcbiAgICAgICAgICdkaXNwbGF5IGZ1bGwgcmVzcG9uc2UgdGV4dCBmcm9tIHNlcnZlcicpLFxuICAgICAgICAoJ3VwbG9hZC1kaXI9JywgTm9uZSwgJ2RpcmVjdG9yeSB0byB1cGxvYWQnKSxcbiAgICBdXG4gICAgYm9vbGVhbl9vcHRpb25zID0gdXBsb2FkLmJvb2xlYW5fb3B0aW9uc1xuXG4gICAgZGVmIGhhc19zcGhpbngoc2VsZik6XG4gICAgICAgIGlmIHNlbGYudXBsb2FkX2RpciBpcyBOb25lOlxuICAgICAgICAgICAgZm9yIGVwIGluIGl0ZXJfZW50cnlfcG9pbnRzKCdkaXN0dXRpbHMuY29tbWFuZHMnLCAnYnVpbGRfc3BoaW54Jyk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRydWVcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzLy52ZW52L2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcy9zZXR1cHRvb2xzL2NvbW1hbmQvcm90YXRlLnB5XG5mcm9tIGRpc3R1dGlscy51dGlsIGltcG9ydCBjb252ZXJ0X3BhdGhcbmZyb20gZGlzdHV0aWxzIGltcG9ydCBsb2dcbmZyb20gZGlzdHV0aWxzLmVycm9ycyBpbXBvcnQgRGlzdHV0aWxzT3B0aW9uRXJyb3JcbmltcG9ydCBvc1xuaW1wb3J0IHNodXRpbFxuXG5mcm9tIHNldHVwdG9vbHMgaW1wb3J0IENvbW1hbmRcblxuXG5jbGFzcyByb3RhdGUoQ29tbWFuZCk6XG4gICAgXCJcIlwiRGVsZXRlIG9sZGVyIGRpc3RyaWJ1dGlvbnNcIlwiXCJcblxuICAgIGRlc2NyaXB0aW9uID0gXCJkZWxldGUgb2xkZXIgZGlzdHJpYnV0aW9ucywga2VlcGluZyBOIG5ld2VzdCBmaWxlc1wiXG4gICAgdXNlcl9vcHRpb25zID0gW1xuICAgICAgICAoJ21hdGNoPScsICdtJywgXCJwYXR0ZXJucyB0byBtYXRjaCAocmVxdWlyZWQpXCIpLFxuICAgICAgICAoJ2Rpc3QtZGlyPScsICdkJywgXCJkaXJlY3Rvcnkgd2hlcmUgdGguLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJiNzNlZWIxNC1jNjk5LTQ5ZmItYmM0OC05ZDY3MjUyMjA4ZGQ7dG9vbHVfdnJ0eF8wMVBiNmFQNW5pS0hYOTJ5cXpLcGQyRWsiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuPHN0ZG91dD5cbi4vLnZlbnYvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzL3BpcC9faW50ZXJuYWwvdXRpbHMvdXJscy5weVxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImZjMzhiYTUzLTMyZDMtNGZjOC05MDQ1LTM4MzQ5ZGFmM2RmNzt0b29sdV92cnR4XzAxQUYzb2VNbWZORWNrU2RRTUV6TEdzTiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI0Y2YzMGQwNC0zMWQxLTQ1MGEtYTMwMS04ZTRlNWUzMjkwNmI7dG9vbHVfdnJ0eF8wMTE4TlBtM3RLTXBMdTFkUk1ReWdCOW8iOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiRmlsZSBzYXZlZCBzdWNjZXNzZnVsbHkuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMWM0YTA5ZjMtNjVkOC00OThjLWJhMzEtYTYwOTU4NmZiMDJkO3Rvb2x1X3ZydHhfMDFLNWNEbmhEeUFGRDgzZ05jRVJOcVRlIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjkzNjU0Nzk4LWZmNWQtNDg3ZC04NDczLWVjMGRlNzE1ODA0Mzt0b29sdV92cnR4XzAxUUN1M0FtaVlxWXJaeU55WXVjUHc4RSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAwXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIFN0YXJ0aW5nIGRhdGEgYW5hbHlzaXMuLi5cbkxvYWRpbmcgZGF0YXNldHMuLi5cbkFsbCBkYXRhc2V0cyBsb2FkZWQgc3VjY2Vzc2Z1bGx5IVxuXG49PT0gR29vZ2xlIEFuYWx5dGljcyBBbmFseXNpcyA9PT1cblxuQmFzaWMgU3RhdGlzdGljczpcblRvdGFsIHNlc3Npb25zOiA5NTI3XG5Ub3RhbCBuZXcgdXNlcnM6IDUzNDNcblRvdGFsIHRyYW5zYWN0aW9uczogNDk1XG5Ub3RhbCByZXZlbnVlOiAkMzQ2NTAuMDBcbkF2ZXJhZ2UgY29udmVyc2lvbiByYXRlOiA1LjAwJVxuXG5TZXNzaW9ucyBieSBzb3VyY2UgY2hhcnQgc2F2ZWQgYXMgJ3Nlc3Npb25zX2J5X3NvdXJjZS5odG1sJ1xuU2Vzc2lvbnMgYW5kIHRyYW5zYWN0aW9ucyBvdmVyIHRpbWUgY2hhcnQgc2F2ZWQgYXMgJ3Nlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lLmh0bWwnXG5TZXNzaW9ucyBieSBkZXZpY2UgY2hhcnQgc2F2ZWQgYXMgJ3Nlc3Npb25zX2J5X2RldmljZS5odG1sJ1xuXG49PT0gQ3VzdG9tZXIgRGF0YSBBbmFseXNpcyA9PT1cblxuQ3VzdG9tZXIgRGVtb2dyYXBoaWNzOlxuVG90YWwgY3VzdG9tZXJzOiAyMFxuR2VuZGVyIGRpc3RyaWJ1dGlvbjogeydNJzogMC41LCAnRic6IDAuNX1cbkF2ZXJhZ2UgYWdlOiAzNC40IHllYXJzXG5BdmVyYWdlIHRvdGFsIHNwZW5kOiAkOTMyLjA1XG5cbkN1c3RvbWVyIHNlZ21lbnRzIGNoYXJ0IHNhdmVkIGFzICdjdXN0b21lcl9zZWdtZW50cy5odG1sJ1xuQWdlIGRpc3RyaWJ1dGlvbiBjaGFydCBzYXZlZCBhcyAnYWdlX2Rpc3RyaWJ1dGlvbi5odG1sJ1xuTG95YWx0eSB0aWVyIGFuYWx5c2lzIGNoYXJ0IHNhdmVkIGFzICdsb3lhbHR5X3RpZXJfYW5hbHlzaXMuaHRtbCdcblxuPT09IEFkIFBlcmZvcm1hbmNlIEFuYWx5c2lzID09PVxuXG5QbGF0Zm9ybSBQZXJmb3JtYW5jZTpcbiAgICAgcGxhdGZvcm0gIGltcHJlc3Npb25zICBjbGlja3MgIGNvbnZlcnNpb25zICAgIHNwZW5kICBjb252ZXJzaW9uX3ZhbHVlXG4wICAgIEZhY2Vib29rICAgICAgICA4NDM0NCAgICA0MTU0ICAgICAgICAgIDE2OSAgMzUzNC44MCAgICAgICAgICAgMTE5MzAuMFxuMSAgR29vZ2xlIEFkcyAgICAgICAgMzA1NjcgICAgMjAyMSAgICAgICAgICAxMTcgIDQwNzkuMDAgICAgICAgICAgICA4MzQwLjBcbjIgICBJbnN0YWdyYW0gICAgICAgIDcxNjMxICAgIDMzOTEgICAgICAgICAgMTMyICAzMDUxLjE1ICAgICAgICAgICAgOTMzMC4wXG5cblBsYXRmb3JtIGNvbnZlcnNpb25zIGNoYXJ0IHNhdmVkIGFzICdwbGF0Zm9ybV9jb252ZXJzaW9ucy5odG1sJ1xuUGxhdGZvcm0gUk9BUyBjaGFydCBzYXZlZCBhcyAncGxhdGZvcm1fcm9hcy5odG1sJ1xuRGFpbHkgY29udmVyc2lvbnMgY2hhcnQgc2F2ZWQgYXMgJ2RhaWx5X2NvbnZlcnNpb25zLmh0bWwnXG5cbkFuYWx5c2lzIGNvbXBsZXRlISBIVE1MIHZpc3VhbGl6YXRpb25zIGhhdmUgYmVlbiBzYXZlZCB0byB0aGUgY3VycmVudCBkaXJlY3RvcnkuXG5Zb3UgY2FuIG9wZW4gdGhlc2UgSFRNTCBmaWxlcyBpbiB5b3VyIHdlYiBicm93c2VyIHRvIHZpZXcgdGhlIGludGVyYWN0aXZlIGNoYXJ0cy5cblxuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjY3ZjMzYWVlLWUyNzktNDU1NS05MzA2LWFhYTUwYTlhNmU4Mjt0b29sdV92cnR4XzAxM3lWdUg0SHdIa1RLYzhOYUpYU3FnUiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAwXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIFJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBkamFuZ28gaW4gL29wdC9hbmFjb25kYTMvbGliL3B5dGhvbjMuOS9zaXRlLXBhY2thZ2VzICg0LjIuNylcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBhc2dpcmVmPDQsPj0zLjYuMCBpbiAvb3B0L2FuYWNvbmRhMy9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMgKGZyb20gZGphbmdvKSAoMy44LjEpXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogc3FscGFyc2U+PTAuMy4xIGluIC9vcHQvYW5hY29uZGEzL2xpYi9weXRob24zLjkvc2l0ZS1wYWNrYWdlcyAoZnJvbSBkamFuZ28pICgwLjUuMylcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiB0eXBpbmctZXh0ZW5zaW9ucz49NCBpbiAvb3B0L2FuYWNvbmRhMy9saWIvcHl0aG9uMy45L3NpdGUtcGFja2FnZXMgKGZyb20gYXNnaXJlZjw0LD49My42LjAtPmRqYW5nbykgKDQuMTIuMilcblxuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjRkMjFmOWE4LTE5YTItNDVmYy04OWZmLWYxMjhkYWZmNTgzNTt0b29sdV92cnR4XzAxWVp1SHNGRFE3Zkh6aWVEUmIxajlzViI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImE1ZDQ3ZmNiLTVhYTktNDkxMy1iYjFjLTM0MDVkOTFkM2Q4YTt0b29sdV92cnR4XzAxTUE3YzJBcEI3c0x3c0dQV1dxM2JoZiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjBjMGMzNmExLTZmNzQtNDM2NS05ZmYyLWYyYmJlNzNhNTkyYzt0b29sdV92cnR4XzAxNG1KUUh1RjdkSGRGNjhrSkhzblczRSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHJlcXVpcmVtZW50cy50eHQ6XG4gICAgIDFcdHBhbmRhcz49MS4zLjBcbiAgICAgMlx0bnVtcHk+PTEuMjAuMFxuICAgICAzXHRwbG90bHk+PTUuMy4wXG4gICAgIDRcdGRhdGV0aW1lXG4gICAgIDVcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogNVxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNDM2OTM3NTgtZTdlMS00MDhhLTlmMDktZDE5ZWQ4MGNkNWRhO3Rvb2x1X3ZydHhfMDFYWjhURGZiamdkYnB3cVlQNnhURm5tIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgcmVxdWlyZW1lbnRzLnR4dC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgICAxXHRwYW5kYXM+PTEuMy4wXG4gICAgIDJcdG51bXB5Pj0xLjIwLjBcbiAgICAgM1x0cGxvdGx5Pj01LjMuMFxuICAgICA0XHRkYXRldGltZVxuICAgICA1XHRkamFuZ28+PTQuMi4wXG4gICAgIDZcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIxYjY2ZTAzNi0xZGQ3LTQ0OGItOGZlNS04ZGE3OGVmZGNlNTE7dG9vbHVfdnJ0eF8wMUJjSkRka2plQUN5clBVUUJ3Sm1XcVkiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBkaWdpdGFsX2RhdGFfcHJvamVjdC9zZXR0aW5ncy5weTpcbiAgICAgMVx0XCJcIlwiXG4gICAgIDJcdERqYW5nbyBzZXR0aW5ncyBmb3IgZGlnaXRhbF9kYXRhX3Byb2plY3QgcHJvamVjdC5cbiAgICAgM1x0XG4gICAgIDRcdEdlbmVyYXRlZCBieSAnZGphbmdvLWFkbWluIHN0YXJ0cHJvamVjdCcgdXNpbmcgRGphbmdvIDQuMi43LlxuICAgICA1XHRcbiAgICAgNlx0Rm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhpcyBmaWxlLCBzZWVcbiAgICAgN1x0aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi90b3BpY3Mvc2V0dGluZ3MvXG4gICAgIDhcdFxuICAgICA5XHRGb3IgdGhlIGZ1bGwgbGlzdCBvZiBzZXR0aW5ncyBhbmQgdGhlaXIgdmFsdWVzLCBzZWVcbiAgICAxMFx0aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi9yZWYvc2V0dGluZ3MvXG4gICAgMTFcdFwiXCJcIlxuICAgIDEyXHRcbiAgICAxM1x0ZnJvbSBwYXRobGliIGltcG9ydCBQYXRoXG4gICAgMTRcdFxuICAgIDE1XHQjIEJ1aWxkIHBhdGhzIGluc2lkZSB0aGUgcHJvamVjdCBsaWtlIHRoaXM6IEJBU0VfRElSIC8gJ3N1YmRpcicuXG4gICAgMTZcdEJBU0VfRElSID0gUGF0aChfX2ZpbGVfXykucmVzb2x2ZSgpLnBhcmVudC5wYXJlbnRcbiAgICAxN1x0XG4gICAgMThcdFxuICAgIDE5XHQjIFF1aWNrLXN0YXJ0IGRldmVsb3BtZW50IHNldHRpbmdzIC0gdW5zdWl0YWJsZSBmb3IgcHJvZHVjdGlvblxuICAgIDIwXHQjIFNlZSBodHRwczovL2RvY3MuZGphbmdvcHJvamVjdC5jb20vZW4vNC4yL2hvd3RvL2RlcGxveW1lbnQvY2hlY2tsaXN0L1xuICAgIDIxXHRcbiAgICAyMlx0IyBTRUNVUklUWSBXQVJOSU5HOiBrZWVwIHRoZSBzZWNyZXQga2V5IHVzZWQgaW4gcHJvZHVjdGlvbiBzZWNyZXQhXG4gICAgMjNcdFNFQ1JFVF9LRVkgPSAnZGphbmdvLWluc2VjdXJlLSU3QG1tc3c2cXZ5MjRna18zLXEqa3YkZXJzM3FlaSZpcSV1aGt3ZDVpb3cmb3hfYXVyJ1xuICAgIDI0XHRcbiAgICAyNVx0IyBTRUNVUklUWSBXQVJOSU5HOiBkb24ndCBydW4gd2l0aCBkZWJ1ZyB0dXJuZWQgb24gaW4gcHJvZHVjdGlvbiFcbiAgICAyNlx0REVCVUcgPSBUcnVlXG4gICAgMjdcdFxuICAgIDI4XHRBTExPV0VEX0hPU1RTID0gW11cbiAgICAyOVx0XG4gICAgMzBcdFxuICAgIDMxXHQjIEFwcGxpY2F0aW9uIGRlZmluaXRpb25cbiAgICAzMlx0XG4gICAgMzNcdElOU1RBTExFRF9BUFBTID0gW1xuICAgIDM0XHQgICAgJ2RqYW5nby5jb250cmliLmFkbWluJyxcbiAgICAzNVx0ICAgICdkamFuZ28uY29udHJpYi5hdXRoJyxcbiAgICAzNlx0ICAgICdkamFuZ28uY29udHJpYi5jb250ZW50dHlwZXMnLFxuICAgIDM3XHQgICAgJ2RqYW5nby5jb250cmliLnNlc3Npb25zJyxcbiAgICAzOFx0ICAgICdkamFuZ28uY29udHJpYi5tZXNzYWdlcycsXG4gICAgMzlcdCAgICAnZGphbmdvLmNvbnRyaWIuc3RhdGljZmlsZXMnLFxuICAgIDQwXHRdXG4gICAgNDFcdFxuICAgIDQyXHRNSURETEVXQVJFID0gW1xuICAgIDQzXHQgICAgJ2RqYW5nby5taWRkbGV3YXJlLnNlY3VyaXR5LlNlY3VyaXR5TWlkZGxld2FyZScsXG4gICAgNDRcdCAgICAnZGphbmdvLmNvbnRyaWIuc2Vzc2lvbnMubWlkZGxld2FyZS5TZXNzaW9uTWlkZGxld2FyZScsXG4gICAgNDVcdCAgICAnZGphbmdvLm1pZGRsZXdhcmUuY29tbW9uLkNvbW1vbk1pZGRsZXdhcmUnLFxuICAgIDQ2XHQgICAgJ2RqYW5nby5taWRkbGV3YXJlLmNzcmYuQ3NyZlZpZXdNaWRkbGV3YXJlJyxcbiAgICA0N1x0ICAgICdkamFuZ28uY29udHJpYi5hdXRoLm1pZGRsZXdhcmUuQXV0aGVudGljYXRpb25NaWRkbGV3YXJlJyxcbiAgICA0OFx0ICAgICdkamFuZ28uY29udHJpYi5tZXNzYWdlcy5taWRkbGV3YXJlLk1lc3NhZ2VNaWRkbGV3YXJlJyxcbiAgICA0OVx0ICAgICdkamFuZ28ubWlkZGxld2FyZS5jbGlja2phY2tpbmcuWEZyYW1lT3B0aW9uc01pZGRsZXdhcmUnLFxuICAgIDUwXHRdXG4gICAgNTFcdFxuICAgIDUyXHRST09UX1VSTENPTkYgPSAnZGlnaXRhbF9kYXRhX3Byb2plY3QudXJscydcbiAgICA1M1x0XG4gICAgNTRcdFRFTVBMQVRFUyA9IFtcbiAgICA1NVx0ICAgIHtcbiAgICA1Nlx0ICAgICAgICAnQkFDS0VORCc6ICdkamFuZ28udGVtcGxhdGUuYmFja2VuZHMuZGphbmdvLkRqYW5nb1RlbXBsYXRlcycsXG4gICAgNTdcdCAgICAgICAgJ0RJUlMnOiBbXSxcbiAgICA1OFx0ICAgICAgICAnQVBQX0RJUlMnOiBUcnVlLFxuICAgIDU5XHQgICAgICAgICdPUFRJT05TJzoge1xuICAgIDYwXHQgICAgICAgICAgICAnY29udGV4dF9wcm9jZXNzb3JzJzogW1xuICAgIDYxXHQgICAgICAgICAgICAgICAgJ2RqYW5nby50ZW1wbGF0ZS5jb250ZXh0X3Byb2Nlc3NvcnMuZGVidWcnLFxuICAgIDYyXHQgICAgICAgICAgICAgICAgJ2RqYW5nby50ZW1wbGF0ZS5jb250ZXh0X3Byb2Nlc3NvcnMucmVxdWVzdCcsXG4gICAgNjNcdCAgICAgICAgICAgICAgICAnZGphbmdvLmNvbnRyaWIuYXV0aC5jb250ZXh0X3Byb2Nlc3NvcnMuYXV0aCcsXG4gICAgNjRcdCAgICAgICAgICAgICAgICAnZGphbmdvLmNvbnRyaWIubWVzc2FnZXMuY29udGV4dF9wcm9jZXNzb3JzLm1lc3NhZ2VzJyxcbiAgICA2NVx0ICAgICAgICAgICAgXSxcbiAgICA2Nlx0ICAgICAgICB9LFxuICAgIDY3XHQgICAgfSxcbiAgICA2OFx0XVxuICAgIDY5XHRcbiAgICA3MFx0V1NHSV9BUFBMSUNBVElPTiA9ICdkaWdpdGFsX2RhdGFfcHJvamVjdC53c2dpLmFwcGxpY2F0aW9uJ1xuICAgIDcxXHRcbiAgICA3Mlx0XG4gICAgNzNcdCMgRGF0YWJhc2VcbiAgICA3NFx0IyBodHRwczovL2RvY3MuZGphbmdvcHJvamVjdC5jb20vZW4vNC4yL3JlZi9zZXR0aW5ncy8jZGF0YWJhc2VzXG4gICAgNzVcdFxuICAgIDc2XHREQVRBQkFTRVMgPSB7XG4gICAgNzdcdCAgICAnZGVmYXVsdCc6IHtcbiAgICA3OFx0ICAgICAgICAnRU5HSU5FJzogJ2RqYW5nby5kYi5iYWNrZW5kcy5zcWxpdGUzJyxcbiAgICA3OVx0ICAgICAgICAnTkFNRSc6IEJBU0VfRElSIC8gJ2RiLnNxbGl0ZTMnLFxuICAgIDgwXHQgICAgfVxuICAgIDgxXHR9XG4gICAgODJcdFxuICAgIDgzXHRcbiAgICA4NFx0IyBQYXNzd29yZCB2YWxpZGF0aW9uXG4gICAgODVcdCMgaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi9yZWYvc2V0dGluZ3MvI2F1dGgtcGFzc3dvcmQtdmFsaWRhdG9yc1xuICAgIDg2XHRcbiAgICA4N1x0QVVUSF9QQVNTV09SRF9WQUxJREFUT1JTID0gW1xuICAgIDg4XHQgICAge1xuICAgIDg5XHQgICAgICAgICdOQU1FJzogJ2RqYW5nby5jb250cmliLmF1dGgucGFzc3dvcmRfdmFsaWRhdGlvbi5Vc2VyQXR0cmlidXRlU2ltaWxhcml0eVZhbGlkYXRvcicsXG4gICAgOTBcdCAgICB9LFxuICAgIDkxXHQgICAge1xuICAgIDkyXHQgICAgICAgICdOQU1FJzogJ2RqYW5nby5jb250cmliLmF1dGgucGFzc3dvcmRfdmFsaWRhdGlvbi5NaW5pbXVtTGVuZ3RoVmFsaWRhdG9yJyxcbiAgICA5M1x0ICAgIH0sXG4gICAgOTRcdCAgICB7XG4gICAgOTVcdCAgICAgICAgJ05BTUUnOiAnZGphbmdvLmNvbnRyaWIuYXV0aC5wYXNzd29yZF92YWxpZGF0aW9uLkNvbW1vblBhc3N3b3JkVmFsaWRhdG9yJyxcbiAgICA5Nlx0ICAgIH0sXG4gICAgOTdcdCAgICB7XG4gICAgOThcdCAgICAgICAgJ05BTUUnOiAnZGphbmdvLmNvbnRyaWIuYXV0aC5wYXNzd29yZF92YWxpZGF0aW9uLk51bWVyaWNQYXNzd29yZFZhbGlkYXRvcicsXG4gICAgOTlcdCAgICB9LFxuICAgMTAwXHRdXG4gICAxMDFcdFxuICAgMTAyXHRcbiAgIDEwM1x0IyBJbnRlcm5hdGlvbmFsaXphdGlvblxuICAgMTA0XHQjIGh0dHBzOi8vZG9jcy5kamFuZ29wcm9qZWN0LmNvbS9lbi80LjIvdG9waWNzL2kxOG4vXG4gICAxMDVcdFxuICAgMTA2XHRMQU5HVUFHRV9DT0RFID0gJ2VuLXVzJ1xuICAgMTA3XHRcbiAgIDEwOFx0VElNRV9aT05FID0gJ1VUQydcbiAgIDEwOVx0XG4gICAxMTBcdFVTRV9JMThOID0gVHJ1ZVxuICAgMTExXHRcbiAgIDExMlx0VVNFX1RaID0gVHJ1ZVxuICAgMTEzXHRcbiAgIDExNFx0XG4gICAxMTVcdCMgU3RhdGljIGZpbGVzIChDU1MsIEphdmFTY3JpcHQsIEltYWdlcylcbiAgIDExNlx0IyBodHRwczovL2RvY3MuZGphbmdvcHJvamVjdC5jb20vZW4vNC4yL2hvd3RvL3N0YXRpYy1maWxlcy9cbiAgIDExN1x0XG4gICAxMThcdFNUQVRJQ19VUkwgPSAnc3RhdGljLydcbiAgIDExOVx0XG4gICAxMjBcdCMgRGVmYXVsdCBwcmltYXJ5IGtleSBmaWVsZCB0eXBlXG4gICAxMjFcdCMgaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi9yZWYvc2V0dGluZ3MvI2RlZmF1bHQtYXV0by1maWVsZFxuICAgMTIyXHRcbiAgIDEyM1x0REVGQVVMVF9BVVRPX0ZJRUxEID0gJ2RqYW5nby5kYi5tb2RlbHMuQmlnQXV0b0ZpZWxkJ1xuICAgMTI0XHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDEyNFxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNmM3MDIwNjgtZWJkNC00YzJlLThhNjctY2JmMDUzMDA4NGNlO3Rvb2x1X3ZydHhfMDFNenNXa2Jia1d1a01hMjRxcHhUa3BGIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgZGlnaXRhbF9kYXRhX3Byb2plY3Qvc2V0dGluZ3MucHkuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAyOVx0XG4gICAgMzBcdFxuICAgIDMxXHQjIEFwcGxpY2F0aW9uIGRlZmluaXRpb25cbiAgICAzMlx0XG4gICAgMzNcdElOU1RBTExFRF9BUFBTID0gW1xuICAgIDM0XHQgICAgJ2RqYW5nby5jb250cmliLmFkbWluJyxcbiAgICAzNVx0ICAgICdkamFuZ28uY29udHJpYi5hdXRoJyxcbiAgICAzNlx0ICAgICdkamFuZ28uY29udHJpYi5jb250ZW50dHlwZXMnLFxuICAgIDM3XHQgICAgJ2RqYW5nby5jb250cmliLnNlc3Npb25zJyxcbiAgICAzOFx0ICAgICdkamFuZ28uY29udHJpYi5tZXNzYWdlcycsXG4gICAgMzlcdCAgICAnZGphbmdvLmNvbnRyaWIuc3RhdGljZmlsZXMnLFxuICAgIDQwXHQgICAgJ2RhdGFfZGFzaGJvYXJkJyxcbiAgICA0MVx0XVxuICAgIDQyXHRcbiAgICA0M1x0TUlERExFV0FSRSA9IFtcbiAgICA0NFx0ICAgICdkamFuZ28ubWlkZGxld2FyZS5zZWN1cml0eS5TZWN1cml0eU1pZGRsZXdhcmUnLFxuICAgIDQ1XHQgICAgJ2RqYW5nby5jb250cmliLnNlc3Npb25zLm1pZGRsZXdhcmUuU2Vzc2lvbk1pZGRsZXdhcmUnLFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJhMDE5ZmY0ZC02YTdkLTRhNGUtODVhYi1hNjY4YmFhMjI3YWE7dG9vbHVfdnJ0eF8wMUo3d2RYeng1WkhGejZqN0NrWGhIQU0iOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBkaWdpdGFsX2RhdGFfcHJvamVjdC9zZXR0aW5ncy5weS5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDUxXHRdXG4gICAgNTJcdFxuICAgIDUzXHRST09UX1VSTENPTkYgPSAnZGlnaXRhbF9kYXRhX3Byb2plY3QudXJscydcbiAgICA1NFx0XG4gICAgNTVcdFRFTVBMQVRFUyA9IFtcbiAgICA1Nlx0ICAgIHtcbiAgICA1N1x0ICAgICAgICAnQkFDS0VORCc6ICdkamFuZ28udGVtcGxhdGUuYmFja2VuZHMuZGphbmdvLkRqYW5nb1RlbXBsYXRlcycsXG4gICAgNThcdCAgICAgICAgJ0RJUlMnOiBbQkFTRV9ESVIgLyAndGVtcGxhdGVzJ10sXG4gICAgNTlcdCAgICAgICAgJ0FQUF9ESVJTJzogVHJ1ZSxcbiAgICA2MFx0ICAgICAgICAnT1BUSU9OUyc6IHtcbiAgICA2MVx0ICAgICAgICAgICAgJ2NvbnRleHRfcHJvY2Vzc29ycyc6IFtcbiAgICA2Mlx0ICAgICAgICAgICAgICAgICdkamFuZ28udGVtcGxhdGUuY29udGV4dF9wcm9jZXNzb3JzLmRlYnVnJyxcbiAgICA2M1x0ICAgICAgICAgICAgICAgICdkamFuZ28udGVtcGxhdGUuY29udGV4dF9wcm9jZXNzb3JzLnJlcXVlc3QnLFxuICAgIDY0XHQgICAgICAgICAgICAgICAgJ2RqYW5nby5jb250cmliLmF1dGguY29udGV4dF9wcm9jZXNzb3JzLmF1dGgnLFxuICAgIDY1XHQgICAgICAgICAgICAgICAgJ2RqYW5nby5jb250cmliLm1lc3NhZ2VzLmNvbnRleHRfcHJvY2Vzc29ycy5tZXNzYWdlcycsXG4gICAgNjZcdCAgICAgICAgICAgIF0sXG4gICAgNjdcdCAgICAgICAgfSxcbiAgICA2OFx0ICAgIH0sXG4gICAgNjlcdF1cbiAgICA3MFx0XG4gICAgNzFcdFdTR0lfQVBQTElDQVRJT04gPSAnZGlnaXRhbF9kYXRhX3Byb2plY3Qud3NnaS5hcHBsaWNhdGlvbidcbiAgICA3Mlx0XG4gICAgNzNcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI3MmIzN2JkMi01MTdjLTQyNTItYmU5MC1iMjI0NmIzYTJlOWY7dG9vbHVfdnJ0eF8wMTJBMlFhN2dMUmk2TUpkblh4M0pRQnAiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBkaWdpdGFsX2RhdGFfcHJvamVjdC9zZXR0aW5ncy5weS5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTE1XHRcbiAgIDExNlx0IyBTdGF0aWMgZmlsZXMgKENTUywgSmF2YVNjcmlwdCwgSW1hZ2VzKVxuICAgMTE3XHQjIGh0dHBzOi8vZG9jcy5kamFuZ29wcm9qZWN0LmNvbS9lbi80LjIvaG93dG8vc3RhdGljLWZpbGVzL1xuICAgMTE4XHRcbiAgIDExOVx0U1RBVElDX1VSTCA9ICdzdGF0aWMvJ1xuICAgMTIwXHRcbiAgIDEyMVx0U1RBVElDRklMRVNfRElSUyA9IFtcbiAgIDEyMlx0ICAgIEJBU0VfRElSIC8gJ3N0YXRpYycsXG4gICAxMjNcdF1cbiAgIDEyNFx0XG4gICAxMjVcdCMgRGVmYXVsdCBwcmltYXJ5IGtleSBmaWVsZCB0eXBlXG4gICAxMjZcdCMgaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi9yZWYvc2V0dGluZ3MvI2RlZmF1bHQtYXV0by1maWVsZFxuICAgMTI3XHRcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMjFiNzg4YWEtNzIxMi00MDYzLTk1YWMtM2E4NTdlMTRlNjVlO3Rvb2x1X3ZydHhfMDFIbzRlWDRlYzV6RnRwUDU2em1qc2NKIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgYXJlIHRoZSByZXN1bHRzIGZyb20gZXhlY3V0aW5nIHRoZSBjb21tYW5kLlxuPHJldHVybi1jb2RlPlxuMFxuPC9yZXR1cm4tY29kZT5cbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMTBiMjNhODgtY2E0My00ZDZkLWI4NGItYWVmMTA4NzI3OGUzO3Rvb2x1X3ZydHhfMDFFN2RKc1VRSDFQOXpMYzFmTnRSdVVoIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjdmOTRlZTE2LTNkNGQtNGNkMS05MGI2LTBmOGIzNzNjMDYzYzt0b29sdV92cnR4XzAxR3R5NVE5UkJOam9HU0Rwc1pLdExnMiI6eyJwaGFzZSI6NiwicmVzdWx0Ijp7InRleHQiOiJGaWxlIGFscmVhZHkgZXhpc3RzOiAvVXNlcnMvaG9zc2Vpbi5nbG0vUHJvamVjdHMvRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGFfZGFzaGJvYXJkL3ZpZXdzLnB5IiwiaXNFcnJvciI6dHJ1ZSwicmVxdWVzdElkIjoiIn19LCJmMjE2N2RhYy0xNzYwLTQ5YjItYjBkOS1mNWRhY2E0NzhiYTE7dG9vbHVfdnJ0eF8wMVlFZlJNc2tleTc3VENnSlNTeVZ4bjUiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBkYXRhX2Rhc2hib2FyZC92aWV3cy5weTpcbiAgICAgMVx0ZnJvbSBkamFuZ28uc2hvcnRjdXRzIGltcG9ydCByZW5kZXJcbiAgICAgMlx0XG4gICAgIDNcdCMgQ3JlYXRlIHlvdXIgdmlld3MgaGVyZS5cbiAgICAgNFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiA0XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI0MmE1OGQzNi1iY2M2LTQ0ZmQtOWJjOC0wMjI1ZjM0YzFhMWI7dG9vbHVfdnJ0eF8wMUNlZTdRMkVpczdqVmZKMlZQUlh4cGYiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBkYXRhX2Rhc2hib2FyZC92aWV3cy5weS5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgICAxXHRmcm9tIGRqYW5nby5zaG9ydGN1dHMgaW1wb3J0IHJlbmRlclxuICAgICAyXHRmcm9tIGRqYW5nby5odHRwIGltcG9ydCBIdHRwUmVzcG9uc2VcbiAgICAgM1x0ZnJvbSAuIGltcG9ydCBkYXRhX2FuYWx5c2lzXG4gICAgIDRcdFxuICAgICA1XHQjIENyZWF0ZSB5b3VyIHZpZXdzIGhlcmUuXG4gICAgIDZcdGRlZiBpbmRleChyZXF1ZXN0KTpcbiAgICAgN1x0ICAgIFwiXCJcIkhvbWUgcGFnZSB2aWV3XCJcIlwiXG4gICAgIDhcdCAgICByZXR1cm4gcmVuZGVyKHJlcXVlc3QsICdkYXRhX2Rhc2hib2FyZC9pbmRleC5odG1sJylcbiAgICAgOVx0XG4gICAgMTBcdGRlZiBnb29nbGVfYW5hbHl0aWNzKHJlcXVlc3QpOlxuICAgIDExXHQgICAgXCJcIlwiR29vZ2xlIEFuYWx5dGljcyBkYXNoYm9hcmQgdmlld1wiXCJcIlxuICAgIDEyXHQgICAgIyBMb2FkIGRhdGFcbiAgICAxM1x0ICAgIGRhdGFzZXRzID0gZGF0YV9hbmFseXNpcy5sb2FkX2RhdGEoKVxuICAgIDE0XHQgICAgZ2FfZGF0YSA9IGRhdGFzZXRzWydnYV9kYXRhJ11cbiAgICAxNVx0XG4gICAgMTZcdCAgICAjIEdldCBzdGF0aXN0aWNzIGFuZCBjaGFydHNcbiAgICAxN1x0ICAgIHN0YXRzID0gZGF0YV9hbmFseXNpcy5nZXRfZ29vZ2xlX2FuYWx5dGljc19zdGF0cyhnYV9kYXRhKVxuICAgIDE4XHQgICAgc2Vzc2lvbnNfYnlfc291cmNlX2NoYXJ0ID0gZGF0YV9hbmFseXNpcy5nZXRfc2Vzc2lvbnNfYnlfc291cmNlX2NoYXJ0KGdhX2RhdGEpXG4gICAgMTlcdCAgICBzZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZV9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3Nlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lX2NoYXJ0KGdhX2RhdGEpXG4gICAgMjBcdCAgICBzZXNzaW9uc19ieV9kZXZpY2VfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9zZXNzaW9uc19ieV9kZXZpY2VfY2hhcnQoZ2FfZGF0YSlcbiAgICAyMVx0XG4gICAgMjJcdCAgICBjb250ZXh0ID0ge1xuICAgIDIzXHQgICAgICAgICdzdGF0cyc6IHN0YXRzLFxuICAgIDI0XHQgICAgICAgICdzZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQnOiBzZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQsXG4gICAgMjVcdCAgICAgICAgJ3Nlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lX2NoYXJ0Jzogc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWVfY2hhcnQsXG4gICAgMjZcdCAgICAgICAgJ3Nlc3Npb25zX2J5X2RldmljZV9jaGFydCc6IHNlc3Npb25zX2J5X2RldmljZV9jaGFydCxcbiAgICAyN1x0ICAgIH1cbiAgICAyOFx0XG4gICAgMjlcdCAgICByZXR1cm4gcmVuZGVyKHJlcXVlc3QsICdkYXRhX2Rhc2hib2FyZC9nb29nbGVfYW5hbHl0aWNzLmh0bWwnLCBjb250ZXh0KVxuICAgIDMwXHRcbiAgICAzMVx0ZGVmIGN1c3RvbWVyX2FuYWx5c2lzKHJlcXVlc3QpOlxuICAgIDMyXHQgICAgXCJcIlwiQ3VzdG9tZXIgYW5hbHlzaXMgZGFzaGJvYXJkIHZpZXdcIlwiXCJcbiAgICAzM1x0ICAgICMgTG9hZCBkYXRhXG4gICAgMzRcdCAgICBkYXRhc2V0cyA9IGRhdGFfYW5hbHlzaXMubG9hZF9kYXRhKClcbiAgICAzNVx0ICAgIGN1c3RvbWVyX2RhdGEgPSBkYXRhc2V0c1snY3VzdG9tZXJfZGF0YSddXG4gICAgMzZcdFxuICAgIDM3XHQgICAgIyBHZXQgc3RhdGlzdGljcyBhbmQgY2hhcnRzXG4gICAgMzhcdCAgICBkZW1vZ3JhcGhpY3MgPSBkYXRhX2FuYWx5c2lzLmdldF9jdXN0b21lcl9kZW1vZ3JhcGhpY3MoY3VzdG9tZXJfZGF0YSlcbiAgICAzOVx0ICAgIGN1c3RvbWVyX3NlZ21lbnRzX2NoYXJ0ID0gZGF0YV9hbmFseXNpcy5nZXRfY3VzdG9tZXJfc2VnbWVudHNfY2hhcnQoY3VzdG9tZXJfZGF0YSlcbiAgICA0MFx0ICAgIGFnZV9kaXN0cmlidXRpb25fY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9hZ2VfZGlzdHJpYnV0aW9uX2NoYXJ0KGN1c3RvbWVyX2RhdGEpXG4gICAgNDFcdCAgICBsb3lhbHR5X3RpZXJfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9sb3lhbHR5X3RpZXJfY2hhcnQoY3VzdG9tZXJfZGF0YSlcbiAgICA0Mlx0XG4gICAgNDNcdCAgICBjb250ZXh0ID0ge1xuICAgIDQ0XHQgICAgICAgICdkZW1vZ3JhcGhpY3MnOiBkZW1vZ3JhcGhpY3MsXG4gICAgNDVcdCAgICAgICAgJ2N1c3RvbWVyX3NlZ21lbnRzX2NoYXJ0JzogY3VzdG9tZXJfc2VnbWVudHNfY2hhcnQsXG4gICAgNDZcdCAgICAgICAgJ2FnZV9kaXN0cmlidXRpb25fY2hhcnQnOiBhZ2VfZGlzdHJpYnV0aW9uX2NoYXJ0LFxuICAgIDQ3XHQgICAgICAgICdsb3lhbHR5X3RpZXJfY2hhcnQnOiBsb3lhbHR5X3RpZXJfY2hhcnQsXG4gICAgNDhcdCAgICB9XG4gICAgNDlcdFxuICAgIDUwXHQgICAgcmV0dXJuIHJlbmRlcihyZXF1ZXN0LCAnZGF0YV9kYXNoYm9hcmQvY3VzdG9tZXJfYW5hbHlzaXMuaHRtbCcsIGNvbnRleHQpXG4gICAgNTFcdFxuICAgIDUyXHRkZWYgYWRfcGVyZm9ybWFuY2UocmVxdWVzdCk6XG4gICAgNTNcdCAgICBcIlwiXCJBZCBwZXJmb3JtYW5jZSBkYXNoYm9hcmQgdmlld1wiXCJcIlxuICAgIDU0XHQgICAgIyBMb2FkIGRhdGFcbiAgICA1NVx0ICAgIGRhdGFzZXRzID0gZGF0YV9hbmFseXNpcy5sb2FkX2RhdGEoKVxuICAgIDU2XHQgICAgZmJfYWRzID0gZGF0YXNldHNbJ2ZiX2FkcyddXG4gICAgNTdcdCAgICBpZ19hZHMgPSBkYXRhc2V0c1snaWdfYWRzJ11cbiAgICA1OFx0ICAgIGdvb2dsZV9hZHMgPSBkYXRhc2V0c1snZ29vZ2xlX2FkcyddXG4gICAgNTlcdFxuICAgIDYwXHQgICAgIyBHZXQgc3RhdGlzdGljcyBhbmQgY2hhcnRzXG4gICAgNjFcdCAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSA9IGRhdGFfYW5hbHlzaXMuZ2V0X3BsYXRmb3JtX3BlcmZvcm1hbmNlKGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKVxuICAgIDYyXHQgICAgcGxhdGZvcm1fY29udmVyc2lvbnNfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9wbGF0Zm9ybV9jb252ZXJzaW9uc19jaGFydChmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2FkcylcbiAgICA2M1x0ICAgIHBsYXRmb3JtX3JvYXNfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9wbGF0Zm9ybV9yb2FzX2NoYXJ0KGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKVxuICAgIDY0XHQgICAgZGFpbHlfY29udmVyc2lvbnNfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9kYWlseV9jb252ZXJzaW9uc19jaGFydChmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2FkcylcbiAgICA2NVx0XG4gICAgNjZcdCAgICBjb250ZXh0ID0ge1xuICAgIDY3XHQgICAgICAgICdwbGF0Zm9ybV9wZXJmb3JtYW5jZSc6IHBsYXRmb3JtX3BlcmZvcm1hbmNlLnRvX2RpY3QoJ3JlY29yZHMnKSxcbiAgICA2OFx0ICAgICAgICAncGxhdGZvcm1fY29udmVyc2lvbnNfY2hhcnQnOiBwbGF0Zm9ybV9jb252ZXJzaW9uc19jaGFydCxcbiAgICA2OVx0ICAgICAgICAncGxhdGZvcm1fcm9hc19jaGFydCc6IHBsYXRmb3JtX3JvYXNfY2hhcnQsXG4gICAgNzBcdCAgICAgICAgJ2RhaWx5X2NvbnZlcnNpb25zX2NoYXJ0JzogZGFpbHlfY29udmVyc2lvbnNfY2hhcnQsXG4gICAgNzFcdCAgICB9XG4gICAgNzJcdFxuICAgIDczXHQgICAgcmV0dXJuIHJlbmRlcihyZXF1ZXN0LCAnZGF0YV9kYXNoYm9hcmQvYWRfcGVyZm9ybWFuY2UuaHRtbCcsIGNvbnRleHQpXG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjViMTI4MzQxLWJhYjctNGUyNy05YzE3LTg0NGQ4Y2YxMDMyZDt0b29sdV92cnR4XzAxVVBNOFJlYjdaZEhFSkI0N1RQQkRkRyI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI3ODg1Y2M5Ni03YmM2LTQzYTMtODJkMi0wYWRjNjcwMDMxMGI7dG9vbHVfdnJ0eF8wMUc2TFhZSnlXdXpDaHZDb0praE0xVFoiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBkaWdpdGFsX2RhdGFfcHJvamVjdC91cmxzLnB5OlxuICAgICAxXHRcIlwiXCJcbiAgICAgMlx0VVJMIGNvbmZpZ3VyYXRpb24gZm9yIGRpZ2l0YWxfZGF0YV9wcm9qZWN0IHByb2plY3QuXG4gICAgIDNcdFxuICAgICA0XHRUaGUgYHVybHBhdHRlcm5zYCBsaXN0IHJvdXRlcyBVUkxzIHRvIHZpZXdzLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2Ugc2VlOlxuICAgICA1XHQgICAgaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi90b3BpY3MvaHR0cC91cmxzL1xuICAgICA2XHRFeGFtcGxlczpcbiAgICAgN1x0RnVuY3Rpb24gdmlld3NcbiAgICAgOFx0ICAgIDEuIEFkZCBhbiBpbXBvcnQ6ICBmcm9tIG15X2FwcCBpbXBvcnQgdmlld3NcbiAgICAgOVx0ICAgIDIuIEFkZCBhIFVSTCB0byB1cmxwYXR0ZXJuczogIHBhdGgoJycsIHZpZXdzLmhvbWUsIG5hbWU9J2hvbWUnKVxuICAgIDEwXHRDbGFzcy1iYXNlZCB2aWV3c1xuICAgIDExXHQgICAgMS4gQWRkIGFuIGltcG9ydDogIGZyb20gb3RoZXJfYXBwLnZpZXdzIGltcG9ydCBIb21lXG4gICAgMTJcdCAgICAyLiBBZGQgYSBVUkwgdG8gdXJscGF0dGVybnM6ICBwYXRoKCcnLCBIb21lLmFzX3ZpZXcoKSwgbmFtZT0naG9tZScpXG4gICAgMTNcdEluY2x1ZGluZyBhbm90aGVyIFVSTGNvbmZcbiAgICAxNFx0ICAgIDEuIEltcG9ydCB0aGUgaW5jbHVkZSgpIGZ1bmN0aW9uOiBmcm9tIGRqYW5nby51cmxzIGltcG9ydCBpbmNsdWRlLCBwYXRoXG4gICAgMTVcdCAgICAyLiBBZGQgYSBVUkwgdG8gdXJscGF0dGVybnM6ICBwYXRoKCdibG9nLycsIGluY2x1ZGUoJ2Jsb2cudXJscycpKVxuICAgIDE2XHRcIlwiXCJcbiAgICAxN1x0ZnJvbSBkamFuZ28uY29udHJpYiBpbXBvcnQgYWRtaW5cbiAgICAxOFx0ZnJvbSBkamFuZ28udXJscyBpbXBvcnQgcGF0aFxuICAgIDE5XHRcbiAgICAyMFx0dXJscGF0dGVybnMgPSBbXG4gICAgMjFcdCAgICBwYXRoKCdhZG1pbi8nLCBhZG1pbi5zaXRlLnVybHMpLFxuICAgIDIyXHRdXG4gICAgMjNcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMjNcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjFiNTAyYzMwLWYzOTctNDc3Mi04ZjliLWIxYTk3OTA5Y2ZjYzt0b29sdV92cnR4XzAxRkhaSDZ2emQ2N1ROMThQN0ZmNWVmTiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGRpZ2l0YWxfZGF0YV9wcm9qZWN0L3VybHMucHkuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAxM1x0SW5jbHVkaW5nIGFub3RoZXIgVVJMY29uZlxuICAgIDE0XHQgICAgMS4gSW1wb3J0IHRoZSBpbmNsdWRlKCkgZnVuY3Rpb246IGZyb20gZGphbmdvLnVybHMgaW1wb3J0IGluY2x1ZGUsIHBhdGhcbiAgICAxNVx0ICAgIDIuIEFkZCBhIFVSTCB0byB1cmxwYXR0ZXJuczogIHBhdGgoJ2Jsb2cvJywgaW5jbHVkZSgnYmxvZy51cmxzJykpXG4gICAgMTZcdFwiXCJcIlxuICAgIDE3XHRmcm9tIGRqYW5nby5jb250cmliIGltcG9ydCBhZG1pblxuICAgIDE4XHRmcm9tIGRqYW5nby51cmxzIGltcG9ydCBwYXRoLCBpbmNsdWRlXG4gICAgMTlcdFxuICAgIDIwXHR1cmxwYXR0ZXJucyA9IFtcbiAgICAyMVx0ICAgIHBhdGgoJ2FkbWluLycsIGFkbWluLnNpdGUudXJscyksXG4gICAgMjJcdCAgICBwYXRoKCcnLCBpbmNsdWRlKCdkYXRhX2Rhc2hib2FyZC51cmxzJykpLFxuICAgIDIzXHRdXG4gICAgMjRcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIxMGVhZjA0Ni0wMjk4LTQ2N2YtYTBhMi0xNjhjZTlmYzIzNWQ7dG9vbHVfdnJ0eF8wMUhLemZ6SFBKZ0xZdTI5VFB0dTd1cEoiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiRmlsZSBzYXZlZCBzdWNjZXNzZnVsbHkuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNDcyOTA4NDItMjAyMC00ZjRjLTk2NzgtZjA2NTA3YzM5NTkyO3Rvb2x1X3ZydHhfMDFBR3gyVWZ2U3BORkg1d3ZyZkdiQmNiIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjlkZTNiZjAzLTAzNzktNDAwOC1iYTFiLTdlYmU4ZWVkNWY4NTt0b29sdV92cnR4XzAxSnZnV1piWGtMTWlYMXpWNlp5TkpuVCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI0NWI1MDdiYy01OWUxLTQ3OWUtOGUwNS01MTdmOTQzYWY2ZGQ7dG9vbHVfdnJ0eF8wMTU0cVE2UXQ0aThRdjh1anlOWkhUb1AiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiRmlsZSBzYXZlZCBzdWNjZXNzZnVsbHkuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMTI5YWNkMjEtMzMzOS00N2MxLWEwMDktZTFhZWRiYjM4MTllO3Rvb2x1X3ZydHhfMDFFS0o5NEhDNjZCOTdCQTdWaWdQeExoIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjRmMjQ1ZGIyLThmNzItNGRjZS1iNDk3LTA0Y2QzMzI4NmNkMjt0b29sdV92cnR4XzAxSHdOQ0R5bXoxeXNmRFFGOEx2RWhKOSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImFlYmJhMWNhLWQxZmYtNGUyZC1hODY1LWY1MTRjMTNiZGYxMDt0b29sdV92cnR4XzAxSHc2emdrWXFlN2JZaEgySkt3ZEpyRCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIyZTg0MWNiNS03NmUyLTQ2MmQtOTg5My04Zjk0Y2Q2MTk4MmE7dG9vbHVfdnJ0eF8wMVZBcXd3YWo4cWtpdFhOaWVMYlF6Y1QiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG4gICAgICAgIDxyZXR1cm4tY29kZT5cbiAgICAgICAgMFxuICAgICAgICA8L3JldHVybi1jb2RlPlxuICAgICAgICA8c3Rkb3V0PlxuICAgICAgICBcdTAwMWJbMzY7MW1PcGVyYXRpb25zIHRvIHBlcmZvcm06XHUwMDFiWzBtXG5cdTAwMWJbMW0gIEFwcGx5IGFsbCBtaWdyYXRpb25zOiBcdTAwMWJbMG1hZG1pbiwgYXV0aCwgY29udGVudHR5cGVzLCBzZXNzaW9uc1xuXHUwMDFiWzM2OzFtUnVubmluZyBtaWdyYXRpb25zOlx1MDAxYlswbVxuICBBcHBseWluZyBjb250ZW50dHlwZXMuMDAwMV9pbml0aWFsLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGF1dGguMDAwMV9pbml0aWFsLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGFkbWluLjAwMDFfaW5pdGlhbC4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhZG1pbi4wMDAyX2xvZ2VudHJ5X3JlbW92ZV9hdXRvX2FkZC4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhZG1pbi4wMDAzX2xvZ2VudHJ5X2FkZF9hY3Rpb25fZmxhZ19jaG9pY2VzLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGNvbnRlbnR0eXBlcy4wMDAyX3JlbW92ZV9jb250ZW50X3R5cGVfbmFtZS4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhdXRoLjAwMDJfYWx0ZXJfcGVybWlzc2lvbl9uYW1lX21heF9sZW5ndGguLi5cdTAwMWJbMzI7MW0gT0tcdTAwMWJbMG1cbiAgQXBwbHlpbmcgYXV0aC4wMDAzX2FsdGVyX3VzZXJfZW1haWxfbWF4X2xlbmd0aC4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhdXRoLjAwMDRfYWx0ZXJfdXNlcl91c2VybmFtZV9vcHRzLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGF1dGguMDAwNV9hbHRlcl91c2VyX2xhc3RfbG9naW5fbnVsbC4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhdXRoLjAwMDZfcmVxdWlyZV9jb250ZW50dHlwZXNfMDAwMi4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhdXRoLjAwMDdfYWx0ZXJfdmFsaWRhdG9yc19hZGRfZXJyb3JfbWVzc2FnZXMuLi5cdTAwMWJbMzI7MW0gT0tcdTAwMWJbMG1cbiAgQXBwbHlpbmcgYXV0aC4wMDA4X2FsdGVyX3VzZXJfdXNlcm5hbWVfbWF4X2xlbmd0aC4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhdXRoLjAwMDlfYWx0ZXJfdXNlcl9sYXN0X25hbWVfbWF4X2xlbmd0aC4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuICBBcHBseWluZyBhdXRoLjAwMTBfYWx0ZXJfZ3JvdXBfbmFtZV9tYXhfbGVuZ3RoLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIGF1dGguMDAxMV91cGRhdGVfcHJveHlfcGVybWlzc2lvbnMuLi5cdTAwMWJbMzI7MW0gT0tcdTAwMWJbMG1cbiAgQXBwbHlpbmcgYXV0aC4wMDEyX2FsdGVyX3VzZXJfZmlyc3RfbmFtZV9tYXhfbGVuZ3RoLi4uXHUwMDFiWzMyOzFtIE9LXHUwMDFiWzBtXG4gIEFwcGx5aW5nIHNlc3Npb25zLjAwMDFfaW5pdGlhbC4uLlx1MDAxYlszMjsxbSBPS1x1MDAxYlswbVxuXG4gICAgICAgIDwvc3Rkb3V0PlxuICAgICAgICA8c3RkZXJyPlxuICAgICAgICBcbiAgICAgICAgPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiOWNhNDYwNjgtMjVmZi00YjY1LWI3ODItNDQ0Nzg3NTM1NmJiO3Rvb2x1X3ZydHhfMDFETkJ5QlBvUFN1aGM2dTZ3d1ZnOTNqIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlByb2Nlc3MgbGF1bmNoZWQgd2l0aCBQSUQgMTAiLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJjYWQ4M2M1My05NTBlLTRiMjYtYjI2NS02NjdhY2M0YTdhYjg7dG9vbHVfdnJ0eF8wMVFSb0hmNG5VZEFHZEpaQXBtanlydDciOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBkaWdpdGFsX2RhdGFfcHJvamVjdC91cmxzLnB5OlxuICAgICAxXHRcIlwiXCJcbiAgICAgMlx0VVJMIGNvbmZpZ3VyYXRpb24gZm9yIGRpZ2l0YWxfZGF0YV9wcm9qZWN0IHByb2plY3QuXG4gICAgIDNcdFxuICAgICA0XHRUaGUgYHVybHBhdHRlcm5zYCBsaXN0IHJvdXRlcyBVUkxzIHRvIHZpZXdzLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2Ugc2VlOlxuICAgICA1XHQgICAgaHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzQuMi90b3BpY3MvaHR0cC91cmxzL1xuICAgICA2XHRFeGFtcGxlczpcbiAgICAgN1x0RnVuY3Rpb24gdmlld3NcbiAgICAgOFx0ICAgIDEuIEFkZCBhbiBpbXBvcnQ6ICBmcm9tIG15X2FwcCBpbXBvcnQgdmlld3NcbiAgICAgOVx0ICAgIDIuIEFkZCBhIFVSTCB0byB1cmxwYXR0ZXJuczogIHBhdGgoJycsIHZpZXdzLmhvbWUsIG5hbWU9J2hvbWUnKVxuICAgIDEwXHRDbGFzcy1iYXNlZCB2aWV3c1xuICAgIDExXHQgICAgMS4gQWRkIGFuIGltcG9ydDogIGZyb20gb3RoZXJfYXBwLnZpZXdzIGltcG9ydCBIb21lXG4gICAgMTJcdCAgICAyLiBBZGQgYSBVUkwgdG8gdXJscGF0dGVybnM6ICBwYXRoKCcnLCBIb21lLmFzX3ZpZXcoKSwgbmFtZT0naG9tZScpXG4gICAgMTNcdEluY2x1ZGluZyBhbm90aGVyIFVSTGNvbmZcbiAgICAxNFx0ICAgIDEuIEltcG9ydCB0aGUgaW5jbHVkZSgpIGZ1bmN0aW9uOiBmcm9tIGRqYW5nby51cmxzIGltcG9ydCBpbmNsdWRlLCBwYXRoXG4gICAgMTVcdCAgICAyLiBBZGQgYSBVUkwgdG8gdXJscGF0dGVybnM6ICBwYXRoKCdibG9nLycsIGluY2x1ZGUoJ2Jsb2cudXJscycpKVxuICAgIDE2XHRcIlwiXCJcbiAgICAxN1x0ZnJvbSBkamFuZ28uY29udHJpYiBpbXBvcnQgYWRtaW5cbiAgICAxOFx0ZnJvbSBkamFuZ28udXJscyBpbXBvcnQgcGF0aCwgaW5jbHVkZVxuICAgIDE5XHRcbiAgICAyMFx0dXJscGF0dGVybnMgPSBbXG4gICAgMjFcdCAgICBwYXRoKCdhZG1pbi8nLCBhZG1pbi5zaXRlLnVybHMpLFxuICAgIDIyXHQgICAgcGF0aCgnJywgaW5jbHVkZSgnZGF0YV9kYXNoYm9hcmQudXJscycpKSxcbiAgICAyM1x0XVxuICAgIDI0XHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDI0XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJlZDNlOTM4NC0wOTAyLTRmZGQtYTg4MC0wMWJiMGNmOWIzM2Y7dG9vbHVfdnJ0eF8wMUxSYTM0U3ZYUXpxTVV1UDdpTTJDWDkiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBkaWdpdGFsX2RhdGFfcHJvamVjdC91cmxzLnB5LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgMThcdGZyb20gZGphbmdvLnVybHMgaW1wb3J0IHBhdGgsIGluY2x1ZGVcbiAgICAxOVx0XG4gICAgMjBcdHVybHBhdHRlcm5zID0gW1xuICAgIDIxXHQgICAgcGF0aCgnYWRtaW4vJywgYWRtaW4uc2l0ZS51cmxzKSxcbiAgICAyMlx0ICAgIHBhdGgoJ2Rhc2hib2FyZC8nLCBpbmNsdWRlKCdkYXRhX2Rhc2hib2FyZC51cmxzJykpLFxuICAgIDIzXHQgICAgcGF0aCgnJywgaW5jbHVkZSgnZGF0YV9kYXNoYm9hcmQudXJscycpKSwgICMgS2VlcCB0aGlzIGZvciB0aGUgcm9vdCBVUkxcbiAgICAyNFx0XVxuICAgIDI1XHRcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYjc3NmFjYTAtMWY4ZS00OWNhLWJjMGEtYWFiZjJhZjRiZWMzO3Rvb2x1X3ZydHhfMDFYWGc1OUpNZzVoejIxcWZQN1Z0REQxIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgYXJlIGFsbCBrbm93biBwcm9jZXNzZXM6XG5cblRlcm1pbmFsIDEwOiBweXRob24gbWFuYWdlLnB5IHJ1bnNlcnZlciAtIHJ1bm5pbmciLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI5NDE1ZDcwOS0wYTI5LTQzNjEtODNiMC03NzRlZTFhZWNiYmI7dG9vbHVfdnJ0eF8wMTRZU1pKS1JldmltSlFlQkRRUE1FUHYiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGVybWluYWwgMTAga2lsbGVkIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiM2VlZGNhYTgtMTY5MS00ZjBhLTk2OWQtMjQ5YmFkZGFhMTVkO3Rvb2x1X3ZydHhfMDFXTXA2dGJSWFpHU0dNWldhSGpTdUFYIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlByb2Nlc3MgbGF1bmNoZWQgd2l0aCBQSUQgMTEiLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI1OTUxMTI2Ni0yZWYxLTQzZWQtYjU1OS0xNzE2OThlMzQ1ZjI7dG9vbHVfdnJ0eF8wMTMzWEJYTHBwZEJNamVUeVhWZmJOcW8iOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGFfYW5hbHlzaXMucHlcbi4uLlxuICAgIFxuICAgICMgR29vZ2xlIEFkcyBkYXRhXG4gICAgZ29vZ2xlX2FkcyA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9hZHNfZGF0YS5jc3YnKVxuICAgIGdvb2dsZV9hZHNbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGdvb2dsZV9hZHNbJ2RhdGUnXSlcbiAgICBcbiAgICAjIEN1c3RvbWVyIHRvdWNocG9pbnRzXG4gICAgdG91Y2hwb2ludHMgPSBwZC5yZWFkX2NzdignZGF0YS9jdXN0b21lcl90b3VjaHBvaW50cy5jc3YnKVxuICAgIHRvdWNocG9pbnRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZSh0b3VjaHBvaW50c1snZGF0ZSddKVxuICAgIFxuICAgICMgR29vZ2xlIFNlYXJjaCBDb25zb2xlIGRhdGFcbiAgICBzZWFyY2hfY29uc29sZSA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9zZWFyY2hfY29uc29sZV9kYXRhLmNzdicpXG4gICAgc2VhcmNoX2NvbnNvbGVbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKHNlYXJjaF9jb25zb2xlWydkYXRlJ10pXG4gICAgXG4gICAgcHJpbnQoXCJBbGwgZGF0YXNldHMgbG9hZGVkIHN1Y2Nlc3NmdWxseSFcIilcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICAnZ2FfZGF0YSc6IGdhX2RhdGEsXG4gICAgICAgICdjdXN0b21lcl9kYXRhJzogY3VzdG9tZXJfZGF0YSxcbiAgICAgICAgJ2ZiX2Fkcyc6IGZiX2FkcyxcbiAgICAgICAgJ2lnX2Fkcyc6IGlnX2FkcyxcbiAgICAgICAgJ2dvb2dsZV9hZHMnOiBnb29nbGVfYWRzLFxuICAgICAgICAndG91Y2hwb2ludHMnOiB0b3VjaHBvaW50cyxcbiAgICAgICAgJ3NlYXJjaF9jb25zb2xlJzogc2VhcmNoX2NvbnNvbGVcbiAgICB9XG5cbmRlZiBhbmFseXplX2dvb2dsZV9hbmFseXRpY3MoZ2FfZGF0YSk6XG4gICAgXCJcIlwiQW5hbHl6ZSBHb29nbGUgQW5hbHl0aWNzIGRhdGFcIlwiXCJcbiAgICBwcmludChcIlxcbj09PSBHb29nbGUgQW5hbHl0aWNzIEFuYWx5c2lzID09PVwiKVxuICAgIFxuICAgICMgQmFzaWMgc3RhdGlzdGljc1xuICAgIHByaW50KFwiXFxuQmFzaWMgU3RhdGlzdGljczpcIilcbiAgICBwcmludChmXCJUb3RhbCBzZXNzaW9uczoge2dhX2RhdGFbJ3Nlc3Npb25zJ10uc3VtKCl9XCIpXG4gICAgcHJpbnQoZlwiVG90YWwgbmV3IHVzZXJzOiB7Z2FfZGF0YVsnbmV3X3VzZXJzJ10uc3VtKCl9XCIpXG4gICAgcHJpbnQoZlwiVG90YWwgdHJhbnNhY3Rpb25zOiB7Z2FfZGF0YVsndHJhbnNhY3Rpb25zJ10uc3VtKCl9XCIpXG4gICAgcHJpbnQoZlwiVG90YWwgcmV2ZW51ZTogJHtnYV9kYXRhWydyZXZlbnVlJ10uc3VtKCk6LjJmfVwiKVxuICAgIHByaW50KGZcIkF2ZXJhZ2UgY29udmVyc2lvbiByYXRlOiB7Z2FfZGF0YVsnY29udmVyc2lvbl9yYXRlJ10ubWVhbigpOi4yJX1cIilcbiAgICBcbiAgICAjIFNlc3Npb25zIGJ5IHNvdXJjZVxuICAgIHNlc3Npb25zX2J5X3NvdXJjZSA9IGdhX2RhdGEuZ3JvdXBieSgnc291cmNlJylbJ3Nlc3Npb25zJ10uc3VtKCkucmVzZXRfaW5kZXgoKVxuICAgIHNlc3Npb25zX2J5X3NvdXJjZSA9IHNlc3Npb25zX2J5X3NvdXJjZS5zb3J0X3ZhbHVlcygnc2Vzc2lvbnMnLCBhc2NlbmRpbmc9RmFsc2UpXG4uLi5cbiAgICBcbiAgICBmaWcudXBkYXRlX3lheGVzKHRpdGxlX3RleHQ9XCJTZXNzaW9uc1wiLCBzZWNvbmRhcnlfeT1GYWxzZSlcbiAgICBmaWcudXBkYXRlX3lheGVzKHRpdGxlX3RleHQ9XCJUcmFuc2FjdGlvbnNcIiwgc2Vjb25kYXJ5X3k9VHJ1ZSlcbiAgICBcbiAgICBmaWcud3JpdGVfaHRtbCgnc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWUuaHRtbCcpXG4gICAgcHJpbnQoXCJTZXNzaW9ucyBhbmQgdHJhbnNhY3Rpb25zIG92ZXIgdGltZSBjaGFydCBzYXZlZCBhcyAnc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWUuaHRtbCdcIilcbiAgICBcbiAgICAjIERldmljZSBjYXRlZ29yeSBhbmFseXNpc1xuICAgIGRldmljZV9tZXRyaWNzID0gZ2FfZGF0YS5ncm91cGJ5KCdkZXZpY2VfY2F0ZWdvcnknKS5hZ2coe1xuICAgICAgICAnc2Vzc2lvbnMnOiAnc3VtJyxcbiAgICAgICAgJ3RyYW5zYWN0aW9ucyc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbl9yYXRlJzogJ21lYW4nXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIFxuICAgICMgQ3JlYXRlIGEgcGllIGNoYXJ0IG9mIHNlc3Npb25zIGJ5IGRldmljZVxuICAgIGZpZyA9IHB4LnBpZShcbiAgICAgICAgZGV2aWNlX21ldHJpY3MsIFxuICAgICAgICB2YWx1ZXM9J3Nlc3Npb25zJywgXG4gICAgICAgIG5hbWVzPSdkZXZpY2VfY2F0ZWdvcnknLFxuICAgICAgICB0aXRsZT0nU2Vzc2lvbnMgYnkgRGV2aWNlIENhdGVnb3J5JyxcbiAgICAgICAgY29sb3JfZGlzY3JldGVfc2VxdWVuY2U9cHguY29sb3JzLnNlcXVlbnRpYWwuUGxhc21hXG4gICAgKVxuICAgIGZpZy53cml0ZV9odG1sKCdzZXNzaW9uc19ieV9kZXZpY2UuaHRtbCcpXG4gICAgcHJpbnQoXCJTZXNzaW9ucyBieSBkZXZpY2UgY2hhcnQgc2F2ZWQgYXMgJ3Nlc3Npb25zX2J5X2RldmljZS5odG1sJ1wiKVxuICAgIFxuICAgIHJldHVybiBkZXZpY2VfbWV0cmljc1xuXG5kZWYgYW5hbHl6ZV9jdXN0b21lcl9kYXRhKGN1c3RvbWVyX2RhdGEpOlxuICAgIFwiXCJcIkFuYWx5emUgY3VzdG9tZXIgZGF0YVwiXCJcIlxuICAgIHByaW50KFwiXFxuPT09IEN1c3RvbWVyIERhdGEgQW5hbHlzaXMgPT09XCIpXG4gICAgXG4gICAgIyBCYXNpYyBzdGF0aXN0aWNzXG4gICAgcHJpbnQoXCJcXG5DdXN0b21lciBEZW1vZ3JhcGhpY3M6XCIpXG4gICAgcHJpbnQoZlwiVG90YWwgY3VzdG9tZXJzOiB7bGVuKGN1c3RvbWVyX2RhdGEpfVwiKVxuICAgIHByaW50KGZcIkdlbmRlciBkaXN0cmlidXRpb246IHtjdXN0b21lcl9kYXRhWydnZW5kZXInXS52YWx1ZV9jb3VudHMobm9ybWFsaXplPVRydWUpLnRvX2RpY3QoKX1cIilcbiAgICBwcmludChmXCJBdmVyYWdlIGFnZToge2N1c3RvbWVyX2RhdGFbJ2FnZSddLm1lYW4oKTouMWZ9IHllYXJzXCIpXG4gICAgcHJpbnQoZlwiQXZlcmFnZSB0b3RhbCBzcGVuZDogJHtjdXN0b21lcl9kYXRhWyd0b3RhbF9zcGVuZCddLm1lYW4oKTouMmZ9XCIpXG4gICAgXG4gICAgIyBDdXN0b21lciBzZWdtZW50c1xuICAgIHNlZ21lbnRfY291bnRzID0gY3VzdG9tZXJfZGF0YVsnY3VzdG9tZXJfc2VnbWVudCddLnZhbHVlX2NvdW50cygpXG4uLi5cbiAgICBmaWcud3JpdGVfaHRtbCgnYWdlX2Rpc3RyaWJ1dGlvbi5odG1sJylcbiAgICBwcmludChcIkFnZSBkaXN0cmlidXRpb24gY2hhcnQgc2F2ZWQgYXMgJ2FnZV9kaXN0cmlidXRpb24uaHRtbCdcIilcbiAgICBcbiAgICAjIExveWFsdHkgdGllciBhbmFseXNpc1xuICAgIGxveWFsdHlfc3BlbmQgPSBjdXN0b21lcl9kYXRhLmdyb3VwYnkoJ2xveWFsdHlfdGllcicpLmFnZyh7XG4gICAgICAgICd0b3RhbF9zcGVuZCc6ICdtZWFuJyxcbiAgICAgICAgJ3RvdGFsX29yZGVycyc6ICdtZWFuJ1xuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBcbiAgICAjIENyZWF0ZSBhIGdyb3VwZWQgYmFyIGNoYXJ0IG9mIGxveWFsdHkgdGllcnNcbiAgICBmaWcgPSBweC5iYXIoXG4gICAgICAgIGxveWFsdHlfc3BlbmQsIFxuICAgICAgICB4PSdsb3lhbHR5X3RpZXInLCBcbiAgICAgICAgeT1bJ3RvdGFsX3NwZW5kJywgJ3RvdGFsX29yZGVycyddLFxuICAgICAgICBiYXJtb2RlPSdncm91cCcsXG4gICAgICAgIHRpdGxlPSdBdmVyYWdlIFNwZW5kIGFuZCBPcmRlcnMgYnkgTG95YWx0eSBUaWVyJyxcbiAgICAgICAgbGFiZWxzPXtcbiAgICAgICAgICAgICdsb3lhbHR5X3RpZXInOiAnTG95YWx0eSBUaWVyJywgXG4gICAgICAgICAgICAndmFsdWUnOiAnVmFsdWUnLFxuICAgICAgICAgICAgJ3ZhcmlhYmxlJzogJ01ldHJpYydcbiAgICAgICAgfVxuICAgIClcbiAgICBmaWcud3JpdGVfaHRtbCgnbG95YWx0eV90aWVyX2FuYWx5c2lzLmh0bWwnKVxuICAgIHByaW50KFwiTG95YWx0eSB0aWVyIGFuYWx5c2lzIGNoYXJ0IHNhdmVkIGFzICdsb3lhbHR5X3RpZXJfYW5hbHlzaXMuaHRtbCdcIilcbiAgICBcbiAgICByZXR1cm4gbG95YWx0eV9zcGVuZFxuXG5kZWYgYW5hbHl6ZV9hZF9wZXJmb3JtYW5jZShmYl9hZHMsIGlnX2FkcywgZ29vZ2xlX2Fkcyk6XG4gICAgXCJcIlwiQW5hbHl6ZSBhZCBwZXJmb3JtYW5jZSBhY3Jvc3MgcGxhdGZvcm1zXCJcIlwiXG4gICAgcHJpbnQoXCJcXG49PT0gQWQgUGVyZm9ybWFuY2UgQW5hbHlzaXMgPT09XCIpXG4gICAgXG4gICAgIyBDb21iaW5lIGFkIGRhdGFcbiAgICBmYl9hZHNfc3VtbWFyeSA9IGZiX2Fkcy5ncm91cGJ5KCdkYXRlJykuYWdnKHtcbiAgICAgICAgJ2ltcHJlc3Npb25zJzogJ3N1bScsXG4gICAgICAgICdjbGlja3MnOiAnc3VtJyxcbiAgICAgICAgJ3NwZW5kJzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbl92YWx1ZSc6ICdzdW0nXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIGZiX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0ZhY2Vib29rJ1xuICAgIFxuICAgIGlnX2Fkc19zdW1tYXJ5ID0gaWdfYWRzLmdyb3VwYnkoJ2RhdGUnKS5hZ2coe1xuICAgICAgICAnaW1wcmVzc2lvbnMnOiAnc3VtJyxcbiAgICAgICAgJ2NsaWNrcyc6ICdzdW0nLFxuICAgICAgICAnc3BlbmQnOiAnc3VtJyxcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9uX3ZhbHVlJzogJ3N1bSdcbiAgICB9KS5yZXNldF9pbmRleCgpXG4gICAgaWdfYWRzX3N1bW1hcnlbJ3BsYXRmb3JtJ10gPSAnSW5zdGFncmFtJ1xuLi4uXG4gICAgXG4gICAgIyBDYWxjdWxhdGUgbWV0cmljc1xuICAgIGFsbF9hZHNbJ2N0ciddID0gYWxsX2Fkc1snY2xpY2tzJ10gLyBhbGxfYWRzWydpbXByZXNzaW9ucyddXG4gICAgYWxsX2Fkc1snY3BjJ10gPSBhbGxfYWRzWydzcGVuZCddIC8gYWxsX2Fkc1snY2xpY2tzJ11cbiAgICBhbGxfYWRzWydyb2FzJ10gPSBhbGxfYWRzWydjb252ZXJzaW9uX3ZhbHVlJ10gLyBhbGxfYWRzWydzcGVuZCddXG4gICAgXG4gICAgIyBQbGF0Zm9ybSBwZXJmb3JtYW5jZSBjb21wYXJpc29uXG4gICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UgPSBhbGxfYWRzLmdyb3VwYnkoJ3BsYXRmb3JtJykuYWdnKHtcbiAgICAgICAgJ2ltcHJlc3Npb25zJzogJ3N1bScsXG4gICAgICAgICdjbGlja3MnOiAnc3VtJyxcbiAgICAgICAgJ3NwZW5kJzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbl92YWx1ZSc6ICdzdW0nLFxuICAgICAgICAnY3RyJzogJ21lYW4nLFxuICAgICAgICAnY3BjJzogJ21lYW4nLFxuICAgICAgICAncm9hcyc6ICdtZWFuJ1xuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBcbiAgICBwcmludChcIlxcblBsYXRmb3JtIFBlcmZvcm1hbmNlOlwiKVxuICAgIHByaW50KHBsYXRmb3JtX3BlcmZvcm1hbmNlW1sncGxhdGZvcm0nLCAnaW1wcmVzc2lvbnMnLCAnY2xpY2tzJywgJ2NvbnZlcnNpb25zJywgJ3NwZW5kJywgJ2NvbnZlcnNpb25fdmFsdWUnXV0pXG4gICAgXG4gICAgIyBDcmVhdGUgYSBiYXIgY2hhcnQgY29tcGFyaW5nIHBsYXRmb3Jtc1xuICAgIGZpZyA9IHB4LmJhcihcbiAgICAgICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UsIFxuICAgICAgICB4PSdwbGF0Zm9ybScsIFxuICAgICAgICB5PSdjb252ZXJzaW9ucycsXG4gICAgICAgIGNvbG9yPSdwbGF0Zm9ybScsXG4gICAgICAgIHRpdGxlPSdDb252ZXJzaW9ucyBieSBQbGF0Zm9ybScsXG4gICAgICAgIGxhYmVscz17J3BsYXRmb3JtJzogJ1BsYXRmb3JtJywgJ2NvbnZlcnNpb25zJzogJ1RvdGFsIENvbnZlcnNpb25zJ31cbiAgICApXG4gICAgZmlnLndyaXRlX2h0bWwoJ3BsYXRmb3JtX2NvbnZlcnNpb25zLmh0bWwnKVxuICAgIHByaW50KFwiXFxuUGxhdGZvcm0gY29udmVyc2lvbnMgY2hhcnQgc2F2ZWQgYXMgJ3BsYXRmb3JtX2NvbnZlcnNpb25zLmh0bWwnXCIpXG4gICAgXG4gICAgIyBST0FTIGNvbXBhcmlzb25cbiAgICBmaWcgPSBweC5iYXIoXG4gICAgICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlLCBcbiAgICAgICAgeD0ncGxhdGZvcm0nLCBcbiAgICAgICAgeT0ncm9hcycsXG4gICAgICAgIGNvbG9yPSdwbGF0Zm9ybScsXG4gICAgICAgIHRpdGxlPSdSZXR1cm4gb24gQWQgU3BlbmQgKFJPQVMpIGJ5IFBsYXRmb3JtJyxcbiAgICAgICAgbGFiZWxzPXsncGxhdGZvcm0nOiAnUGxhdGZvcm0nLCAncm9hcyc6ICdST0FTJ31cbiAgICApXG4gICAgZmlnLndyaXRlX2h0bWwoJ3BsYXRmb3JtX3JvYXMuaHRtbCcpXG4gICAgcHJpbnQoXCJQbGF0Zm9ybSBST0FTIGNoYXJ0IHNhdmVkIGFzICdwbGF0Zm9ybV9yb2FzLmh0bWwnXCIpXG4gICAgXG4gICAgIyBEYWlseSBwZXJmb3JtYW5jZSBvdmVyIHRpbWVcbiAgICBmaWcgPSBweC5saW5lKFxuICAgICAgICBhbGxfYWRzLCBcbiAgICAgICAgeD0nZGF0ZScsIFxuICAgICAgICB5PSdjb252ZXJzaW9ucycsXG4gICAgICAgIGNvbG9yPSdwbGF0Zm9ybScsXG4gICAgICAgIHRpdGxlPSdEYWlseSBDb252ZXJzaW9ucyBieSBQbGF0Zm9ybScsXG4gICAgICAgIGxhYmVscz17J2RhdGUnOiAnRGF0ZScsICdjb252ZXJzaW9ucyc6ICdDb252ZXJzaW9ucycsICdwbGF0Zm9ybSc6ICdQbGF0Zm9ybSd9XG4gICAgKVxuICAgIGZpZy53cml0ZV9odG1sKCdkYWlseV9jb252ZXJzaW9ucy5odG1sJylcbiAgICBwcmludChcIkRhaWx5IGNvbnZlcnNpb25zIGNoYXJ0IHNhdmVkIGFzICdkYWlseV9jb252ZXJzaW9ucy5odG1sJ1wiKVxuICAgIFxuICAgIHJldHVybiBwbGF0Zm9ybV9wZXJmb3JtYW5jZVxuXG5kZWYgbWFpbigpOlxuICAgIFwiXCJcIk1haW4gZnVuY3Rpb24gdG8gcnVuIHRoZSBhbmFseXNpc1wiXCJcIlxuICAgIHByaW50KFwiU3RhcnRpbmcgZGF0YSBhbmFseXNpcy4uLlwiKVxuICAgIFxuICAgICMgTG9hZCBhbGwgZGF0YXNldHNcbiAgICBkYXRhc2V0cyA9IGxvYWRfZGF0YSgpXG4gICAgXG4gICAgIyBBbmFseXplIEdvb2dsZSBBbmFseXRpY3MgZGF0YVxuICAgIGRldmljZV9tZXRyaWNzID0gYW5hbHl6ZV9nb29nbGVfYW5hbHl0aWNzKGRhdGFzZXRzWydnYV9kYXRhJ10pXG4gICAgXG4gICAgIyBBbmFseXplIGN1c3RvbWVyIGRhdGFcbiAgICBsb3lhbHR5X21ldHJpY3MgPSBhbmFseXplX2N1c3RvbWVyX2RhdGEoZGF0YXNldHNbJ2N1c3RvbWVyX2RhdGEnXSlcbiAgICBcbiAgICAjIEFuYWx5emUgYWQgcGVyZm9ybWFuY2VcbiAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSA9IGFuYWx5emVfYWRfcGVyZm9ybWFuY2UoXG4gICAgICAgIGRhdGFzZXRzWydmYl9hZHMnXSwgXG4gICAgICAgIGRhdGFzZXRzWydpZ19hZHMnXSwgXG4gICAgICAgIGRhdGFzZXRzWydnb29nbGVfYWRzJ11cbiAgICApXG4gICAgXG4gICAgcHJpbnQoXCJcXG5BbmFseXNpcyBjb21wbGV0ZSEgSFRNTCB2aXN1YWxpemF0aW9ucyBoYXZlIGJlZW4gc2F2ZWQgdG8gdGhlIGN1cnJlbnQgZGlyZWN0b3J5LlwiKVxuICAgIHByaW50KFwiWW91IGNhbiBvcGVuIHRoZXNlIEhUTUwgZmlsZXMgaW4geW91ciB3ZWIgYnJvd3NlciB0byB2aWV3IHRoZSBpbnRlcmFjdGl2ZSBjaGFydHMuXCIpXG5cbmlmIF9fbmFtZV9fID09IFwiX19tYWluX19cIjpcbiAgICBtYWluKClcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGFfZGFzaGJvYXJkL2RhdGFfYW5hbHlzaXMucHlcbmltcG9ydCBwYW5kYXMgYXMgcGRcbmltcG9ydCBudW1weSBhcyBucFxuaW1wb3J0IHBsb3RseS5leHByZXNzIGFzIHB4XG5pbXBvcnQgcGxvdGx5LmdyYXBoX29iamVjdHMgYXMgZ29cbmZyb20gcGxvdGx5LnN1YnBsb3RzIGltcG9ydCBtYWtlX3N1YnBsb3RzXG5pbXBvcnQgZGF0ZXRpbWUgYXMgZHRcbmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lLCB0aW1lZGVsdGFcbmltcG9ydCB3YXJuaW5nc1xuaW1wb3J0IGpzb25cblxuIyBTdXBwcmVzcyB3YXJuaW5nc1xud2FybmluZ3MuZmlsdGVyd2FybmluZ3MoJ2lnbm9yZScpXG5cbiMgTG9hZCBkYXRhc2V0c1xuZGVmIGxvYWRfZGF0YSgpOlxuICAgIFwiXCJcIkxvYWQgYWxsIGRhdGFzZXRzIGZyb20gdGhlIGRhdGEgZGlyZWN0b3J5XCJcIlwiXG4gICAgXG4gICAgIyBHb29nbGUgQW5hbHl0aWNzIGRhdGFcbiAgICBnYV9kYXRhID0gcGQucmVhZF9jc3YoJ2RhdGEvZ29vZ2xlX2FuYWx5dGljc19kYXRhLmNzdicpXG4gICAgZ2FfZGF0YVsnZGF0ZSddID0gcGQudG9fZGF0ZXRpbWUoZ2FfZGF0YVsnZGF0ZSddKVxuICAgIFxuICAgICMgQ3VzdG9tZXIgZGF0YVxuICAgIGN1c3RvbWVyX2RhdGEgPSBwZC5yZWFkX2NzdignZGF0YS9jdXN0b21lcl9kYXRhLmNzdicpXG4gICAgY3VzdG9tZXJfZGF0YVsnc2lnbnVwX2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGN1c3RvbWVyX2RhdGFbJ3NpZ251cF9kYXRlJ10pXG4gICAgY3VzdG9tZXJfZGF0YVsnbGFzdF9wdXJjaGFzZV9kYXRlJ10gPSBwZC50b19kYXRldGltZShjdXN0b21lcl9kYXRhWydsYXN0X3B1cmNoYXNlX2RhdGUnXSlcbiAgICBcbiAgICAjIFNvY2lhbCBtZWRpYSBhZHMgZGF0YVxuICAgIGZiX2FkcyA9IHBkLnJlYWRfY3N2KCdkYXRhL2ZhY2Vib29rX2Fkc19kYXRhLmNzdicpXG4gICAgZmJfYWRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZShmYl9hZHNbJ2RhdGUnXSlcbiAgICBcbiAgICBpZ19hZHMgPSBwZC5yZWFkX2NzdignZGF0YS9pbnN0YWdyYW1fYWRzX2RhdGEuY3N2JylcbiAgICBpZ19hZHNbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGlnX2Fkc1snZGF0ZSddKVxuICAgIFxuICAgICMgR29vZ2xlIEFkcyBkYXRhXG4gICAgZ29vZ2xlX2FkcyA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9hZHNfZGF0YS5jc3YnKVxuICAgIGdvb2dsZV9hZHNbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGdvb2dsZV9hZHNbJ2RhdGUnXSlcbiAgICBcbiAgICAjIEN1c3RvbWVyIHRvdWNocG9pbnRzXG4gICAgdG91Y2hwb2ludHMgPSBwZC5yZWFkX2NzdignZGF0YS9jdXN0b21lcl90b3VjaHBvaW50cy5jc3YnKVxuICAgIHRvdWNocG9pbnRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZSh0b3VjaHBvaW50c1snZGF0ZSddKVxuICAgIFxuICAgICMgR29vZ2xlIFNlYXJjaCBDb25zb2xlIGRhdGFcbiAgICBzZWFyY2hfY29uc29sZSA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9zZWFyY2hfY29uc29sZV9kYXRhLmNzdicpXG4gICAgc2VhcmNoX2NvbnNvbGVbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKHNlYXJjaF9jb25zb2xlWydkYXRlJ10pXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ2dhX2RhdGEnOiBnYV9kYXRhLFxuICAgICAgICAnY3VzdG9tZXJfZGF0YSc6IGN1c3RvbWVyX2RhdGEsXG4gICAgICAgICdmYl9hZHMnOiBmYl9hZHMsXG4gICAgICAgICdpZ19hZHMnOiBpZ19hZHMsXG4gICAgICAgICdnb29nbGVfYWRzJzogZ29vZ2xlX2FkcyxcbiAgICAgICAgJ3RvdWNocG9pbnRzJzogdG91Y2hwb2ludHMsXG4gICAgICAgICdzZWFyY2hfY29uc29sZSc6IHNlYXJjaF9jb25zb2xlXG4gICAgfVxuXG5kZWYgZ2V0X2dvb2dsZV9hbmFseXRpY3Nfc3RhdHMoZ2FfZGF0YSk6XG4gICAgXCJcIlwiR2V0IGJhc2ljIEdvb2dsZSBBbmFseXRpY3Mgc3RhdGlzdGljc1wiXCJcIlxuICAgIHN0YXRzID0ge1xuICAgICAgICAndG90YWxfc2Vzc2lvbnMnOiBnYV9kYXRhWydzZXNzaW9ucyddLnN1bSgpLFxuICAgICAgICAndG90YWxfbmV3X3VzZXJzJzogZ2FfZGF0YVsnbmV3X3VzZXJzJ10uc3VtKCksXG4gICAgICAgICd0b3RhbF90cmFuc2FjdGlvbnMnOiBnYV9kYXRhWyd0cmFuc2FjdGlvbnMnXS5zdW0oKSxcbiAgICAgICAgJ3RvdGFsX3JldmVudWUnOiBnYV9kYXRhWydyZXZlbnVlJ10uc3VtKCksXG4gICAgICAgICdhdmdfY29udmVyc2lvbl9yYXRlJzogZ2FfZGF0YVsnY29udmVyc2lvbl9yYXRlJ10ubWVhbigpICogMTAwLCAgIyBhcyBwZXJjZW50YWdlXG4gICAgfVxuICAgIHJldHVybiBzdGF0c1xuXG5kZWYgZ2V0X3Nlc3Npb25zX2J5X3NvdXJjZV9jaGFydChnYV9kYXRhKTpcbiAgICBcIlwiXCJDcmVhdGUgYSBiYXIgY2hhcnQgb2Ygc2Vzc2lvbnMgYnkgc291cmNlXCJcIlwiXG4gICAgc2Vzc2lvbnNfYnlfc291cmNlID0gZ2FfZGF0YS5ncm91cGJ5KCdzb3VyY2UnKVsnc2Vzc2lvbnMnXS5zdW0oKS5yZXNldF9pbmRleCgpXG4gICAgc2Vzc2lvbnNfYnlfc291cmNlID0gc2Vzc2lvbnNfYnlfc291cmNlLnNvcnRfdmFsdWVzKCdzZXNzaW9ucycsIGFzY2VuZGluZz1GYWxzZSlcbiAgICBcbiAgICBmaWcgPSBweC5iYXIoXG4gICAgICAgIHNlc3Npb25zX2J5X3NvdXJjZSwgXG4gICAgICAgIHg9J3NvdXJjZScsIFxuICAgICAgICB5PSdzZXNzaW9ucycsXG4gICAgICAgIHRpdGxlPSdTZXNzaW9ucyBieSBTb3VyY2UnLFxuICAgICAgICBsYWJlbHM9eydzb3VyY2UnOiAnU291cmNlJywgJ3Nlc3Npb25zJzogJ1RvdGFsIFNlc3Npb25zJ30sXG4gICAgICAgIGNvbG9yPSdzZXNzaW9ucycsXG4gICAgICAgIGNvbG9yX2NvbnRpbnVvdXNfc2NhbGU9J1ZpcmlkaXMnXG4gICAgKVxuICAgIFxuICAgIHJldHVybiBmaWcudG9faHRtbChmdWxsX2h0bWw9RmFsc2UsIGluY2x1ZGVfcGxvdGx5anM9J2NkbicpXG5cbmRlZiBnZXRfc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWVfY2hhcnQoZ2FfZGF0YSk6XG4gICAgXCJcIlwiQ3JlYXRlIGEgbGluZSBjaGFydCBvZiBzZXNzaW9ucyBhbmQgdHJhbnNhY3Rpb25zIG92ZXIgdGltZVwiXCJcIlxuICAgIGRhaWx5X21ldHJpY3MgPSBnYV9kYXRhLmdyb3VwYnkoJ2RhdGUnKS5hZ2coe1xuICAgICAgICAnc2Vzc2lvbnMnOiAnc3VtJyxcbiAgICAgICAgJ3RyYW5zYWN0aW9ucyc6ICdzdW0nLFxuICAgICAgICAncmV2ZW51ZSc6ICdzdW0nXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIFxuICAgIGZpZyA9IG1ha2Vfc3VicGxvdHMoc3BlY3M9W1t7XCJzZWNvbmRhcnlfeVwiOiBUcnVlfV1dKVxuICAgIFxuICAgIGZpZy5hZGRfdHJhY2UoXG4gICAgICAgIGdvLlNjYXR0ZXIoXG4gICAgICAgICAgICB4PWRhaWx5X21ldHJpY3NbJ2RhdGUnXSwgXG4gICAgICAgICAgICB5PWRhaWx5X21ldHJpY3NbJ3Nlc3Npb25zJ10sXG4gICAgICAgICAgICBuYW1lPSdTZXNzaW9ucycsXG4gICAgICAgICAgICBsaW5lPWRpY3QoY29sb3I9J2JsdWUnKVxuICAgICAgICApLFxuICAgICAgICBzZWNvbmRhcnlfeT1GYWxzZVxuICAgIClcbiAgICBcbiAgICBmaWcuYWRkX3RyYWNlKFxuICAgICAgICBnby5TY2F0dGVyKFxuICAgICAgICAgICAgeD1kYWlseV9tZXRyaWNzWydkYXRlJ10sIFxuICAgICAgICAgICAgeT1kYWlseV9tZXRyaWNzWyd0cmFuc2FjdGlvbnMnXSxcbiAgICAgICAgICAgIG5hbWU9J1RyYW5zYWN0aW9ucycsXG4gICAgICAgICAgICBsaW5lPWRpY3QoY29sb3I9J2dyZWVuJylcbiAgICAgICAgKSxcbiAgICAgICAgc2Vjb25kYXJ5X3k9VHJ1ZVxuICAgIClcbiAgICBcbiAgICBmaWcudXBkYXRlX2xheW91dChcbiAgICAgICAgdGl0bGU9J1Nlc3Npb25zIGFuZCBUcmFuc2FjdGlvbnMgT3ZlciBUaW1lJyxcbiAgICAgICAgeGF4aXNfdGl0bGU9J0RhdGUnLFxuICAgICAgICBsZWdlbmQ9ZGljdCh4PTAuMDEsIHk9MC45OSwgYmdjb2xvcj0ncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpJylcbiAgICApXG4gICAgXG4gICAgZmlnLnVwZGF0ZV95YXhlcyh0aXRsZV90ZXh0PVwiU2Vzc2lvbnNcIiwgc2Vjb25kYXJ5X3k9RmFsc2UpXG4gICAgZmlnLnVwZGF0ZV95YXhlcyh0aXRsZV90ZXh0PVwiVHJhbnNhY3Rpb25zXCIsIHNlY29uZGFyeV95PVRydWUpXG4gICAgXG4gICAgcmV0dXJuIGZpZy50b19odG1sKGZ1bGxfaHRtbD1GYWxzZSwgaW5jbHVkZV9wbG90bHlqcz0nY2RuJylcblxuZGVmIGdldF9zZXNzaW9uc19ieV9kZXZpY2VfY2hhcnQoZ2FfZGF0YSk6XG4gICAgXCJcIlwiQ3JlYXRlIGEgcGllIGNoYXJ0IG9mIHNlc3Npb25zIGJ5IGRldmljZVwiXCJcIlxuICAgIGRldmljZV9tZXRyaWNzID0gZ2FfZGF0YS5ncm91cGJ5KCdkZXZpY2VfY2F0ZWdvcnknKS5hZ2coe1xuICAgICAgICAnc2Vzc2lvbnMnOiAnc3VtJyxcbiAgICAgICAgJ3RyYW5zYWN0aW9ucyc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbl9yYXRlJzogJ21lYW4nXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIFxuICAgIGZpZyA9IHB4LnBpZShcbiAgICAgICAgZGV2aWNlX21ldHJpY3MsIFxuICAgICAgICB2YWx1ZXM9J3Nlc3Npb25zJywgXG4gICAgICAgIG5hbWVzPSdkZXZpY2VfY2F0ZWdvcnknLFxuICAgICAgICB0aXRsZT0nU2Vzc2lvbnMgYnkgRGV2aWNlIENhdGVnb3J5JyxcbiAgICAgICAgY29sb3JfZGlzY3JldGVfc2VxdWVuY2U9cHguY29sb3JzLnNlcXVlbnRpYWwuUGxhc21hXG4gICAgKVxuICAgIFxuICAgIHJldHVybiBmaWcudG9faHRtbChmdWxsX2h0bWw9RmFsc2UsIGluY2x1ZGVfcGxvdGx5anM9J2NkbicpXG5cbmRlZiBnZXRfY3VzdG9tZXJfZGVtb2dyYXBoaWNzKGN1c3RvbWVyX2RhdGEpOlxuICAgIFwiXCJcIkdldCBjdXN0b21lciBkZW1vZ3JhcGhpYyBpbmZvcm1hdGlvblwiXCJcIlxuICAgIGRlbW9ncmFwaGljcyA9IHtcbiAgICAgICAgJ3RvdGFsX2N1c3RvbWVycyc6IGxlbihjdXN0b21lcl9kYXRhKSxcbiAgICAgICAgJ2dlbmRlcl9kaXN0cmlidXRpb24nOiBjdXN0b21lcl9kYXRhWydnZW5kZXInXS52YWx1ZV9jb3VudHMobm9ybWFsaXplPVRydWUpLnRvX2RpY3QoKSxcbiAgICAgICAgJ2F2Z19hZ2UnOiBjdXN0b21lcl9kYXRhWydhZ2UnXS5tZWFuKCksXG4gICAgICAgICdhdmdfdG90YWxfc3BlbmQnOiBjdXN0b21lcl9kYXRhWyd0b3RhbF9zcGVuZCddLm1lYW4oKSxcbiAgICB9XG4gICAgcmV0dXJuIGRlbW9ncmFwaGljc1xuXG5kZWYgZ2V0X2N1c3RvbWVyX3NlZ21lbnRzX2NoYXJ0KGN1c3RvbWVyX2RhdGEpOlxuICAgIFwiXCJcIkNyZWF0ZSBhIGJhciBjaGFydCBvZiBjdXN0b21lciBzZWdtZW50c1wiXCJcIlxuICAgIHNlZ21lbnRfY291bnRzID0gY3VzdG9tZXJfZGF0YVsnY3VzdG9tZXJfc2VnbWVudCddLnZhbHVlX2NvdW50cygpXG4gICAgXG4gICAgZmlnID0gcHguYmFyKFxuICAgICAgICB4PXNlZ21lbnRfY291bnRzLmluZGV4LCBcbiAgICAgICAgeT1zZWdtZW50X2NvdW50cy52YWx1ZXMsXG4gICAgICAgIHRpdGxlPSdDdXN0b21lciBTZWdtZW50cycsXG4gICAgICAgIGxhYmVscz17J3gnOiAnU2VnbWVudCcsICd5JzogJ051bWJlciBvZiBDdXN0b21lcnMnfSxcbiAgICAgICAgY29sb3I9c2VnbWVudF9jb3VudHMudmFsdWVzLFxuICAgICAgICBjb2xvcl9jb250aW51b3VzX3NjYWxlPSdWaXJpZGlzJ1xuICAgIClcbiAgICBcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxuXG5kZWYgZ2V0X2FnZV9kaXN0cmlidXRpb25fY2hhcnQoY3VzdG9tZXJfZGF0YSk6XG4gICAgXCJcIlwiQ3JlYXRlIGEgaGlzdG9ncmFtIG9mIGN1c3RvbWVyIGFnZXNcIlwiXCJcbiAgICBmaWcgPSBweC5oaXN0b2dyYW0oXG4gICAgICAgIGN1c3RvbWVyX2RhdGEsIFxuICAgICAgICB4PSdhZ2UnLFxuICAgICAgICBuYmlucz0yMCxcbiAgICAgICAgdGl0bGU9J0N1c3RvbWVyIEFnZSBEaXN0cmlidXRpb24nLFxuICAgICAgICBsYWJlbHM9eydhZ2UnOiAnQWdlJywgJ2NvdW50JzogJ051bWJlciBvZiBDdXN0b21lcnMnfSxcbiAgICAgICAgY29sb3JfZGlzY3JldGVfc2VxdWVuY2U9WydwdXJwbGUnXVxuICAgIClcbiAgICBcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxuXG5kZWYgZ2V0X2xveWFsdHlfdGllcl9jaGFydChjdXN0b21lcl9kYXRhKTpcbiAgICBcIlwiXCJDcmVhdGUgYSBncm91cGVkIGJhciBjaGFydCBvZiBsb3lhbHR5IHRpZXJzXCJcIlwiXG4gICAgbG95YWx0eV9zcGVuZCA9IGN1c3RvbWVyX2RhdGEuZ3JvdXBieSgnbG95YWx0eV90aWVyJykuYWdnKHtcbiAgICAgICAgJ3RvdGFsX3NwZW5kJzogJ21lYW4nLFxuICAgICAgICAndG90YWxfb3JkZXJzJzogJ21lYW4nXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIFxuICAgIGZpZyA9IHB4LmJhcihcbiAgICAgICAgbG95YWx0eV9zcGVuZCwgXG4gICAgICAgIHg9J2xveWFsdHlfdGllcicsIFxuICAgICAgICB5PVsndG90YWxfc3BlbmQnLCAndG90YWxfb3JkZXJzJ10sXG4gICAgICAgIGJhcm1vZGU9J2dyb3VwJyxcbiAgICAgICAgdGl0bGU9J0F2ZXJhZ2UgU3BlbmQgYW5kIE9yZGVycyBieSBMb3lhbHR5IFRpZXInLFxuICAgICAgICBsYWJlbHM9e1xuICAgICAgICAgICAgJ2xveWFsdHlfdGllcic6ICdMb3lhbHR5IFRpZXInLCBcbiAgICAgICAgICAgICd2YWx1ZSc6ICdWYWx1ZScsXG4gICAgICAgICAgICAndmFyaWFibGUnOiAnTWV0cmljJ1xuICAgICAgICB9XG4gICAgKVxuICAgIFxuICAgIHJldHVybiBmaWcudG9faHRtbChmdWxsX2h0bWw9RmFsc2UsIGluY2x1ZGVfcGxvdGx5anM9J2NkbicpXG5cbmRlZiBnZXRfcGxhdGZvcm1fcGVyZm9ybWFuY2UoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpOlxuICAgIFwiXCJcIkdldCBhZCBwZXJmb3JtYW5jZSBtZXRyaWNzIGFjcm9zcyBwbGF0Zm9ybXNcIlwiXCJcbiAgICAjIENvbWJpbmUgYWQgZGF0YVxuICAgIGZiX2Fkc19zdW1tYXJ5ID0gZmJfYWRzLmdyb3VwYnkoJ2RhdGUnKS5hZ2coe1xuICAgICAgICAnaW1wcmVzc2lvbnMnOiAnc3VtJyxcbiAgICAgICAgJ2NsaWNrcyc6ICdzdW0nLFxuICAgICAgICAnc3BlbmQnOiAnc3VtJyxcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9uX3ZhbHVlJzogJ3N1bSdcbiAgICB9KS5yZXNldF9pbmRleCgpXG4gICAgZmJfYWRzX3N1bW1hcnlbJ3BsYXRmb3JtJ10gPSAnRmFjZWJvb2snXG4gICAgXG4gICAgaWdfYWRzX3N1bW1hcnkgPSBpZ19hZHMuZ3JvdXBieSgnZGF0ZScpLmFnZyh7XG4gICAgICAgICdpbXByZXNzaW9ucyc6ICdzdW0nLFxuICAgICAgICAnY2xpY2tzJzogJ3N1bScsXG4gICAgICAgICdzcGVuZCc6ICdzdW0nLFxuICAgICAgICAnY29udmVyc2lvbnMnOiAnc3VtJyxcbiAgICAgICAgJ2NvbnZlcnNpb25fdmFsdWUnOiAnc3VtJ1xuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBpZ19hZHNfc3VtbWFyeVsncGxhdGZvcm0nXSA9ICdJbnN0YWdyYW0nXG4gICAgXG4gICAgZ29vZ2xlX2Fkc19zdW1tYXJ5ID0gZ29vZ2xlX2Fkcy5ncm91cGJ5KCdkYXRlJykuYWdnKHtcbiAgICAgICAgJ2ltcHJlc3Npb25zJzogJ3N1bScsXG4gICAgICAgICdjbGlja3MnOiAnc3VtJyxcbiAgICAgICAgJ2Nvc3QnOiAnc3VtJyxcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9uX3ZhbHVlJzogJ3N1bSdcbiAgICB9KS5yZXNldF9pbmRleCgpXG4gICAgZ29vZ2xlX2Fkc19zdW1tYXJ5ID0gZ29vZ2xlX2Fkc19zdW1tYXJ5LnJlbmFtZShjb2x1bW5zPXsnY29zdCc6ICdzcGVuZCd9KVxuICAgIGdvb2dsZV9hZHNfc3VtbWFyeVsncGxhdGZvcm0nXSA9ICdHb29nbGUgQWRzJ1xuICAgIFxuICAgICMgQ29tYmluZSBhbGwgcGxhdGZvcm1zXG4gICAgYWxsX2FkcyA9IHBkLmNvbmNhdChbXG4gICAgICAgIGZiX2Fkc19zdW1tYXJ5LCBcbiAgICAgICAgaWdfYWRzX3N1bW1hcnksIFxuICAgICAgICBnb29nbGVfYWRzX3N1bW1hcnlcbiAgICBdLCBpZ25vcmVfaW5kZXg9VHJ1ZSlcbiAgICBcbiAgICAjIENhbGN1bGF0ZSBtZXRyaWNzXG4gICAgYWxsX2Fkc1snY3RyJ10gPSBhbGxfYWRzWydjbGlja3MnXSAvIGFsbF9hZHNbJ2ltcHJlc3Npb25zJ11cbiAgICBhbGxfYWRzWydjcGMnXSA9IGFsbF9hZHNbJ3NwZW5kJ10gLyBhbGxfYWRzWydjbGlja3MnXVxuICAgIGFsbF9hZHNbJ3JvYXMnXSA9IGFsbF9hZHNbJ2NvbnZlcnNpb25fdmFsdWUnXSAvIGFsbF9hZHNbJ3NwZW5kJ11cbiAgICBcbiAgICAjIFBsYXRmb3JtIHBlcmZvcm1hbmNlIGNvbXBhcmlzb25cbiAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSA9IGFsbF9hZHMuZ3JvdXBieSgncGxhdGZvcm0nKS5hZ2coe1xuICAgICAgICAnaW1wcmVzc2lvbnMnOiAnc3VtJyxcbiAgICAgICAgJ2NsaWNrcyc6ICdzdW0nLFxuICAgICAgICAnc3BlbmQnOiAnc3VtJyxcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXG4gICAgICAgICdjb252ZXJzaW9uX3ZhbHVlJzogJ3N1bScsXG4gICAgICAgICdjdHInOiAnbWVhbicsXG4gICAgICAgICdjcGMnOiAnbWVhbicsXG4gICAgICAgICdyb2FzJzogJ21lYW4nXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIFxuICAgIHJldHVybiBwbGF0Zm9ybV9wZXJmb3JtYW5jZVxuXG5kZWYgZ2V0X3BsYXRmb3JtX2NvbnZlcnNpb25zX2NoYXJ0KGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKTpcbiAgICBcIlwiXCJDcmVhdGUgYSBiYXIgY2hhcnQgY29tcGFyaW5nIHBsYXRmb3JtIGNvbnZlcnNpb25zXCJcIlwiXG4gICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UgPSBnZXRfcGxhdGZvcm1fcGVyZm9ybWFuY2UoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpXG4gICAgXG4gICAgZmlnID0gcHguYmFyKFxuICAgICAgICBwbGF0Zm9ybV9wZXJmb3JtYW5jZSwgXG4gICAgICAgIHg9J3BsYXRmb3JtJywgXG4gICAgICAgIHk9J2NvbnZlcnNpb25zJyxcbiAgICAgICAgY29sb3I9J3BsYXRmb3JtJyxcbiAgICAgICAgdGl0bGU9J0NvbnZlcnNpb25zIGJ5IFBsYXRmb3JtJyxcbiAgICAgICAgbGFiZWxzPXsncGxhdGZvcm0nOiAnUGxhdGZvcm0nLCAnY29udmVyc2lvbnMnOiAnVG90YWwgQ29udmVyc2lvbnMnfVxuICAgIClcbiAgICBcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxuXG5kZWYgZ2V0X3BsYXRmb3JtX3JvYXNfY2hhcnQoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpOlxuICAgIFwiXCJcIkNyZWF0ZSBhIGJhciBjaGFydCBjb21wYXJpbmcgcGxhdGZvcm0gUk9BU1wiXCJcIlxuICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlID0gZ2V0X3BsYXRmb3JtX3BlcmZvcm1hbmNlKGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKVxuICAgIFxuICAgIGZpZyA9IHB4LmJhcihcbiAgICAgICAgcGxhdGZvcm1fcGVyZm9ybWFuY2UsIFxuICAgICAgICB4PSdwbGF0Zm9ybScsIFxuICAgICAgICB5PSdyb2FzJyxcbiAgICAgICAgY29sb3I9J3BsYXRmb3JtJyxcbiAgICAgICAgdGl0bGU9J1JldHVybiBvbiBBZCBTcGVuZCAoUk9BUykgYnkgUGxhdGZvcm0nLFxuICAgICAgICBsYWJlbHM9eydwbGF0Zm9ybSc6ICdQbGF0Zm9ybScsICdyb2FzJzogJ1JPQVMnfVxuICAgIClcbiAgICBcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxuXG5kZWYgZ2V0X2RhaWx5X2NvbnZlcnNpb25zX2NoYXJ0KGZiX2FkcywgaWdfYWRzLCBnb29nbGVfYWRzKTpcbiAgICBcIlwiXCJDcmVhdGUgYSBsaW5lIGNoYXJ0IG9mIGRhaWx5IGNvbnZlcnNpb25zIGJ5IHBsYXRmb3JtXCJcIlwiXG4gICAgIyBDb21iaW5lIGFkIGRhdGFcbiAgICBmYl9hZHNfc3VtbWFyeSA9IGZiX2Fkcy5ncm91cGJ5KCdkYXRlJykuYWdnKHtcbiAgICAgICAgJ2NvbnZlcnNpb25zJzogJ3N1bScsXG4gICAgfSkucmVzZXRfaW5kZXgoKVxuICAgIGZiX2Fkc19zdW1tYXJ5WydwbGF0Zm9ybSddID0gJ0ZhY2Vib29rJ1xuICAgIFxuICAgIGlnX2Fkc19zdW1tYXJ5ID0gaWdfYWRzLmdyb3VwYnkoJ2RhdGUnKS5hZ2coe1xuICAgICAgICAnY29udmVyc2lvbnMnOiAnc3VtJyxcbiAgICB9KS5yZXNldF9pbmRleCgpXG4gICAgaWdfYWRzX3N1bW1hcnlbJ3BsYXRmb3JtJ10gPSAnSW5zdGFncmFtJ1xuICAgIFxuICAgIGdvb2dsZV9hZHNfc3VtbWFyeSA9IGdvb2dsZV9hZHMuZ3JvdXBieSgnZGF0ZScpLmFnZyh7XG4gICAgICAgICdjb252ZXJzaW9ucyc6ICdzdW0nLFxuICAgIH0pLnJlc2V0X2luZGV4KClcbiAgICBnb29nbGVfYWRzX3N1bW1hcnlbJ3BsYXRmb3JtJ10gPSAnR29vZ2xlIEFkcydcbiAgICBcbiAgICAjIENvbWJpbmUgYWxsIHBsYXRmb3Jtc1xuICAgIGFsbF9hZHMgPSBwZC5jb25jYXQoW1xuICAgICAgICBmYl9hZHNfc3VtbWFyeSwgXG4gICAgICAgIGlnX2Fkc19zdW1tYXJ5LCBcbiAgICAgICAgZ29vZ2xlX2Fkc19zdW1tYXJ5XG4gICAgXSwgaWdub3JlX2luZGV4PVRydWUpXG4gICAgXG4gICAgZmlnID0gcHgubGluZShcbiAgICAgICAgYWxsX2FkcywgXG4gICAgICAgIHg9J2RhdGUnLCBcbiAgICAgICAgeT0nY29udmVyc2lvbnMnLFxuICAgICAgICBjb2xvcj0ncGxhdGZvcm0nLFxuICAgICAgICB0aXRsZT0nRGFpbHkgQ29udmVyc2lvbnMgYnkgUGxhdGZvcm0nLFxuICAgICAgICBsYWJlbHM9eydkYXRlJzogJ0RhdGUnLCAnY29udmVyc2lvbnMnOiAnQ29udmVyc2lvbnMnLCAncGxhdGZvcm0nOiAnUGxhdGZvcm0nfVxuICAgIClcbiAgICBcbiAgICByZXR1cm4gZmlnLnRvX2h0bWwoZnVsbF9odG1sPUZhbHNlLCBpbmNsdWRlX3Bsb3RseWpzPSdjZG4nKVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YV9kYXNoYm9hcmQvdmlld3MucHlcbi4uLlxuXG5kZWYgZ29vZ2xlX2FuYWx5dGljcyhyZXF1ZXN0KTpcbiAgICBcIlwiXCJHb29nbGUgQW5hbHl0aWNzIGRhc2hib2FyZCB2aWV3XCJcIlwiXG4gICAgIyBMb2FkIGRhdGFcbiAgICBkYXRhc2V0cyA9IGRhdGFfYW5hbHlzaXMubG9hZF9kYXRhKClcbiAgICBnYV9kYXRhID0gZGF0YXNldHNbJ2dhX2RhdGEnXVxuXG4gICAgIyBHZXQgc3RhdGlzdGljcyBhbmQgY2hhcnRzXG4gICAgc3RhdHMgPSBkYXRhX2FuYWx5c2lzLmdldF9nb29nbGVfYW5hbHl0aWNzX3N0YXRzKGdhX2RhdGEpXG4gICAgc2Vzc2lvbnNfYnlfc291cmNlX2NoYXJ0ID0gZGF0YV9hbmFseXNpcy5nZXRfc2Vzc2lvbnNfYnlfc291cmNlX2NoYXJ0KGdhX2RhdGEpXG4gICAgc2Vzc2lvbnNfdHJhbnNhY3Rpb25zX3RpbWVfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9zZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZV9jaGFydChnYV9kYXRhKVxuICAgIHNlc3Npb25zX2J5X2RldmljZV9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X3Nlc3Npb25zX2J5X2RldmljZV9jaGFydChnYV9kYXRhKVxuXG4gICAgY29udGV4dCA9IHtcbiAgICAgICAgJ3N0YXRzJzogc3RhdHMsXG4gICAgICAgICdzZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQnOiBzZXNzaW9uc19ieV9zb3VyY2VfY2hhcnQsXG4gICAgICAgICdzZXNzaW9uc190cmFuc2FjdGlvbnNfdGltZV9jaGFydCc6IHNlc3Npb25zX3RyYW5zYWN0aW9uc190aW1lX2NoYXJ0LFxuICAgICAgICAnc2Vzc2lvbnNfYnlfZGV2aWNlX2NoYXJ0Jzogc2Vzc2lvbnNfYnlfZGV2aWNlX2NoYXJ0LFxuICAgIH1cbi4uLlxuXG5kZWYgY3VzdG9tZXJfYW5hbHlzaXMocmVxdWVzdCk6XG4gICAgXCJcIlwiQ3VzdG9tZXIgYW5hbHlzaXMgZGFzaGJvYXJkIHZpZXdcIlwiXCJcbiAgICAjIExvYWQgZGF0YVxuICAgIGRhdGFzZXRzID0gZGF0YV9hbmFseXNpcy5sb2FkX2RhdGEoKVxuICAgIGN1c3RvbWVyX2RhdGEgPSBkYXRhc2V0c1snY3VzdG9tZXJfZGF0YSddXG5cbiAgICAjIEdldCBzdGF0aXN0aWNzIGFuZCBjaGFydHNcbiAgICBkZW1vZ3JhcGhpY3MgPSBkYXRhX2FuYWx5c2lzLmdldF9jdXN0b21lcl9kZW1vZ3JhcGhpY3MoY3VzdG9tZXJfZGF0YSlcbiAgICBjdXN0b21lcl9zZWdtZW50c19jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X2N1c3RvbWVyX3NlZ21lbnRzX2NoYXJ0KGN1c3RvbWVyX2RhdGEpXG4gICAgYWdlX2Rpc3RyaWJ1dGlvbl9jaGFydCA9IGRhdGFfYW5hbHlzaXMuZ2V0X2FnZV9kaXN0cmlidXRpb25fY2hhcnQoY3VzdG9tZXJfZGF0YSlcbiAgICBsb3lhbHR5X3RpZXJfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9sb3lhbHR5X3RpZXJfY2hhcnQoY3VzdG9tZXJfZGF0YSlcblxuICAgIGNvbnRleHQgPSB7XG4gICAgICAgICdkZW1vZ3JhcGhpY3MnOiBkZW1vZ3JhcGhpY3MsXG4gICAgICAgICdjdXN0b21lcl9zZWdtZW50c19jaGFydCc6IGN1c3RvbWVyX3NlZ21lbnRzX2NoYXJ0LFxuICAgICAgICAnYWdlX2Rpc3RyaWJ1dGlvbl9jaGFydCc6IGFnZV9kaXN0cmlidXRpb25fY2hhcnQsXG4gICAgICAgICdsb3lhbHR5X3RpZXJfY2hhcnQnOiBsb3lhbHR5X3RpZXJfY2hhcnQsXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbmRlcihyZXF1ZXN0LCAnZGF0YV9kYXNoYm9hcmQvY3VzdG9tZXJfYW5hbHlzaXMuaHRtbCcsIGNvbnRleHQpXG5cbmRlZiBhZF9wZXJmb3JtYW5jZShyZXF1ZXN0KTpcbiAgICBcIlwiXCJBZCBwZXJmb3JtYW5jZSBkYXNoYm9hcmQgdmlld1wiXCJcIlxuICAgICMgTG9hZCBkYXRhXG4gICAgZGF0YXNldHMgPSBkYXRhX2FuYWx5c2lzLmxvYWRfZGF0YSgpXG4gICAgZmJfYWRzID0gZGF0YXNldHNbJ2ZiX2FkcyddXG4gICAgaWdfYWRzID0gZGF0YXNldHNbJ2lnX2FkcyddXG4gICAgZ29vZ2xlX2FkcyA9IGRhdGFzZXRzWydnb29nbGVfYWRzJ11cblxuICAgICMgR2V0IHN0YXRpc3RpY3MgYW5kIGNoYXJ0c1xuICAgIHBsYXRmb3JtX3BlcmZvcm1hbmNlID0gZGF0YV9hbmFseXNpcy5nZXRfcGxhdGZvcm1fcGVyZm9ybWFuY2UoZmJfYWRzLCBpZ19hZHMsIGdvb2dsZV9hZHMpXG4gICAgcGxhdGZvcm1fY29udmVyc2lvbnNfY2hhcnQgPSBkYXRhX2FuYWx5c2lzLmdldF9wbGF0Zm9ybV9jb252ZXJzaW9uc19jaGFydChmYl9hZHMsIGlnX2FkcywgZ28uLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJjNTc2NTFjYS1kODA3LTQ0ZDktYmNhNi1lNWFkYjJhZDdlYzI7dG9vbHVfdnJ0eF8wMVI1bjlKUXZVYlN0eGRwWkFCZmY1WUsiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvY3VzdG9tZXJfdG91Y2hwb2ludHMuY3N2XG50b3VjaHBvaW50X2lkLGN1c3RvbWVyX2lkLGRhdGUsY2hhbm5lbCxzb3VyY2UsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxpbnRlcmFjdGlvbl90eXBlLGNvbnZlcnNpb24sY29udmVyc2lvbl92YWx1ZSxwcm9kdWN0X2NhdGVnb3J5LHByb2R1Y3RfaWQscHJvZHVjdF9uYW1lXG4xMDAwMSwxMDAxLDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsYWRfY2xpY2ssRkFMU0UsMC4wMCxNZW4ncyBTaGlydHMsTlVMTCxOVUxMXG4xMDAwMiwxMDAxLDIwMjQtMDEtMDEsT3JnYW5pYyBTZWFyY2gsR29vZ2xlLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwMDMsMTAwMSwyMDI0LTAxLTAyLEVtYWlsLE5ld3NsZXR0ZXIsTlVMTCxXZWVrbHlfRGVhbHMsZW1haWxfb3BlbixGQUxTRSwwLjAwLE5VTEwsTlVMTCxOVUxMXG4xMDAwNCwxMDAxLDIwMjQtMDEtMDIsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQixhZF9jbGljayxUUlVFLDgwLjAwLE1lbidzIFNoaXJ0cywyMDAxLFN1bW1lciBMaW5lbiBTaGlydFxuMTAwMDUsMTAwMiwyMDI0LTAxLTAxLFBhaWQgU29jaWFsLEluc3RhZ3JhbSwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAwNiwxMDAyLDIwMjQtMDEtMDEsUGFpZCBTb2NpYWwsSW5zdGFncmFtLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsYWRfY2xpY2ssRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAwNywxMDAyLDIwMjQtMDEtMDIsT3JnYW5pYyBTZWFyY2gsR29vZ2xlLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsV29tZW4ncyBEcmVzc2VzLE5VTEwsTlVMTFxuMTAwMDgsMTAwMiwyMDI0LTAxLTAzLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LGFkX2NsaWNrLFRSVUUsNzAuMDAsV29tZW4ncyBEcmVzc2VzLDEwMDEsRmxvcmFsIFN1bW1lciBEcmVzc1xuMTAwMDksMTAwMywyMDI0LTAxLTAxLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMixXaW50ZXJfU2FsZV8yMDI0LGFkX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgT3V0ZXJ3ZWFyLE5VTEwsTlVMTFxuMTAwMTAsMTAwMywyMDI0LTAxLTAxLE9yZ2FuaWMgU29jaWFsLEZhY2Vib29rLE5VTEwsTlVMTCxwYWdlX3Zpc2l0LEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDExLDEwMDMsMjAyNC0wMS0wMSxQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAyLFdpbnRlcl9TYWxlX0ZCLGFkX2NsaWNrLFRSVUUsODAuMDAsTWVuJ3MgT3V0ZXJ3ZWFyLDMwMDEsV2ludGVyIENvYXQgQ2xhc3NpY1xuMTAwMTIsMTAwNCwyMDI0LTAxLTAyLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxGQUxTRSwwLjAwLFdvbWVuJ3MgQWNjZXNzb3JpZXMsTlVMTCxOVUxMXG4xMDAxMywxMDA0LDIwMjQtMDEtMDMsRW1haWwsTmV3c2xldHRlcixOVUxMLE5ld19BcnJpdmFscyxlbWFpbF9jbGljayxGQUxTRSwwLjAwLFdvbWVuJ3MgQWNjZXNzb3JpZXMsTlVMTCxOVUxMXG4xMDAxNCwxMDA0LDIwMjQtMDEtMDQsUGFpZCBTb2NpYWwsSW5zdGFncmFtLDMwMDQsU3ByaW5nX1ByZXZpZXdfSUcsYWRfY2xpY2ssVFJVRSw0NS4wMCxXb21lbidzIEFjY2Vzc29yaWVzLDQwMDEsU3ByaW5nIFNjYXJmIFNldFxuMTAwMTUsMTAwNSwyMDI0LTAxLTAxLERpcmVjdCxOVUxMLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDE2LDEwMDUsMjAyNC0wMS0wMSxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxNZW4ncyBTaGlydHMsTlVMTCxOVUxMXG4xMDAxNywxMDA1LDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAzLEV2ZXJ5ZGF5X0Vzc2VudGlhbHMsYWRfY2xpY2ssRkFMU0UsMC4wMCxNZW4ncyBTaGlydHMsTlVMTCxOVUxMXG4xMDAxOCwxMDA2LDIwMjQtMDEtMDEsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQixhZF9pbXByZXNzaW9uLEZBTFNFLDAuMDAsV29tZW4ncyBEcmVzc2VzLE5VTEwsTlVMTFxuMTAwMTksMTAwNiwyMDI0LTAxLTAxLFBhaWQgU29jaWFsLEZhY2Vib29rLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsYWRfY2xpY2ssRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAyMCwxMDA2LDIwMjQtMDEtMDIsRW1haWwsTmV3c2xldHRlcixOVUxMLEZlYXR1cmVkX1Byb2R1Y3RzLGVtYWlsX2NsaWNrLFRSVUUsOTUuMDAsV29tZW4ncyBEcmVzc2VzLDEwMDIsU3VtbWVyIE1heGkgRHJlc3NcbjEwMDIxLDEwMDcsMjAyNC0wMS0wMSxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxNZW4ncyBBY2Nlc3NvcmllcyxOVUxMLE5VTExcbjEwMDIyLDEwMDcsMjAyNC0wMS0wMSxSZWZlcnJhbCxGYXNoaW9uIEJsb2csTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxNZW4ncyBBY2Nlc3NvcmllcyxOVUxMLE5VTExcbjEwMDIzLDEwMDcsMjAyNC0wMS0wMixQYWlkIFNlYXJjaCxHb29nbGUgQWRzLDEwMDMsRXZlcnlkYXlfRXNzZW50aWFscyxhZF9jbGljayxGQUxTRSwwLjAwLE1lbidzIEFjY2Vzc29yaWVzLE5VTEwsTlVMTFxuMTAwMjQsMTAwOCwyMDI0LTAxLTAzLFBhaWQgU29jaWFsLEluc3RhZ3JhbSwzMDA0LFNwcmluZ19QcmV2aWV3X0lHLGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxXb21lbidzIE91dGVyd2VhcixOVUxMLE5VTExcbjEwMDI1LDEwMDgsMjAyNC0wMS0wNCxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxXb21lbidzIE91dGVyd2VhcixOVUxMLE5VTExcbjEwMDI2LDEwMDgsMjAyNC0wMS0wNSxQYWlkIFNlYXJjaCxHb29nbGUgQWRzLDEwMDQsU3ByaW5nX1ByZXZpZXcsYWRfY2xpY2ssVFJVRSw2NS4wMCxXb21lbidzIE91dGVyd2Vhciw1MDAxLFNwcmluZyBKYWNrZXRcbjEwMDI3LDEwMDksMjAyNC0wMS0wMSxQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLGFkX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwMjgsMTAwOSwyMDI0LTAxLTAxLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxGQUxTRSwwLjAwLE1lbidzIFNoaXJ0cyxOVUxMLE5VTExcbjEwMDI5LDEwMDksMjAyNC0wMS0wMixFbWFpbCxOZXdzbGV0dGVyLE5VTEwsV2Vla2x5X0RlYWxzLGVtYWlsX29wZW4sRkFMU0UsMC4wMCxOVUxMLE5VTEwsTlVMTFxuMTAwMzAsMTAxMCwyMDI0LTAxLTAxLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAzMSwxMDEwLDIwMjQtMDEtMDIsUGFpZCBTb2NpYWwsSW5zdGFncmFtLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsYWRfY2xpY2ssRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDAzMiwxMDEwLDIwMjQtMDEtMDMsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsYWRfY2xpY2ssVFJVRSwxMTAuMDAsV29tZW4ncyBEcmVzc2VzLDEwMDMsRXZlbmluZyBDb2NrdGFpbCBEcmVzc1xuMTAwMzMsMTAxMSwyMDI0LTAxLTAxLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxGQUxTRSwwLjAwLE1lbidzIE91dGVyd2VhcixOVUxMLE5VTExcbjEwMDM0LDEwMTEsMjAyNC0wMS0wMixQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAyLFdpbnRlcl9TYWxlX0ZCLGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxNZW4ncyBPdXRlcndlYXIsTlVMTCxOVUxMXG4xMDAzNSwxMDExLDIwMjQtMDEtMDIsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMixXaW50ZXJfU2FsZV9GQixhZF9jbGljayxGQUxTRSwwLjAwLE1lbidzIE91dGVyd2VhcixOVUxMLE5VTExcbjEwMDM2LDEwMTIsMjAyNC0wMS0wMyxQYWlkIFNvY2lhbCxJbnN0YWdyYW0sMzAwNCxTcHJpbmdfUHJldmlld19JRyxhZF9jbGljayxGQUxTRSwwLjAwLFdvbWVuJ3MgQWNjZXNzb3JpZXMsTlVMTCxOVUxMXG4xMDAzNywxMDEyLDIwMjQtMDEtMDMsT3JnYW5pYyBTZWFyY2gsR29vZ2xlLE5VTEwsTlVMTCxzaXRlX3Zpc2l0LEZBTFNFLDAuMDAsV29tZW4ncyBBY2Nlc3NvcmllcyxOVUxMLE5VTExcbjEwMDM4LDEwMTIsMjAyNC0wMS0wNCxQYWlkIFNlYXJjaCxHb29nbGUgQWRzLDEwMDQsU3ByaW5nX1ByZXZpZXcsYWRfY2xpY2ssVFJVRSw0MC4wMCxXb21lbidzIEFjY2Vzc29yaWVzLDQwMDIsU3VtbWVyIEhhdCBDb2xsZWN0aW9uXG4xMDAzOSwxMDEzLDIwMjQtMDEtMDEsRW1haWwsTmV3c2xldHRlcixOVUxMLE5ld19BcnJpdmFscyxlbWFpbF9vcGVuLEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDQwLDEwMTMsMjAyNC0wMS0wMSxFbWFpbCxOZXdzbGV0dGVyLE5VTEwsTmV3X0Fycml2YWxzLGVtYWlsX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwNDEsMTAxMywyMDI0LTAxLTAyLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMyxFdmVyeWRheV9Fc3NlbnRpYWxzLGFkX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwNDIsMTAxNCwyMDI0LTAxLTAxLFBhaWQgU29jaWFsLEZhY2Vib29rLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsYWRfaW1wcmVzc2lvbixGQUxTRSwwLjAwLFdvbWVuJ3MgRHJlc3NlcyxOVUxMLE5VTExcbjEwMDQzLDEwMTQsMjAyNC0wMS0wMSxQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLGFkX2NsaWNrLEZBTFNFLDAuMDAsV29tZW4ncyBEcmVzc2VzLE5VTEwsTlVMTFxuMTAwNDQsMTAxNCwyMDI0LTAxLTAyLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxUUlVFLDg1LjAwLFdvbWVuJ3MgRHJlc3NlcywxMDA0LFNwcmluZyBDb2xsZWN0aW9uIERyZXNzXG4xMDA0NSwxMDE1LDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAzLEV2ZXJ5ZGF5X0Vzc2VudGlhbHMsYWRfaW1wcmVzc2lvbixGQUxTRSwwLjAwLE1lbidzIEFjY2Vzc29yaWVzLE5VTEwsTlVMTFxuMTAwNDYsMTAxNSwyMDI0LTAxLTAxLE9yZ2FuaWMgU29jaWFsLEZhY2Vib29rLE5VTEwsTlVMTCxwYWdlX3Zpc2l0LEZBTFNFLDAuMDAsTlVMTCxOVUxMLE5VTExcbjEwMDQ3LDEwMTUsMjAyNC0wMS0wMixQYWlkIFNvY2lhbCxGYWNlYm9vaywyMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19GQixhZF9jbGljayxGQUxTRSwwLjAwLE1lbidzIEFjY2Vzc29yaWVzLE5VTEwsTlVMTFxuMTAwNDgsMTAxNiwyMDI0LTAxLTAzLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMixXaW50ZXJfU2FsZV8yMDI0LGFkX2NsaWNrLEZBTFNFLDAuMDAsV29tZW4ncyBPdXRlcndlYXIsTlVMTCxOVUxMXG4xMDA0OSwxMDE2LDIwMjQtMDEtMDQsRW1haWwsTmV3c2xldHRlcixOVUxMLFdpbnRlcl9TYWxlLGVtYWlsX2NsaWNrLEZBTFNFLDAuMDAsV29tZW4ncyBPdXRlcndlYXIsTlVMTCxOVUxMXG4xMDA1MCwxMDE2LDIwMjQtMDEtMDUsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMixXaW50ZXJfU2FsZV9GQixhZF9jbGljayxUUlVFLDEyMC4wMCxXb21lbidzIE91dGVyd2VhciwzMDAyLFdpbnRlciBDb2F0IERlbHV4ZVxuMTAwNTEsMTAxNywyMDI0LTAxLTAxLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxGQUxTRSwwLjAwLE1lbidzIFNoaXJ0cyxOVUxMLE5VTExcbjEwMDUyLDEwMTcsMjAyNC0wMS0wMSxQYWlkIFNvY2lhbCxJbnN0YWdyYW0sMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRyxhZF9pbXByZXNzaW9uLEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwNTMsMTAxNywyMDI0LTAxLTAyLFBhaWQgU2VhcmNoLEdvb2dsZSBBZHMsMTAwMSxTdW1tZXJfQ29sbGVjdGlvbl8yMDI0LGFkX2NsaWNrLEZBTFNFLDAuMDAsTWVuJ3MgU2hpcnRzLE5VTEwsTlVMTFxuMTAwNTQsMTAxOCwyMDI0LTAxLTAyLFBhaWQgU29jaWFsLEluc3RhZ3JhbSwzMDA1LFZhbGVudGluZV9TcGVjaWFsX0lHLGFkX2ltcHJlc3Npb24sRkFMU0UsMC4wMCxXb21lbidzIEFjY2Vzc29yaWVzLE5VTEwsTlVMTFxuMTAwNTUsMTAxOCwyMDI0LTAxLTAyLFBhaWQgU29jaWFsLEluc3RhZ3JhbSwzMDA1LFZhbGVudGluZV9TcGVjaWFsX0lHLGFkX2NsaWNrLEZBTFNFLDAuMDAsV29tZW4ncyBBY2Nlc3NvcmllcyxOVUxMLE5VTExcbjEwMDU2LDEwMTgsMjAyNC0wMS0wMyxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsVFJVRSw1NS4wMCxXb21lbidzIEFjY2Vzc29yaWVzLDQwMDMsSmV3ZWxyeSBTZXRcbjEwMDU3LDEwMTksMjAyNC0wMS0wMSxQYWlkIFNlYXJjaCxHb29nbGUgQWRzLDEwMDIsV2ludGVyX1NhbGVfMjAyNCxhZF9pbXByZXNzaW9uLEZBTFNFLDAuMDAsTWVuJ3MgT3V0ZXJ3ZWFyLE5VTEwsTlVMTFxuMTAwNTgsMTAxOSwyMDI0LTAxLTAxLE9yZ2FuaWMgU2VhcmNoLEdvb2dsZSxOVUxMLE5VTEwsc2l0ZV92aXNpdCxGQUxTRSwwLjAwLE1lbidzIE91dGVyd2VhcixOVUxMLE5VTExcbjEwMDU5LDEwMTksMjAyNC0wMS0wMixFbWFpbCxOZXdzbGV0dGVyLE5VTEwsV2ludGVyX1NhbGUsZW1haWxfY2xpY2ssRkFMU0UsMC4wMCxNZW4ncyBPdXRlcndlYXIsTlVMTCxOVUxMXG4xMDA2MCwxMDIwLDIwMjQtMDEtMDEsUGFpZCBTb2NpYWwsRmFjZWJvb2ssMjAwMSxTdW1tZXJfQ29sbGVjdGlvbl9GQixhZF9jbGljayxGQUxTRSwwLjAwLFdvbWVuJ3MgRHJlc3NlcyxOVUxMLE5VTExcbjEwMDYxLDEwMjAsMjAyNC0wMS0wMSxPcmdhbmljIFNlYXJjaCxHb29nbGUsTlVMTCxOVUxMLHNpdGVfdmlzaXQsRkFMU0UsMC4wMCxXb21lbidzIERyZXNzZXMsTlVMTCxOVUxMXG4xMDA2MiwxMDIwLDIwMjQtMDEtMDEsUGFpZCBTZWFyY2gsR29vZ2xlIEFkcywxMDAxLFN1bW1lcl9Db2xsZWN0aW9uXzIwMjQsYWRfY2xpY2ssVFJVRSw5MC4wMCxXb21lbidzIERyZXNzZXMsMTAwNSxCdXNpbmVzcyBDYXN1YWwgRHJlc3Ncbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvY3VzdG9tZXJfZGF0YS5jc3ZcbmN1c3RvbWVyX2lkLGZpcnN0X25hbWUsbGFzdF9uYW1lLGVtYWlsLGdlbmRlcixhZ2UsY2l0eSxzdGF0ZSxzaWdudXBfZGF0ZSxjdXN0b21lcl9zZWdtZW50LHRvdGFsX29yZGVycyx0b3RhbF9zcGVuZCxhdmdfb3JkZXJfdmFsdWUsbGFzdF9wdXJjaGFzZV9kYXRlLGRheXNfc2luY2VfbGFzdF9wdXJjaGFzZSxmYXZvcml0ZV9jYXRlZ29yeSxmYXZvcml0ZV9wcm9kdWN0LGVtYWlsX3N1YnNjcmliZXIsbW9iaWxlX2FwcF91c2VyLGxveWFsdHlfdGllclxuMTAwMSxKb2huLFNtaXRoLGpvaG4uc21pdGhAZW1haWwuY29tLE0sMzQsTmV3IFlvcmssTlksMjAyMy0wMS0xNSxIaWdoIFZhbHVlLDEyLDEyNTAuNDUsMTA0LjIwLDIwMjQtMDEtMDIsNSxNZW4ncyBTaGlydHMsU3VtbWVyIExpbmVuIFNoaXJ0LFRSVUUsVFJVRSxHb2xkXG4xMDAyLEVtaWx5LEpvaG5zb24sZW1pbHkuakBlbWFpbC5jb20sRiwyOSxMb3MgQW5nZWxlcyxDQSwyMDIzLTAyLTAzLFJlZ3VsYXIsOCw2NDUuNzUsODAuNzIsMjAyNC0wMS0wMyw0LFdvbWVuJ3MgRHJlc3NlcyxGbG9yYWwgU3VtbWVyIERyZXNzLFRSVUUsVFJVRSxTaWx2ZXJcbjEwMDMsTWljaGFlbCxXaWxsaWFtcyxtLndpbGxpYW1zQGVtYWlsLmNvbSxNLDQyLENoaWNhZ28sSUwsMjAyMy0wMS0yMixIaWdoIFZhbHVlLDE1LDE4NzYuMzAsMTI1LjA5LDIwMjQtMDEtMDEsNixNZW4ncyBPdXRlcndlYXIsV2ludGVyIENvYXQgQ2xhc3NpYyxUUlVFLEZBTFNFLEdvbGRcbjEwMDQsSmVzc2ljYSxCcm93bixqZXNzLmJyb3duQGVtYWlsLmNvbSxGLDMxLEhvdXN0b24sVFgsMjAyMy0wMy0xMSxSZWd1bGFyLDYsNDg3LjIwLDgxLjIwLDIwMjQtMDEtMDQsMyxXb21lbidzIEFjY2Vzc29yaWVzLFNwcmluZyBTY2FyZiBTZXQsRkFMU0UsVFJVRSxCcm9uemVcbjEwMDUsRGF2aWQsSm9uZXMsZGF2aWQuakBlbWFpbC5jb20sTSwyNyxQaGlsYWRlbHBoaWEsUEEsMjAyMy0wMi0xOCxBdCBSaXNrLDMsMjEwLjQ1LDcwLjE1LDIwMjMtMTEtMTUsNTMsTWVuJ3MgU2hpcnRzLEJhc2ljIFRlZSAzLVBhY2ssVFJVRSxGQUxTRSxCcm9uemVcbjEwMDYsU2FyYWgsR2FyY2lhLHMuZ2FyY2lhQGVtYWlsLmNvbSxGLDM4LFBob2VuaXgsQVosMjAyMy0wMS0wNSxIaWdoIFZhbHVlLDE4LDIxNDUuNjAsMTE5LjIwLDIwMjQtMDEtMDIsNSxXb21lbidzIERyZXNzZXMsU3VtbWVyIE1heGkgRHJlc3MsVFJVRSxUUlVFLFBsYXRpbnVtXG4xMDA3LFJvYmVydCxNaWxsZXIscm9iLm1pbGxlckBlbWFpbC5jb20sTSw0NSxTYW4gQW50b25pbyxUWCwyMDIzLTA0LTAyLFJlZ3VsYXIsNyw1OTguNDAsODUuNDksMjAyMy0xMi0xMiwyNixNZW4ncyBBY2Nlc3NvcmllcyxMZWF0aGVyIEJlbHQsRkFMU0UsRkFMU0UsU2lsdmVyXG4xMDA4LEplbm5pZmVyLERhdmlzLGplbi5kYXZpc0BlbWFpbC5jb20sRiwzMyxTYW4gRGllZ28sQ0EsMjAyMy0wMi0yNyxSZWd1bGFyLDksNzIzLjE1LDgwLjM1LDIwMjQtMDEtMDUsMixXb21lbidzIE91dGVyd2VhcixTcHJpbmcgSmFja2V0LFRSVUUsVFJVRSxTaWx2ZXJcbjEwMDksSmFtZXMsUm9kcmlndWV6LGoucm9kcmlndWV6QGVtYWlsLmNvbSxNLDI5LERhbGxhcyxUWCwyMDIzLTAzLTE1LEF0IFJpc2ssNCwyNjcuODAsNjYuOTUsMjAyMy0xMS0wMiw2NixNZW4ncyBTaGlydHMsR3JhcGhpYyBUZWUgQ29sbGVjdGlvbixGQUxTRSxUUlVFLEJyb256ZVxuMTAxMCxMaXNhLE1hcnRpbmV6LGxpc2EubUBlbWFpbC5jb20sRiwzNixTYW4gSm9zZSxDQSwyMDIzLTAxLTE4LEhpZ2ggVmFsdWUsMTQsMTY1NC4yNSwxMTguMTYsMjAyNC0wMS0wMyw0LFdvbWVuJ3MgRHJlc3NlcyxFdmVuaW5nIENvY2t0YWlsIERyZXNzLFRSVUUsVFJVRSxHb2xkXG4xMDExLFRob21hcyxIZXJuYW5kZXosdC5oZXJuYW5kZXpAZW1haWwuY29tLE0sNDEsQXVzdGluLFRYLDIwMjMtMDItMDksUmVndWxhciw4LDY4Ny4zNSw4NS45MiwyMDIzLTEyLTI4LDEwLE1lbidzIE91dGVyd2VhcixMaWdodHdlaWdodCBKYWNrZXQsVFJVRSxGQUxTRSxTaWx2ZXJcbjEwMTIsTWljaGVsbGUsTG9wZXosbWljaGVsbGUubEBlbWFpbC5jb20sRiwyOCxKYWNrc29udmlsbGUsRkwsMjAyMy0wNC0wNSxOZXcsMiwxNzguOTAsODkuNDUsMjAyNC0wMS0wNCwzLFdvbWVuJ3MgQWNjZXNzb3JpZXMsU3VtbWVyIEhhdCBDb2xsZWN0aW9uLFRSVUUsVFJVRSxCcm9uemVcbjEwMTMsRGFuaWVsLEdvbnphbGV6LGQuZ29uemFsZXpAZW1haWwuY29tLE0sMzIsU2FuIEZyYW5jaXNjbyxDQSwyMDIzLTAxLTI5LFJlZ3VsYXIsNyw2MTIuNDAsODcuNDksMjAyMy0xMi0xNSwyMyxNZW4ncyBTaGlydHMsT2ZmaWNlIEJ1dHRvbi1Eb3duLEZBTFNFLFRSVUUsU2lsdmVyXG4xMDE0LEFtYW5kYSxXaWxzb24sYS53aWxzb25AZW1haWwuY29tLEYsMzksSW5kaWFuYXBvbGlzLElOLDIwMjMtMDItMTQsSGlnaCBWYWx1ZSwxNiwxODk3LjYwLDExOC42MCwyMDI0LTAxLTAyLDUsV29tZW4ncyBEcmVzc2VzLFNwcmluZyBDb2xsZWN0aW9uIERyZXNzLFRSVUUsVFJVRSxHb2xkXG4xMDE1LENocmlzdG9waGVyLEFuZGVyc29uLGMuYW5kZXJzb25AZW1haWwuY29tLE0sNDQsQ29sdW1idXMsT0gsMjAyMy0wMy0yMixSZWd1bGFyLDUsNDMyLjc1LDg2LjU1LDIwMjMtMTItMjAsMTgsTWVuJ3MgQWNjZXNzb3JpZXMsV2FsbGV0IGFuZCBCZWx0IFNldCxUUlVFLEZBTFNFLEJyb256ZVxuMTAxNixTdGVwaGFuaWUsVGhvbWFzLHMudGhvbWFzQGVtYWlsLmNvbSxGLDMwLENoYXJsb3R0ZSxOQywyMDIzLTAxLTEyLEhpZ2ggVmFsdWUsMTMsMTU0My4yMCwxMTguNzEsMjAyNC0wMS0wNSwyLFdvbWVuJ3MgT3V0ZXJ3ZWFyLFdpbnRlciBDb2F0IERlbHV4ZSxUUlVFLFRSVUUsR29sZFxuMTAxNyxNYXR0aGV3LFRheWxvcixtLnRheWxvckBlbWFpbC5jb20sTSwzNyxTZWF0dGxlLFdBLDIwMjMtMDItMjEsUmVndWxhciw5LDc2NS4zMCw4NS4wMywyMDIzLTEyLTMwLDgsTWVuJ3MgU2hpcnRzLENhc3VhbCBQb2xvIFNldCxGQUxTRSxUUlVFLFNpbHZlclxuMTAxOCxOaWNvbGUsTW9vcmUsbmljb2xlLm1AZW1haWwuY29tLEYsMjYsRGVudmVyLENPLDIwMjMtMDQtMDgsTmV3LDEsOTUuNDAsOTUuNDAsMjAyNC0wMS0wMyw0LFdvbWVuJ3MgQWNjZXNzb3JpZXMsSmV3ZWxyeSBTZXQsVFJVRSxGQUxTRSxCcm9uemVcbjEwMTksQW5kcmV3LEphY2tzb24sYS5qYWNrc29uQGVtYWlsLmNvbSxNLDMxLEJvc3RvbixNQSwyMDIzLTAxLTI1LFJlZ3VsYXIsNiw1MzQuNjAsODkuMTAsMjAyMy0xMi0xMCwyOCxNZW4ncyBPdXRlcndlYXIsUmFpbiBKYWNrZXQsVFJVRSxUUlVFLFNpbHZlclxuMTAyMCxFbGl6YWJldGgsTWFydGluLGUubWFydGluQGVtYWlsLmNvbSxGLDM1LE5hc2h2aWxsZSxUTiwyMDIzLTAyLTA2LEhpZ2ggVmFsdWUsMTcsMjAzNC4xNSwxMTkuNjYsMjAyNC0wMS0wMSw2LFdvbWVuJ3MgRHJlc3NlcyxCdXNpbmVzcyBDYXN1YWwgRHJlc3MsVFJVRSxUUlVFLFBsYXRpbnVtXG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2luc3RhZ3JhbV9hZHNfZGF0YS5jc3ZcbmRhdGUsY2FtcGFpZ25faWQsY2FtcGFpZ25fbmFtZSxhZF9zZXRfaWQsYWRfc2V0X25hbWUsYWRfaWQsYWRfbmFtZSxvYmplY3RpdmUsaW1wcmVzc2lvbnMscmVhY2gsY2xpY2tzLGN0cixjcGMsc3BlbmQsY29udmVyc2lvbnMsY29udmVyc2lvbl92YWx1ZSxjb3N0X3Blcl9jb252ZXJzaW9uLHJvYXNcbjIwMjQtMDEtMDEsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywyODc2LDE5ODcsMTIzLDAuMDQyOCwwLjkwLDExMC43MCw0LDI4MC4wMCwyNy42OCwyLjUzXG4yMDI0LTAxLTAxLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTIsTWVuJ3MgU2hpcnRzLDMwMDEyMSxTdW1tZXIgU2hpcnQgU3RhdGljLENPTlZFUlNJT05TLDIzNDUsMTY1NCw5OCwwLjA0MTgsMC45MCw4OC4yMCwzLDIxMC4wMCwyOS40MCwyLjM4XG4yMDI0LTAxLTAxLDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxODc2LDEzNDUsNzYsMC4wNDA1LDAuOTUsNzIuMjAsMiwxNjAuMDAsMzYuMTAsMi4yMlxuMjAyNC0wMS0wMSwzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxNjU0LDEyMzQsNjUsMC4wMzkzLDAuODUsNTUuMjUsMSw1MC4wMCw1NS4yNSwwLjkxXG4yMDI0LTAxLTAyLDMwMDEsU3VtbWVyX0NvbGxlY3Rpb25fSUcsMzAwMTEsV29tZW4ncyBEcmVzc2VzLDMwMDExMSxTdW1tZXIgRHJlc3MgQ2Fyb3VzZWwsQ09OVkVSU0lPTlMsMzAxMiwyMTM0LDE0NSwwLjA0ODEsMC45MCwxMzAuNTAsNiw0MjAuMDAsMjEuNzUsMy4yMlxuMjAyNC0wMS0wMiwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyNTY3LDE4NzYsMTEyLDAuMDQzNiwwLjkwLDEwMC44MCw0LDI4MC4wMCwyNS4yMCwyLjc4XG4yMDI0LTAxLTAyLDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxOTg3LDE0NTYsODcsMC4wNDM4LDAuOTUsODIuNjUsMywyNDAuMDAsMjcuNTUsMi45MFxuMjAyNC0wMS0wMiwzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxNzY1LDEzNDUsNzgsMC4wNDQyLDAuODUsNjYuMzAsMiwxMDAuMDAsMzMuMTUsMS41MVxuMjAyNC0wMS0wMywzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDExLFdvbWVuJ3MgRHJlc3NlcywzMDAxMTEsU3VtbWVyIERyZXNzIENhcm91c2VsLENPTlZFUlNJT05TLDMyNDUsMjI0NSwxNjcsMC4wNTE1LDAuOTAsMTUwLjMwLDgsNTYwLjAwLDE4Ljc5LDMuNzNcbjIwMjQtMDEtMDMsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMixNZW4ncyBTaGlydHMsMzAwMTIxLFN1bW1lciBTaGlydCBTdGF0aWMsQ09OVkVSU0lPTlMsMjc4OSwxOTg3LDEzMiwwLjA0NzMsMC45MCwxMTguODAsNSwzNTAuMDAsMjMuNzYsMi45NVxuMjAyNC0wMS0wMywzMDAyLFdpbnRlcl9TYWxlX0lHLDMwMDIxLFdpbnRlciBDb2F0cywzMDAyMTEsV2ludGVyIENvYXQgVmlkZW8sQ09OVkVSU0lPTlMsMTg3NiwxNDMyLDc4LDAuMDQxNiwwLjk1LDc0LjEwLDIsMTYwLjAwLDM3LjA1LDIuMTZcbjIwMjQtMDEtMDMsMzAwMyxFdmVyeWRheV9CYXNpY3NfSUcsMzAwMzEsQmFzaWMgVGVlcywzMDAzMTEsQmFzaWMgVGVlIENvbGxlY3Rpb24sQ09OVkVSU0lPTlMsMTk4NywxNTQzLDg5LDAuMDQ0OCwwLjg1LDc1LjY1LDMsMTUwLjAwLDI1LjIyLDEuOThcbjIwMjQtMDEtMDQsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzNDU2LDIzNDUsMTg5LDAuMDU0NywwLjkwLDE3MC4xMCwxMCw3MDAuMDAsMTcuMDEsNC4xMlxuMjAyNC0wMS0wNCwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyOTg3LDIxMzQsMTQzLDAuMDQ3OSwwLjkwLDEyOC43MCw2LDQyMC4wMCwyMS40NSwzLjI2XG4yMDI0LTAxLTA0LDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxNzY1LDEzMjEsNjcsMC4wMzgwLDAuOTUsNjMuNjUsMSw4MC4wMCw2My42NSwxLjI2XG4yMDI0LTAxLTA0LDMwMDMsRXZlcnlkYXlfQmFzaWNzX0lHLDMwMDMxLEJhc2ljIFRlZSBDb2xsZWN0aW9uLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywyMTM0LDE2NTQsMTAxLDAuMDQ3MywwLjg1LDg1Ljg1LDQsMjAwLjAwLDIxLjQ2LDIuMzNcbjIwMjQtMDEtMDUsMzAwMSxTdW1tZXJfQ29sbGVjdGlvbl9JRywzMDAxMSxXb21lbidzIERyZXNzZXMsMzAwMTExLFN1bW1lciBEcmVzcyBDYXJvdXNlbCxDT05WRVJTSU9OUywzNjc4LDI1NjcsMjEyLDAuMDU3NiwwLjkwLDE5MC44MCwxMiw4NDAuMDAsMTUuOTAsNC40MFxuMjAyNC0wMS0wNSwzMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0lHLDMwMDEyLE1lbidzIFNoaXJ0cywzMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywzMjQ1LDIzNDUsMTY3LDAuMDUxNSwwLjkwLDE1MC4zMCw4LDU2MC4wMCwxOC43OSwzLjczXG4yMDI0LTAxLTA1LDMwMDIsV2ludGVyX1NhbGVfSUcsMzAwMjEsV2ludGVyIENvYXRzLDMwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywxNjU0LDEyMzQsNTYsMC4wMzM5LDAuOTUsNTMuMjAsMCwwLjAwLDAuMDAsMC4wMFxuMjAyNC0wMS0wNSwzMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19JRywzMDAzMSxCYXNpYyBUZWVzLDMwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywyMzQ1LDE3NjUsMTEyLDAuMDQ3OCwwLjg1LDk1LjIwLDUsMjUwLjAwLDE5LjA0LDIuNjNcbjIwMjQtMDEtMDYsMzAwNCxTcHJpbmdfUHJldmlld19JRywzMDA0MSxTcHJpbmcgRHJlc3NlcywzMDA0MTEsU3ByaW5nIERyZXNzIENvbGxlY3Rpb24sQ09OVkVSU0lPTlMsMjg3NiwyMTM0LDEzMiwwLjA0NTksMC45MCwxMTguODAsNSwzNTAuMDAsMjMuNzYsMi45NVxuMjAyNC0wMS0wNiwzMDA0LFNwcmluZ19QcmV2aWV3X0lHLDMwMDQyLFNwcmluZyBBY2Nlc3NvcmllcywzMDA0MjEsU3ByaW5nIEFjY2Vzc29yaWVzIENhcm91c2VsLENPTlZFUlNJT05TLDIzNDUsMTc2NSw5OCwwLjA0MTgsMC45MCw4OC4yMCwzLDI0MC4wMCwyOS40MCwyLjcyXG4yMDI0LTAxLTA2LDMwMDUsVmFsZW50aW5lX1NwZWNpYWxfSUcsMzAwNTEsR2lmdCBTZXRzLDMwMDUxMSxWYWxlbnRpbmUgR2lmdCBWaWRlbyxDT05WRVJTSU9OUywyOTg3LDIxMzQsMTU2LDAuMDUyMiwwLjk1LDE0OC4yMCw2LDQ4MC4wMCwyNC43MCwzLjI0XG4yMDI0LTAxLTA2LDMwMDUsVmFsZW50aW5lX1NwZWNpYWxfSUcsMzAwNTIsSmV3ZWxyeSwzMDA1MjEsVmFsZW50aW5lIEpld2VscnkgQ29sbGVjdGlvbixDT05WRVJTSU9OUywyNTY3LDE4NzYsMTIzLDAuMDQ3OSwwLjg1LDEwNC41NSw0LDMyMC4wMCwyNi4xNCwzLjA2XG4yMDI0LTAxLTA3LDMwMDQsU3ByaW5nX1ByZXZpZXdfSUcsMzAwNDEsU3ByaW5nIERyZXNzZXMsMzAwNDExLFNwcmluZyBEcmVzcyBDb2xsZWN0aW9uLENPTlZFUlNJT05TLDMwMTIsMjI0NSwxNTQsMC4wNTExLDAuOTAsMTM4LjYwLDcsNDkwLjAwLDE5LjgwLDMuNTRcbjIwMjQtMDEtMDcsMzAwNCxTcHJpbmdfUHJldmlld19JRywzMDA0MixTcHJpbmcgQWNjZXNzb3JpZXMsMzAwNDIxLFNwcmluZyBBY2Nlc3NvcmllcyBDYXJvdXNlbCxDT05WRVJTSU9OUywyNTY3LDE4NzYsMTEyLDAuMDQzNiwwLjkwLDEwMC44MCw0LDMyMC4wMCwyNS4yMCwzLjE3XG4yMDI0LTAxLTA3LDMwMDUsVmFsZW50aW5lX1NwZWNpYWxfSUcsMzAwNTEsR2lmdCBTZXRzLDMwMDUxMSxWYWxlbnRpbmUgR2lmdCBWaWRlbyxDT05WRVJTSU9OUywzMjQ1LDIzNDUsMTc2LDAuMDU0MiwwLjk1LDE2Ny4yMCw4LDY0MC4wMCwyMC45MCwzLjgzXG4yMDI0LTAxLTA3LDMwMDUsVmFsZW50aW5lX1NwZWNpYWxfSUcsMzAwNTIsSmV3ZWxyeSwzMDA1MjEsVmFsZW50aW5lIEpld2VscnkgQ29sbGVjdGlvbixDT05WRVJTSU9OUywyNzg5LDE5ODcsMTQzLDAuMDUxMywwLjg1LDEyMS41NSw2LDQ4MC4wMCwyMC4yNiwzLjk1XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9kYXRhL2dvb2dsZV9hbmFseXRpY3NfZGF0YS5jc3ZcbmRhdGUsc291cmNlLG1lZGl1bSxjaGFubmVsX2dyb3VwaW5nLGRldmljZV9jYXRlZ29yeSxsYW5kaW5nX3BhZ2Usc2Vzc2lvbnMsbmV3X3VzZXJzLGJvdW5jZV9yYXRlLHBhZ2VzX3Blcl9zZXNzaW9uLGF2Z19zZXNzaW9uX2R1cmF0aW9uLHRyYW5zYWN0aW9ucyxyZXZlbnVlLGNvbnZlcnNpb25fcmF0ZVxuMjAyNC0wMS0wMSxnb29nbGUsb3JnYW5pYyxPcmdhbmljIFNlYXJjaCxtb2JpbGUsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3NlcywzNDUsMTg3LDAuMzIsMy41LDI0NSwxMiw4NDAuMDAsMC4wMzQ4XG4yMDI0LTAxLTAxLGdvb2dsZSxjcGMsUGFpZCBTZWFyY2gsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTg3LDk4LDAuMjgsNC4yLDMxMiw4LDU2MC4wMCwwLjA0MjhcbjIwMjQtMDEtMDEsZmFjZWJvb2sscmVmZXJyYWwsU29jaWFsLG1vYmlsZSwvY29sbGVjdGlvbnMvd29tZW5zL3N1bW1lci1kcmVzc2VzLDE1Niw4NywwLjM1LDIuOCwxOTgsNSwzNTAuMDAsMC4wMzIxXG4yMDI0LTAxLTAxLGluc3RhZ3JhbSxyZWZlcnJhbCxTb2NpYWwsbW9iaWxlLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsMTIzLDc2LDAuMzgsMi41LDE3NiwzLDIxMC4wMCwwLjAyNDRcbjIwMjQtMDEtMDEsZGlyZWN0LG5vbmUsRGlyZWN0LGRlc2t0b3AsLywyMzQsMTEyLDAuMjUsNS42LDQyMywxNSwxMDUwLjAwLDAuMDY0MVxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9nb29nbGVfc2VhcmNoX2NvbnNvbGVfZGF0YS5jc3ZcbmRhdGUscXVlcnkscGFnZSxkZXZpY2UsY291bnRyeSxpbXByZXNzaW9ucyxjbGlja3MsY3RyLHBvc2l0aW9uXG4yMDI0LTAxLTAxLHN1bW1lciBkcmVzc2VzLC9jb2xsZWN0aW9ucy93b21lbnMvc3VtbWVyLWRyZXNzZXMsbW9iaWxlLFVTLDIzNDUsMTg3LDAuMDc5NywzLjJcbjIwMjQtMDEtMDEsc3VtbWVyIHNoaXJ0cyBtZW4sL2NvbGxlY3Rpb25zL21lbnMvc3VtbWVyLXNoaXJ0cyxtb2JpbGUsVVMsMTg3NiwxMzIsMC4wNzA0LDQuMVxuMjAyNC0wMS0wMSx3aW50ZXIgY29hdHMgc2FsZSwvY29sbGVjdGlvbnMvd2ludGVyLXNhbGUvY29hdHMsZGVza3RvcCxVUywxNTQzLDk4LDAuMDYzNSwyLjhcbjIwMjQtMDEtMDEsYmFzaWMgdC1zaGlydHMsL2NvbGxlY3Rpb25zL2Jhc2ljcy90ZWVzLHRhYmxldCxVUywxMjM0LDc2LDAuMDYxNiw1LjJcbjIwMjQtMDEtMDIsc3VtbWVyIGRyZXNzZXMsL2NvbGxlY3Rpb25zL3dvbWVucy9zdW1tZXItZHJlc3Nlcyxtb2JpbGUsVVMsMjQ1NiwyMDEsMC4wODE4LDMuMVxuMjAyNC0wMS0wMixzdW1tZXIgc2hpcnRzIG1lbiwvY29sbGVjdGlvbnMvbWVucy9zdW1tZXItc2hpcnRzLG1vYmlsZSxVUywxOTIzLDE0NSwwLjA3NTQsMy45XG4yMDI0LTAxLTAyLHdpbnRlciBjb2F0cyBzYWxlLC9jb2xsZWN0aW9ucy93aW50ZXItc2FsZS9jb2F0cyxkZXNrdG9wLFVTLDE2MjEsMTEyLDAuMDY5MSwyLjdcbjIwMjQtMDEtMDIsYmFzaWMgdC1zaGlydHMsL2NvbGxlY3Rpb25zL2Jhc2ljcy90ZWVzLHRhYmxldCxVUywxMzQ1LDg5LDAuMDY2Miw0Ljhcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGEvZmFjZWJvb2tfYWRzX2RhdGEuY3N2XG5kYXRlLGNhbXBhaWduX2lkLGNhbXBhaWduX25hbWUsYWRfc2V0X2lkLGFkX3NldF9uYW1lLGFkX2lkLGFkX25hbWUsb2JqZWN0aXZlLGltcHJlc3Npb25zLHJlYWNoLGNsaWNrcyxjdHIsY3BjLHNwZW5kLGNvbnZlcnNpb25zLGNvbnZlcnNpb25fdmFsdWUsY29zdF9wZXJfY29udmVyc2lvbixyb2FzXG4yMDI0LTAxLTAxLDIwMDEsU3VtbWVyX0NvbGxlY3Rpb25fRkIsMjAwMTEsV29tZW4ncyBEcmVzc2VzLDIwMDExMSxTdW1tZXIgRHJlc3MgQ2Fyb3VzZWwsQ09OVkVSU0lPTlMsMzQ1NiwyMzQ1LDE4NywwLjA1NDEsMC44NSwxNTguOTUsNyw0OTAuMDAsMjIuNzEsMy4wOFxuMjAyNC0wMS0wMSwyMDAxLFN1bW1lcl9Db2xsZWN0aW9uX0ZCLDIwMDEyLE1lbidzIFNoaXJ0cywyMDAxMjEsU3VtbWVyIFNoaXJ0IFN0YXRpYyxDT05WRVJTSU9OUywyODc2LDE5ODcsMTMyLDAuMDQ1OSwwLjg1LDExMi4yMCw0LDI4MC4wMCwyOC4wNSwyLjUwXG4yMDI0LTAxLTAxLDIwMDIsV2ludGVyX1NhbGVfRkIsMjAwMjEsV2ludGVyIENvYXRzLDIwMDIxMSxXaW50ZXIgQ29hdCBWaWRlbyxDT05WRVJTSU9OUywyMzQ1LDE2NTQsOTgsMC4wNDE4LDAuOTAsODguMjAsMywyNDAuMDAsMjkuNDAsMi43MlxuMjAyNC0wMS0wMSwyMDAzLEV2ZXJ5ZGF5X0Jhc2ljc19GQiwyMDAzMSxCYXNpYyBUZWVzLDIwMDMxMSxCYXNpYyBUZWUgQ29sbGVjdGlvbixDT05WRVJTSU9OUywxOTg3LDE0MzIsNzYsMC4wMzgyLDAuODAsNjAuODAsMiwxMDAuMDAsMzAuNDAsMS42NFxuLi4uXG5QYXRoOiBEamFuZ29fUGovRGlnaXRhbC1EYXRhQW5hbHlzaXMvZGF0YS9nb29nbGVfYWRzX2RhdGEuY3N2XG5kYXRlLGNhbXBhaWduX2lkLGNhbXBhaWduX25hbWUsYWRfZ3JvdXBfaWQsYWRfZ3JvdXBfbmFtZSxrZXl3b3JkLG1hdGNoX3R5cGUsZGV2aWNlLGltcHJlc3Npb25zLGNsaWNrcyxjb3N0LGNvbnZlcnNpb25zLGNvbnZlcnNpb25fdmFsdWUsY3RyLGNwYyxyb2FzXG4yMDI0LTAxLTAxLDEwMDEsU3VtbWVyX0NvbGxlY3Rpb25fMjAyNCwxMDAxMSxXb21lbidzIERyZXNzZXMsc3VtbWVyIGRyZXNzLGJyb2FkLG1vYmlsZSwxMjQ1LDc4LDE1Ni4wMCwzLDIxMC4wMCwwLjA2MjYsMi4wMCwxLjM1XG4yMDI0LTAxLTAxLDEwMDEsU3VtbWVyX0NvbGxlY3Rpb25fMjAyNCwxMDAxMixNZW4ncyBTaGlydHMsc3VtbWVyIHNoaXJ0LGJyb2FkLG1vYmlsZSw5ODcsNDUsOTAuMDAsMSw4MC4wMCwwLjA0NTYsMi4wMCwwLjg5XG4yMDI0LTAxLTAxLDEwMDIsV2ludGVyX1NhbGVfMjAyNCwxMDAyMSxXaW50ZXIgQ29hdHMsd2ludGVyIGNvYXQgc2FsZSxleGFjdCxkZXNrdG9wLDg3Niw2NSwxNjIuNTAsNCwzMjAuMDAsMC4wNzQyLDIuNTAsMS45N1xuMjAyNC0wMS0wMSwxMDAzLEV2ZXJ5ZGF5X0Vzc2VudGlhbHMsMTAwMzEsQmFzaWMgVGVlcyxiYXNpYyB0LXNoaXJ0LHBocmFzZSx0YWJsZXQsNjU0LDMyLDQ4LjAwLDIsMTAwLjAwLDAuMDQ4OSwxLjUwLDIuMDhcbi4uLlxuUGF0aDogRGphbmdvX1BqL0RpZ2l0YWwtRGF0YUFuYWx5c2lzL2RhdGFfYW5hbHlzaXMucHlcbi4uLlxuICAgIFxuICAgICMgR29vZ2xlIEFkcyBkYXRhXG4gICAgZ29vZ2xlX2FkcyA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9hZHNfZGF0YS5jc3YnKVxuICAgIGdvb2dsZV9hZHNbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKGdvb2dsZV9hZHNbJ2RhdGUnXSlcbiAgICBcbiAgICAjIEN1c3RvbWVyIHRvdWNocG9pbnRzXG4gICAgdG91Y2hwb2ludHMgPSBwZC5yZWFkX2NzdignZGF0YS9jdXN0b21lcl90b3VjaHBvaW50cy5jc3YnKVxuICAgIHRvdWNocG9pbnRzWydkYXRlJ10gPSBwZC50b19kYXRldGltZSh0b3VjaHBvaW50c1snZGF0ZSddKVxuICAgIFxuICAgICMgR29vZ2xlIFNlYXJjaCBDb25zb2xlIGRhdGFcbiAgICBzZWFyY2hfY29uc29sZSA9IHBkLnJlYWRfY3N2KCdkYXRhL2dvb2dsZV9zZWFyY2hfY29uc29sZV9kYXRhLmNzdicpXG4gICAgc2VhcmNoX2NvbnNvbGVbJ2RhdGUnXSA9IHBkLnRvX2RhdGV0aW1lKHNlYXJjaF9jb25zb2xlWydkYXRlJ10pXG4gICAgXG4gICAgcHJpbnQoXCJBbGwgZGF0YXNldHMgbG9hZGVkIHN1Y2Nlc3NmdWxseSFcIilcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICAnZ2FfZGF0YSc6IGdhX2RhdGEsXG4gICAgICAgICdjdXN0b21lcl9kYXRhJzogY3VzdG9tZXJfZGF0YSxcbiAgICAgICAgJ2ZiX2Fkcyc6IGZiX2FkcyxcbiAgICAgICAgJ2lnX2Fkcyc6IGlnX2FkcyxcbiAgICAgICAgJ2dvb2dsZV9hZHMnOiBnb29nbGVfYWRzLFxuICAgICAgICAndG91Y2hwb2ludHMnOiB0b3VjaHBvaW50cyxcbiAgICAgICAgJ3NlYXJjaF9jb25zb2xlJzogc2VhcmNoX2NvbnNvbGVcbiAgICB9XG4uLi5cblBhdGg6IERqYW5nb19Qai9EaWdpdGFsLURhdGFBbmFseXNpcy9SRUFETUUubWRcbi4uLlxuXG4tIGBnb29nbGVfYW5hbHl0aWNzX2RhdGEuY3N2YDogV2ViIGFuYWx5dGljcyBkYXRhIGluY2x1ZGluZyBzZXNzaW9ucywgY29udmVyc2lvbnMsIGFuZCByZXZlbnVlXG4tIGBjdXN0b21lcl9kYXRhLmNzdmA6IEN1c3RvbWVyIGRlbW9ncmFwaGljIGFuZCBwdXJjaGFzZSBpbmZvcm1hdGlvblxuLSBgZmFjZWJvb2tfYWRzX2RhdGEuY3N2YDogRmFjZWJvb2sgYWR2ZXJ0aXNpbmcgcGVyZm9ybWFuY2UgbWV0cmljc1xuLSBgaW5zdGFncmFtX2Fkc19kYXRhLmNzdmA6IEluc3RhZ3JhbSBhZHZlcnRpc2luZyBwZXJmb3JtYW5jZSBtZXRyaWNzXG4tIGBnb29nbGVfYWRzX2RhdGEuY3N2YDogR29vZ2xlIEFkcyBwZXJmb3JtYW5jZSBtZXRyaWNzXG4tIGBjdXN0b21lcl90b3VjaHBvaW50cy5jc3ZgOiBDdXN0b21lciBpbnRlcmFjdGlvbiBkYXRhIGFjcm9zcyBkaWZmZXJlbnQgY2hhbm5lbHNcbi0gYGdvb2dsZV9zZWFyY2hfY29uc29sZV9kYXRhLmNzdmA6IFNlYXJjaCBwZXJmb3JtYW5jZSBkYXRhIGZyb20gR29vZ2xlIFNlYXJjaCBDb25zb2xlXG5cbiMjIFNldHVwXG5cbjEuIENyZWF0ZSBhIHZpcnR1YWwgZW52aXJvbm1lbnQgKG9wdGlvbmFsIGJ1dCByZWNvbW1lbmRlZCk6XG4gICBgYGBcbiAgIHB5dGhvbiAtbSB2ZW52IC52ZW52XG4gICBzb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlICAjIE9uIFdpbmRvd3M6IC52ZW52XFxTY3JpcHRzXFxhY3RpdmF0ZVxuICAgYGBgXG5cbjIuIEluc3RhbGwgdGhlIHJlcXVpcmVkIHBhY2thZ2VzOlxuICAgYGBgXG4gICBwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0XG4gICBgYGBcbi4uLlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fX0sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjp0cnVlLCJleHRyYURhdGEiOnsiaXNBZ2VudENvbnZlcnNhdGlvbiI6dHJ1ZSwiaGFzRGlydHlFZGl0cyI6ZmFsc2UsImJhc2VsaW5lVGltZXN0YW1wIjoxNzQ1MTM2MDM1NzU1fSwicGVyc29uYVR5cGUiOjB9fSwiYWdlbnRFeGVjdXRpb25Nb2RlIjoibWFudWFsIiwiaXNBZ2VudEVkaXRzQ29sbGFwc2VkIjp0cnVlfQ==" />
      </map>
    </option>
  </component>
</project>